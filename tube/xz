# 1 ".qccq5PN4B/tube_bp.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 ".qccq5PN4B/tube_bp.c"
# 1 "tube_bp-cpp.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h"
# 1 "<command-line>"
# 1 "tube_bp-cpp.c"





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4



# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 97 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 7 "tube_bp-cpp.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 90 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 103 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 114 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 153 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 225 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 252 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 265 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 302 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 329 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 359 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 486 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 498 "/usr/include/string.h" 3 4

# 8 "tube_bp-cpp.c" 2
# 1 "/usr/include/fenv.h" 1 3 4
# 26 "/usr/include/fenv.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/fenv.h" 2 3 4
# 64 "/usr/include/fenv.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fenv.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/fenv.h" 3 4
enum
  {
    FE_INVALID =

      0x01,
    __FE_DENORM = 0x02,
    FE_DIVBYZERO =

      0x04,
    FE_OVERFLOW =

      0x08,
    FE_UNDERFLOW =

      0x10,
    FE_INEXACT =

      0x20
  };







enum
  {
    FE_TONEAREST =

      0,
    FE_DOWNWARD =

      0x400,
    FE_UPWARD =

      0x800,
    FE_TOWARDZERO =

      0xc00
  };



typedef unsigned short int fexcept_t;






typedef struct
  {
    unsigned short int __control_word;
    unsigned short int __glibc_reserved1;
    unsigned short int __status_word;
    unsigned short int __glibc_reserved2;
    unsigned short int __tags;
    unsigned short int __glibc_reserved3;
    unsigned int __eip;
    unsigned short int __cs_selector;
    unsigned int __opcode:11;
    unsigned int __glibc_reserved4:5;
    unsigned int __data_offset;
    unsigned short int __data_selector;
    unsigned short int __glibc_reserved5;

    unsigned int __mxcsr;

  }
fenv_t;
# 106 "/usr/include/x86_64-linux-gnu/bits/fenv.h" 3 4
typedef struct
  {
    unsigned short int __control_word;
    unsigned short int __glibc_reserved;
    unsigned int __mxcsr;
  }
femode_t;
# 65 "/usr/include/fenv.h" 2 3 4






extern int feclearexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));



extern int fegetexceptflag (fexcept_t *__flagp, int __excepts) __attribute__ ((__nothrow__ , __leaf__));


extern int feraiseexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fesetexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fesetexceptflag (const fexcept_t *__flagp, int __excepts) __attribute__ ((__nothrow__ , __leaf__));



extern int fetestexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fetestexceptflag (const fexcept_t *__flagp, int __excepts) __attribute__ ((__nothrow__ , __leaf__));






extern int fegetround (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));


extern int fesetround (int __rounding_direction) __attribute__ ((__nothrow__ , __leaf__));






extern int fegetenv (fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));




extern int feholdexcept (fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));



extern int fesetenv (const fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));




extern int feupdateenv (const fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));







extern int fegetmode (femode_t *__modep) __attribute__ ((__nothrow__ , __leaf__));



extern int fesetmode (const femode_t *__modep) __attribute__ ((__nothrow__ , __leaf__));
# 161 "/usr/include/fenv.h" 3 4
extern int feenableexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fedisableexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));


extern int fegetexcept (void) __attribute__ ((__nothrow__ , __leaf__));



# 9 "tube_bp-cpp.c" 2
# 1 "/home/e.sharaborin/basilisk/src/common.h"
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 128 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 9 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


extern unsigned int gnu_dev_major (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 85 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;
# 148 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 165 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 255 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));







extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1017 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4

# 2 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 37 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 38 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 22 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4




typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 78 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));







extern FILE *tmpfile (void) ;
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 868 "/usr/include/stdio.h" 3 4

# 3 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 4 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdbool.h" 1 3 4
# 5 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 6 "/home/e.sharaborin/basilisk/src/common.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/float.h" 1 3 4
# 8 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 9 "/home/e.sharaborin/basilisk/src/common.h" 2

# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4



extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



# 11 "/home/e.sharaborin/basilisk/src/common.h" 2

# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4












# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignaling (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));





extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));




extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));







extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern double nextdown (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextdown (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double nextup (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextup (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));




extern double roundeven (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __roundeven (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern double fmaxmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern double getpayload (const double *__x) __attribute__ ((__nothrow__ , __leaf__)); extern double __getpayload (const double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayload (double *__x, double __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsig (double *__x, double __payload) __attribute__ ((__nothrow__ , __leaf__));







extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));





 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));






 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));





extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));




extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));







extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern float nextdownf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextdownf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float nextupf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextupf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));




extern float roundevenf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundevenf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern float fmaxmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) __attribute__ ((__nothrow__ , __leaf__));


extern float getpayloadf (const float *__x) __attribute__ ((__nothrow__ , __leaf__)); extern float __getpayloadf (const float *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf (float *__x, float __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf (float *__x, float __payload) __attribute__ ((__nothrow__ , __leaf__));







extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));




extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));







extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern long double nextdownl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextdownl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double nextupl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextupl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));




extern long double roundevenl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern long double fmaxmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern long double getpayloadl (const long double *__x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __getpayloadl (const long double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadl (long double *__x, long double __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigl (long double *__x, long double __payload) __attribute__ ((__nothrow__ , __leaf__));







extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __acosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 asinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __asinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 atanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 cosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 sinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 tanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 coshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __coshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 sinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 tanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float32 acoshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __acoshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 asinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __asinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 atanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32 expf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __expf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 logf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __logf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 log10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __exp10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 expm1f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __expm1f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 log1pf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log1pf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 logbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __logbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 exp2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __exp2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 log2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 sqrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sqrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 cbrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cbrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 ceilf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __nanf32 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __j0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 j1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __j1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 jnf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __jnf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 y0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __y0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 y1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __y1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 ynf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __ynf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32 erff32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __erff32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 erfcf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __erfcf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 lgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __lgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 tgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 rintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __rintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 nextdownf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextdownf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 nextupf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextupf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 scalbnf32 (_Float32 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __scalbnf32 (_Float32 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 scalblnf32 (_Float32 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 nearbyintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nearbyintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 roundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 roundevenf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 getpayloadf32 (const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __getpayloadf32 (const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __acosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 asinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __asinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 atanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 cosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 sinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 tanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 coshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __coshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 sinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 tanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float64 acoshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __acoshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 asinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __asinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 atanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64 expf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __expf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 logf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __logf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 log10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __exp10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 expm1f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __expm1f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 log1pf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log1pf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 logbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __logbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 exp2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __exp2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 log2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 sqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 cbrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cbrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 ceilf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __nanf64 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __j0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 j1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __j1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 jnf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __jnf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 y0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __y0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 y1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __y1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 ynf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __ynf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64 erff64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __erff64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 erfcf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __erfcf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 lgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __lgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 tgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 rintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __rintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 nextdownf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextdownf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 nextupf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextupf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 scalbnf64 (_Float64 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __scalbnf64 (_Float64 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 scalblnf64 (_Float64 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 nearbyintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nearbyintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 roundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 roundevenf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 getpayloadf64 (const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __getpayloadf64 (const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 407 "/usr/include/math.h" 2 3 4
# 420 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 421 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 acosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __acosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 asinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __asinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 atanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 cosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 sinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 tanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 coshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __coshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 sinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 tanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float128 acoshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __acoshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 asinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __asinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 atanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float128 expf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __expf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 logf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __logf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 log10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float128 exp10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __exp10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 expm1f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __expm1f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 log1pf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log1pf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 logbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __logbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 exp2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __exp2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 log2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 cbrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cbrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 ceilf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __ceilf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fabsf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __floorf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __copysignf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __nanf128 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __j0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 j1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __j1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 jnf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __jnf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 y0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __y0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 y1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __y1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 ynf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __ynf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__));





extern _Float128 erff128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __erff128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 erfcf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __erfcf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 lgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __lgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 tgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 rintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __rintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 nextdownf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextdownf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 nextupf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextupf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 scalbnf128 (_Float128 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __scalbnf128 (_Float128 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 scalblnf128 (_Float128 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 nearbyintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nearbyintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 roundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __roundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __truncf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaxf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 roundevenf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __roundevenf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaxmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 getpayloadf128 (const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __getpayloadf128 (const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 424 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __acosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x asinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __asinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x atanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x cosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x sinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x tanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x coshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __coshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x sinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x tanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float32x acoshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __acoshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x asinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __asinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x atanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32x expf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __expf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x logf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __logf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x log10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __exp10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x expm1f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __expm1f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x log1pf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log1pf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x logbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __logbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x exp2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __exp2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x log2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x sqrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sqrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x cbrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cbrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x ceilf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __nanf32x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __j0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x j1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __j1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x jnf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __jnf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x y0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __y0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x y1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __y1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x ynf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __ynf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32x erff32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __erff32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x erfcf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __erfcf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x lgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __lgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x tgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x rintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __rintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x nextdownf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextdownf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x nextupf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextupf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x scalbnf32x (_Float32x __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __scalbnf32x (_Float32x __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x scalblnf32x (_Float32x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x nearbyintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nearbyintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x roundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x roundevenf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x getpayloadf32x (const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __getpayloadf32x (const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) __attribute__ ((__nothrow__ , __leaf__));
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __acosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x asinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __asinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x atanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x cosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x sinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x tanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x coshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __coshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x sinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x tanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




extern _Float64x acoshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __acoshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x asinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __asinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x atanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64x expf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __expf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x logf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __logf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x log10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __exp10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x expm1f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __expm1f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x log1pf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log1pf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x logbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __logbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x exp2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __exp2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x log2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x cbrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cbrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x ceilf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __nanf64x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __j0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x j1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __j1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x jnf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __jnf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x y0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __y0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x y1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __y1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x ynf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __ynf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64x erff64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __erff64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x erfcf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __erfcf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x lgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __lgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x tgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x rintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __rintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x nextdownf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextdownf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x nextupf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextupf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x scalbnf64x (_Float64x __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __scalbnf64x (_Float64x __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x scalblnf64x (_Float64x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x nearbyintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nearbyintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x roundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x roundevenf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int totalorderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int totalordermagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x getpayloadf64x (const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __getpayloadf64x (const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) __attribute__ ((__nothrow__ , __leaf__));
# 458 "/usr/include/math.h" 2 3 4
# 489 "/usr/include/math.h" 3 4
extern int signgam;
# 569 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 684 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 685 "/usr/include/math.h" 2 3 4
# 1263 "/usr/include/math.h" 3 4

# 13 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));


# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 14 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 68 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };




typedef enum __itimer_which __itimer_which_t;






extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 186 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 15 "/home/e.sharaborin/basilisk/src/common.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/resource.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/resource.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,





  __RLIMIT_RTTIME = 15,


  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 131 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 3 4
struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };



    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };
# 180 "/usr/include/x86_64-linux-gnu/bits/resource.h" 2 3 4







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};







extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
      const struct rlimit *__new_limit,
      struct rlimit *__old_limit) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) __attribute__ ((__nothrow__ , __leaf__));




# 25 "/usr/include/x86_64-linux-gnu/sys/resource.h" 2 3 4













typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
# 50 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) __attribute__ ((__nothrow__ , __leaf__));
# 61 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) __attribute__ ((__nothrow__ , __leaf__));






extern int setrlimit (__rlimit_resource_t __resource,
        const struct rlimit *__rlimits) __attribute__ ((__nothrow__ , __leaf__));
# 81 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) __attribute__ ((__nothrow__ , __leaf__));




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) __attribute__ ((__nothrow__ , __leaf__));





extern int getpriority (__priority_which_t __which, id_t __who) __attribute__ ((__nothrow__ , __leaf__));



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));


# 16 "/home/e.sharaborin/basilisk/src/common.h" 2
# 367 "/home/e.sharaborin/basilisk/src/common.h"

# 367 "/home/e.sharaborin/basilisk/src/common.h"
typedef struct {
  void * p;
  long max, len;
} Array;

Array * array_new()
{
  Array * a = ((Array *) malloc((1)*sizeof(Array)));
  a->p = 
# 375 "/home/e.sharaborin/basilisk/src/common.h" 3 4
        ((void *)0)
# 375 "/home/e.sharaborin/basilisk/src/common.h"
            ;
  a->max = a->len = 0;
  return a;
}

void array_free (Array * a)
{
  free(a->p);
  free(a);
}

void array_append (Array * a, void * elem, size_t size)
{
  if (a->len + size >= a->max) {
    a->max += ((size) > (4096) ? (size) : (4096));
    a->p = realloc(a->p,a->max);
  }
  memcpy (((char *)a->p) + a->len, elem, size);
  a->len += size;
}

void * array_shrink (Array * a)
{
  void * p = realloc(a->p,a->len);
  free(a);
  return p;
}
# 794 "/home/e.sharaborin/basilisk/src/common.h"
void init_solver()
{
# 806 "/home/e.sharaborin/basilisk/src/common.h"
}
# 816 "/home/e.sharaborin/basilisk/src/common.h"
double _val_higher_dimension = 0.;
# 816 "/home/e.sharaborin/basilisk/src/common.h"

double undefined;






static void set_fpe (void) {
  int64_t lnan = 0x7ff0000000000001;
  
# 826 "/home/e.sharaborin/basilisk/src/common.h" 3 4
 ((
# 826 "/home/e.sharaborin/basilisk/src/common.h"
 sizeof (int64_t) == sizeof (double)
# 826 "/home/e.sharaborin/basilisk/src/common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 826 "/home/e.sharaborin/basilisk/src/common.h"
 "sizeof (int64_t) == sizeof (double)"
# 826 "/home/e.sharaborin/basilisk/src/common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/common.h", 826, __extension__ __PRETTY_FUNCTION__))
# 826 "/home/e.sharaborin/basilisk/src/common.h"
                                             ;
  memcpy (&undefined, &lnan, sizeof (double));
  feenableexcept (
# 828 "/home/e.sharaborin/basilisk/src/common.h" 3 4
 0x04
# 828 "/home/e.sharaborin/basilisk/src/common.h"
 |
# 828 "/home/e.sharaborin/basilisk/src/common.h" 3 4
 0x01
# 828 "/home/e.sharaborin/basilisk/src/common.h"
 );
}
# 838 "/home/e.sharaborin/basilisk/src/common.h"
typedef struct {
  long n;
  long tn;
  int depth;
  int maxdepth;
} Grid;
Grid * grid = 
# 844 "/home/e.sharaborin/basilisk/src/common.h" 3 4
             ((void *)0)
# 844 "/home/e.sharaborin/basilisk/src/common.h"
                 ;

double X0 = 0., Y0 = 0., Z0 = 0.;

double L0 = 1.;




int N = 16;


typedef struct { int i; } scalar;

typedef struct {
  scalar x;

  scalar y;


  scalar z;

} vector;

typedef struct {
  vector x;

  vector y;


  vector z;

} tensor;

struct { int x, y, z; } Period = {
# 878 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                                 0
# 878 "/home/e.sharaborin/basilisk/src/common.h"
                                      , 
# 878 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                                        0
# 878 "/home/e.sharaborin/basilisk/src/common.h"
                                             , 
# 878 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                                               0
# 878 "/home/e.sharaborin/basilisk/src/common.h"
                                                    };

typedef struct {
  double x, y, z;
} coord;
# 895 "/home/e.sharaborin/basilisk/src/common.h"
void normalize (coord * n)
{
  double norm = 0.;
  {
# 898 "/home/e.sharaborin/basilisk/src/common.h"

    norm += ((n->x)*(n->x));
# 898 "/home/e.sharaborin/basilisk/src/common.h"

    norm += ((n->y)*(n->y));
# 898 "/home/e.sharaborin/basilisk/src/common.h"

    norm += ((n->z)*(n->z));}
  norm = sqrt(norm);
  {
# 901 "/home/e.sharaborin/basilisk/src/common.h"

    n->x /= norm;
# 901 "/home/e.sharaborin/basilisk/src/common.h"

    n->y /= norm;
# 901 "/home/e.sharaborin/basilisk/src/common.h"

    n->z /= norm;}
}

struct _origin { double x, y, z; };

void origin (struct _origin p) {
  X0 = p.x; Y0 = p.y; Z0 = p.z;
}

void size (double L) {
  L0 = L;
}

double zero (double s0, double s1, double s2) { return 0.; }
# 924 "/home/e.sharaborin/basilisk/src/common.h"
  enum { right, left, top, bottom, front, back };

int nboundary = 2*3;
# 935 "/home/e.sharaborin/basilisk/src/common.h"
double * _constant = 
# 935 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                    ((void *)0)
# 935 "/home/e.sharaborin/basilisk/src/common.h"
                        ;
extern size_t datasize;
typedef struct _Point Point;
# 1 "/home/e.sharaborin/basilisk/src/grid/boundaries.h"


typedef struct _Boundary Boundary;

struct _Boundary {
  void (* destroy) (Boundary * b);
  void (* level) (const Boundary * b, scalar * list, int l);

  void (* restriction) (const Boundary * b, scalar * list, int l);
};

static Boundary ** boundaries = 
# 12 "/home/e.sharaborin/basilisk/src/grid/boundaries.h" 3 4
                               ((void *)0)
# 12 "/home/e.sharaborin/basilisk/src/grid/boundaries.h"
                                   ;

void add_boundary (Boundary * b) {
  int len = 0;
  if (boundaries) {
    Boundary ** i = boundaries;
    while (*i++) len++;
  }
  boundaries = (Boundary * *) realloc(boundaries,(len + 2)*sizeof(Boundary *));
  boundaries[len] = b;
  boundaries[len+1] = 
# 22 "/home/e.sharaborin/basilisk/src/grid/boundaries.h" 3 4
                     ((void *)0)
# 22 "/home/e.sharaborin/basilisk/src/grid/boundaries.h"
                         ;
}

void free_boundaries() {
  if (!boundaries)
    return;
  Boundary ** i = boundaries, * b;
  while ((b = *i++))
    if (b->destroy)
      b->destroy (b);
    else
      free(b);
  free(boundaries);
  boundaries = 
# 35 "/home/e.sharaborin/basilisk/src/grid/boundaries.h" 3 4
              ((void *)0)
# 35 "/home/e.sharaborin/basilisk/src/grid/boundaries.h"
                  ;
}
# 47 "/home/e.sharaborin/basilisk/src/grid/boundaries.h"
typedef struct {
  Boundary parent;
  int d;
} BoxBoundary;
# 940 "/home/e.sharaborin/basilisk/src/common.h"



typedef struct {
# 945 "/home/e.sharaborin/basilisk/src/common.h"

  double (** boundary) (Point, Point, scalar, void *);
  double (** boundary_homogeneous) (Point, Point, scalar, void *);
  double (* gradient) (double, double, double);
  void (* delete) (scalar);
  char * name;
  struct {
    int x;

    int y;


    int z;

  } d;
  vector v;
  
# 961 "/home/e.sharaborin/basilisk/src/common.h" 3 4
 _Bool 
# 961 "/home/e.sharaborin/basilisk/src/common.h"
      face, nodump, freed;
  int block;
# 17 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  void (* prolongation) (Point, scalar);
  void (* restriction) (Point, scalar);
# 8 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  void (* refine) (Point, scalar);
# 94 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  void (* coarsen) (Point, scalar);
# 27 "/home/e.sharaborin/basilisk/src/vof.h"

  scalar * tracers, c;
  
# 29 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
 _Bool 
# 29 "/home/e.sharaborin/basilisk/src/vof.h"
      inverse;
# 81 "/home/e.sharaborin/basilisk/src/fractions.h"

  vector n;
# 456 "/home/e.sharaborin/basilisk/src/heights.h"

  vector height;
# 20 "/home/e.sharaborin/basilisk/src/iforce.h"

  scalar phi;
# 21 "/home/e.sharaborin/basilisk/src/tension.h"

  double sigma;

} _Attributes;
_Attributes * _attribute;
# 943 "/home/e.sharaborin/basilisk/src/common.h"
# 969 "/home/e.sharaborin/basilisk/src/common.h"
int list_len (scalar * list)
{
  if (!list) return 0;
  int ns = 0;
  if (list) for (scalar s = *list, *_i0 = list; ((scalar *)&s)->i >= 0; s = *++_i0) ns++;
  return ns;
}

scalar * list_append (scalar * list, scalar s)
{
  int len = list_len (list);
  list = (scalar *) realloc(list,(len + 2)*sizeof(scalar));
  list[len] = s;
  list[len + 1].i = -1;
  return list;
}

scalar * list_prepend (scalar * list, scalar s)
{
  int len = list_len (list);
  list = (scalar *) realloc(list,(len + 2)*sizeof(scalar));
  for (int i = len; i >= 1; i--)
    list[i] = list[i-1];
  list[0] = s;
  list[len + 1].i = -1;
  return list;
}

scalar * list_add (scalar * list, scalar s)
{
  if (list) for (scalar t = *list, *_i1 = list; ((scalar *)&t)->i >= 0; t = *++_i1)
    if (t.i == s.i)
      return list;
  return list_append (list, s);
}

int list_lookup (scalar * l, scalar s)
{
  if (l != 
# 1007 "/home/e.sharaborin/basilisk/src/common.h" 3 4
          ((void *)0)
# 1007 "/home/e.sharaborin/basilisk/src/common.h"
              )
    if (l) for (scalar s1 = *l, *_i2 = l; ((scalar *)&s1)->i >= 0; s1 = *++_i2)
      if (s1.i == s.i)
 return 
# 1010 "/home/e.sharaborin/basilisk/src/common.h" 3 4
       1
# 1010 "/home/e.sharaborin/basilisk/src/common.h"
           ;
  return 
# 1011 "/home/e.sharaborin/basilisk/src/common.h" 3 4
        0
# 1011 "/home/e.sharaborin/basilisk/src/common.h"
             ;
}

scalar * list_copy (scalar * l)
{
  scalar * list = 
# 1016 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1016 "/home/e.sharaborin/basilisk/src/common.h"
                     ;
  if (l != 
# 1017 "/home/e.sharaborin/basilisk/src/common.h" 3 4
          ((void *)0)
# 1017 "/home/e.sharaborin/basilisk/src/common.h"
              )
    if (l) for (scalar s = *l, *_i3 = l; ((scalar *)&s)->i >= 0; s = *++_i3)
      list = list_append (list, s);
  return list;
}

scalar * list_concat (scalar * l1, scalar * l2)
{
  scalar * l3 = list_copy (l1);
  if (l2) for (scalar s = *l2, *_i4 = l2; ((scalar *)&s)->i >= 0; s = *++_i4)
    l3 = list_append (l3, s);
  return l3;
}

void list_print (scalar * l, FILE * fp)
{
  int i = 0;
  if (l) for (scalar s = *l, *_i5 = l; ((scalar *)&s)->i >= 0; s = *++_i5)
    fprintf (fp, "%s%s", i++ == 0 ? "{" : ",", _attribute[s.i].name);
  fputs (i > 0 ? "}\n" : "{}\n", fp);
}

int vectors_len (vector * list)
{
  if (!list) return 0;
  int nv = 0;
  if (list) for (vector v = *list, *_i6 = list; ((scalar *)&v)->i >= 0; v = *++_i6) nv++;
  return nv;
}

vector * vectors_append (vector * list, vector v)
{
  int len = vectors_len (list);
  list = (vector *) realloc(list,(len + 2)*sizeof(vector));
  list[len] = v;
  list[len + 1] = (vector){{-1}};
  return list;
}

vector * vectors_add (vector * list, vector v)
{
  if (list) for (vector w = *list, *_i7 = list; ((scalar *)&w)->i >= 0; w = *++_i7) {
    
# 1059 "/home/e.sharaborin/basilisk/src/common.h" 3 4
   _Bool 
# 1059 "/home/e.sharaborin/basilisk/src/common.h"
        id = 
# 1059 "/home/e.sharaborin/basilisk/src/common.h" 3 4
             1
# 1059 "/home/e.sharaborin/basilisk/src/common.h"
                 ;
    {
# 1060 "/home/e.sharaborin/basilisk/src/common.h"

      if (w.x.i != v.x.i)
 id = 
# 1062 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     0
# 1062 "/home/e.sharaborin/basilisk/src/common.h"
          ;
# 1060 "/home/e.sharaborin/basilisk/src/common.h"

      if (w.y.i != v.y.i)
 id = 
# 1062 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     0
# 1062 "/home/e.sharaborin/basilisk/src/common.h"
          ;
# 1060 "/home/e.sharaborin/basilisk/src/common.h"

      if (w.z.i != v.z.i)
 id = 
# 1062 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     0
# 1062 "/home/e.sharaborin/basilisk/src/common.h"
          ;}
    if (id)
      return list;
  }
  return vectors_append (list, v);
}

vector * vectors_copy (vector * l)
{
  vector * list = 
# 1071 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1071 "/home/e.sharaborin/basilisk/src/common.h"
                     ;
  if (l != 
# 1072 "/home/e.sharaborin/basilisk/src/common.h" 3 4
          ((void *)0)
# 1072 "/home/e.sharaborin/basilisk/src/common.h"
              )
    if (l) for (vector v = *l, *_i8 = l; ((scalar *)&v)->i >= 0; v = *++_i8)
      list = vectors_append (list, v);
  return list;
}

vector * vectors_from_scalars (scalar * s)
{
  vector * list = 
# 1080 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1080 "/home/e.sharaborin/basilisk/src/common.h"
                     ;
  while (s->i >= 0) {
    vector v;
    {
# 1083 "/home/e.sharaborin/basilisk/src/common.h"
 {
      
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ((
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
     s->i >= 0
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
     "s->i >= 0"
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/common.h", 1084, __extension__ __PRETTY_FUNCTION__))
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
                       ;
      v.x = *s++;
    }
# 1083 "/home/e.sharaborin/basilisk/src/common.h"
 {
      
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ((
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
     s->i >= 0
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
     "s->i >= 0"
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/common.h", 1084, __extension__ __PRETTY_FUNCTION__))
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
                       ;
      v.y = *s++;
    }
# 1083 "/home/e.sharaborin/basilisk/src/common.h"
 {
      
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ((
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
     s->i >= 0
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
     "s->i >= 0"
# 1084 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/common.h", 1084, __extension__ __PRETTY_FUNCTION__))
# 1084 "/home/e.sharaborin/basilisk/src/common.h"
                       ;
      v.z = *s++;
    }}
    list = vectors_append (list, v);
  }
  return list;
}

int tensors_len (tensor * list)
{
  if (!list) return 0;
  int nt = 0;
  if (list) for (tensor t = *list, *_i9 = list; ((scalar *)&t)->i >= 0; t = *++_i9) nt++;
  return nt;
}

tensor * tensors_append (tensor * list, tensor t)
{
  int len = tensors_len (list);
  list = (tensor *) realloc(list,(len + 2)*sizeof(tensor));
  list[len] = t;
  list[len + 1] = (tensor){{{-1}}};
  return list;
}

tensor * tensors_from_vectors (vector * v)
{
  tensor * list = 
# 1111 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1111 "/home/e.sharaborin/basilisk/src/common.h"
                     ;
  while (v->x.i >= 0) {
    tensor t;
    {
# 1114 "/home/e.sharaborin/basilisk/src/common.h"
 {
      
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ((
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
     v->x.i >= 0
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
     "v->x.i >= 0"
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/common.h", 1115, __extension__ __PRETTY_FUNCTION__))
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
                         ;
      t.x = *v++;
    }
# 1114 "/home/e.sharaborin/basilisk/src/common.h"
 {
      
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ((
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
     v->y.i >= 0
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
     "v->y.i >= 0"
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/common.h", 1115, __extension__ __PRETTY_FUNCTION__))
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
                         ;
      t.y = *v++;
    }
# 1114 "/home/e.sharaborin/basilisk/src/common.h"
 {
      
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ((
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
     v->z.i >= 0
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
     "v->z.i >= 0"
# 1115 "/home/e.sharaborin/basilisk/src/common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/common.h", 1115, __extension__ __PRETTY_FUNCTION__))
# 1115 "/home/e.sharaborin/basilisk/src/common.h"
                         ;
      t.z = *v++;
    }}
    list = tensors_append (list, t);
  }
  return list;
}

scalar * all = 
# 1123 "/home/e.sharaborin/basilisk/src/common.h" 3 4
              ((void *)0)
# 1123 "/home/e.sharaborin/basilisk/src/common.h"
                  ;



scalar (* init_scalar) (scalar, const char *);
scalar (* init_vertex_scalar) (scalar, const char *);
vector (* init_vector) (vector, const char *);
tensor (* init_tensor) (tensor, const char *);
vector (* init_face_vector) (vector, const char *);





typedef struct _Event Event;
typedef int (* Expr) (int *, double *, Event *);

struct _Event {
  int last, nexpr;
  int (* action) (const int, const double, Event *);
  Expr expr[3];
  int * arrayi;
  double * arrayt;
  char * file;
  int line;
  char * name;
  double t;
  int i, a;
  void * data;
  Event * next;
};

static Event * Events = 
# 1155 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                       ((void *)0)
# 1155 "/home/e.sharaborin/basilisk/src/common.h"
                           ;

int iter = 0, inext = 0;
double t = 0, tnext = 0;
void init_events (void);
void event_register (Event event);
void _init_solver (void);







typedef struct {
  clock_t c;
  struct timeval tv;
  double tm;
} timer;

timer timer_start (void)
{
  timer t;
  t.c = clock();
  gettimeofday (&t.tv, 
# 1179 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                      ((void *)0)
# 1179 "/home/e.sharaborin/basilisk/src/common.h"
                          );



  return t;
}

double timer_elapsed (timer t)
{
  struct timeval tvend;
  gettimeofday (&tvend, 
# 1189 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                       ((void *)0)
# 1189 "/home/e.sharaborin/basilisk/src/common.h"
                           );
  return ((tvend.tv_sec - t.tv.tv_sec) +
   (tvend.tv_usec - t.tv.tv_usec)/1e6);
}



vector zerof= {{65536 + 0},{65536 + 1},{65536 + 2}};
vector unityf= {{65536 + 3},{65536 + 4},{65536 + 5}};
scalar unity= {65536 + 6};
scalar zeroc= {65536 + 7};



 vector fm = {{65536 + 3},{65536 + 4},{65536 + 5}};
 scalar cm = {(65536 + 6)};
# 1218 "/home/e.sharaborin/basilisk/src/common.h"
static FILE ** qpopen_pipes = 
# 1218 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                             ((void *)0)
# 1218 "/home/e.sharaborin/basilisk/src/common.h"
                                 ;

FILE * qpopen (const char * command, const char * type)
{
  if (0 > 0)
    return fopen ("/dev/null", type);
  FILE * fp = popen (command, type);
  if (fp) {
    FILE ** i = qpopen_pipes;
    int n = 0;
    while (i && *i) { n++; i++; }
    qpopen_pipes = (FILE * *) realloc(qpopen_pipes,(n + 2)*sizeof(FILE *));
    qpopen_pipes[n] = fp;
    qpopen_pipes[n+1] = 
# 1231 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                       ((void *)0)
# 1231 "/home/e.sharaborin/basilisk/src/common.h"
                           ;
  }
  return fp;
}

int qpclose (FILE * fp)
{
  if (0 > 0)
    return fclose (fp);
  FILE ** i = qpopen_pipes;
  while (i && *i) {
    if (*i == fp)
      *i = (FILE *) 1;
    i++;
  }
  return pclose (fp);
}

static void qpclose_all()
{
  FILE ** i = qpopen_pipes;
  while (i && *i) {
    if (*i != (FILE *) 1)
      pclose (*i);
    i++;
  }
  free(qpopen_pipes);
  qpopen_pipes = 
# 1258 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                ((void *)0)
# 1258 "/home/e.sharaborin/basilisk/src/common.h"
                    ;
}






FILE * lfopen (const char * name, const char * mode)
{
  char fname[80];
  sprintf (fname, "%s-%d", name, 0);
  return fopen (fname, mode);
}



void * matrix_new (int n, int p, size_t size)
{
  void ** m = ((void * *) malloc((n)*sizeof(void *)));
  char * a = ((char *) malloc((n*p*size)*sizeof(char)));
  for (int i = 0; i < n; i++)
    m[i] = a + i*p*size;
  return m;
}

double matrix_inverse (double ** m, int n, double pivmin)
{
  int indxc[n], indxr[n], ipiv[n];
  int i, icol = 0, irow = 0, j, k, l, ll;
  double big, dum, pivinv, minpiv = ((double)1e30);

  for (j = 0; j < n; j++)
    ipiv[j] = -1;

  for (i = 0; i < n; i++) {
    big = 0.0;
    for (j = 0; j < n; j++)
      if (ipiv[j] != 0)
 for (k = 0; k < n; k++) {
   if (ipiv[k] == -1) {
     if (fabs (m[j][k]) >= big) {
       big = fabs (m[j][k]);
       irow = j;
       icol = k;
     }
   }
 }
    ipiv[icol]++;
    if (irow != icol)
      for (l = 0; l < n; l++)
 { double tmp = m[irow][l]; m[irow][l] = m[icol][l]; m[icol][l] = tmp; };
    indxr[i] = irow;
    indxc[i] = icol;
    if (fabs (m[icol][icol]) <= pivmin)
      return 0.;
    if (fabs (m[icol][icol]) < minpiv)
      minpiv = fabs (m[icol][icol]);
    pivinv = 1.0/m[icol][icol];
    m[icol][icol] = 1.0;
    for (l = 0; l < n; l++) m[icol][l] *= pivinv;
    for (ll = 0; ll < n; ll++)
      if (ll != icol) {
 dum = m[ll][icol];
 m[ll][icol] = 0.0;
 for (l = 0; l < n; l++)
   m[ll][l] -= m[icol][l]*dum;
      }
  }
  for (l = n - 1; l >= 0; l--) {
    if (indxr[l] != indxc[l])
      for (k = 0; k < n; k++)
 { double tmp = m[k][indxr[l]]; m[k][indxr[l]] = m[k][indxc[l]]; m[k][indxc[l]] = tmp; };
  }
  return minpiv;
}

void matrix_free (void * m)
{
  free(((void **) m)[0]);
  free(m);
}



typedef void (* free_solver_func) (void);

static Array * free_solver_funcs = 
# 1345 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                                  ((void *)0)
# 1345 "/home/e.sharaborin/basilisk/src/common.h"
                                      ;

void free_solver_func_add (free_solver_func func)
{
  if (!free_solver_funcs)
    free_solver_funcs = array_new();
  array_append (free_solver_funcs, &func, sizeof(free_solver_func));
}



static char * display_defaults = 
# 1356 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                                ((void *)0)
# 1356 "/home/e.sharaborin/basilisk/src/common.h"
                                    ;

struct _display {
  const char * commands;
  
# 1360 "/home/e.sharaborin/basilisk/src/common.h" 3 4
 _Bool 
# 1360 "/home/e.sharaborin/basilisk/src/common.h"
      overwrite;
};

static void free_display_defaults() {
  free(display_defaults);
}

void display (struct _display p)
{
  if (display_defaults == 
# 1369 "/home/e.sharaborin/basilisk/src/common.h" 3 4
                         ((void *)0)
# 1369 "/home/e.sharaborin/basilisk/src/common.h"
                             )
    free_solver_func_add (free_display_defaults);
  if (p.overwrite) {
    free(display_defaults);
    display_defaults = malloc(strlen(p.commands) + 2);
    strcpy (display_defaults, "@");
    strcat (display_defaults, p.commands);
  }
  else {
    if (!display_defaults)
      display_defaults = strdup("@");
    display_defaults =
      realloc(display_defaults,strlen(display_defaults) + strlen(p.commands) + 1)
                                                                                     ;
    strcat (display_defaults, p.commands);
  }
}
# 14 "tube_bp-cpp.c"
static double _boundary0 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary0_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary1 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary1_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary2 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary2_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary3 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary3_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary4 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary4_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary5 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary5_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary6 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary6_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary7 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary7_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary8 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary8_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary9 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary9_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary10 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary10_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary11 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary11_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary12 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary12_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary13 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary13_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary14 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary14_homogeneous (Point point, Point neighbor, scalar _s, void * data);
static double _boundary15 (Point point, Point neighbor, scalar _s, void * data);
static double _boundary15_homogeneous (Point point, Point neighbor, scalar _s, void * data);
# 1 "tube_bp.c"
# 13 "tube_bp.c"
scalar fs= {0};
scalar omega= {1};
scalar l2= {2};
# 1 "grid/octree.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/octree.h"
# 1 "grid/tree.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 1 "grid/mempool.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/mempool.h"





typedef struct _Pool Pool;

struct _Pool {
  Pool * next;
};

typedef struct {
  char * first, * lastb;
  size_t size;
  size_t poolsize;
  Pool * pool, * last;
} Mempool;

typedef struct {
  char * next;
} FreeBlock;

Mempool * mempool_new (size_t poolsize, size_t size)
{

  
# 26 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
 ((
# 26 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
 poolsize % 8 == 0
# 26 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 26 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
 "poolsize % 8 == 0"
# 26 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/mempool.h", 26, __extension__ __PRETTY_FUNCTION__))
# 26 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
                           ;
  
# 27 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
 ((
# 27 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
 size >= sizeof(FreeBlock)
# 27 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 27 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
 "size >= sizeof(FreeBlock)"
# 27 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/mempool.h", 27, __extension__ __PRETTY_FUNCTION__))
# 27 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
                                   ;


  poolsize = ((1 << 20) < (poolsize + sizeof(Pool)) ? (1 << 20) : (poolsize + sizeof(Pool)));
  Mempool * m = ((Mempool *) calloc(1,sizeof(Mempool)));
  m->poolsize = poolsize;
  m->size = size;
  return m;
}

void mempool_destroy (Mempool * m)
{
  Pool * p = m->pool;
  while (p) {
    Pool * next = p->next;
    free(p);
    p = next;
  }
  free(m);
}

void * mempool_alloc (Mempool * m)
{
  if (!m->first) {

    Pool * p = (Pool *) malloc(m->poolsize);
    p->next = 
# 53 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
             ((void *)0)
# 53 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
                 ;
    if (m->last)
      m->last->next = p;
    else
      m->pool = p;
    m->last = p;
    m->first = m->lastb = ((char *)m->last) + sizeof(Pool);
    FreeBlock * b = (FreeBlock *) m->first;
    b->next = 
# 61 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
             ((void *)0)
# 61 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
                 ;
  }
  void * ret = m->first;
  FreeBlock * b = (FreeBlock *) ret;
  char * next = b->next;
  if (!next) {
    m->lastb += m->size;
    next = m->lastb;
    if (next + m->size > ((char *) m->last) + m->poolsize)
      next = 
# 70 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
            ((void *)0)
# 70 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
                ;
    else {
      FreeBlock * b = (FreeBlock *) next;
      b->next = 
# 73 "/home/e.sharaborin/basilisk/src/grid/mempool.h" 3 4
               ((void *)0)
# 73 "/home/e.sharaborin/basilisk/src/grid/mempool.h"
                   ;
    }
  }
  m->first = next;





  return ret;
}

void * mempool_alloc0 (Mempool * m)
{
  void * ret = mempool_alloc (m);
  memset (ret, 0, m->size);
  return ret;
}

void mempool_free (Mempool * m, void * p)
{





  FreeBlock * b = (FreeBlock *) p;
  b->next = m->first;
  m->first = (char *) p;
}
# 2 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 22 "/home/e.sharaborin/basilisk/src/grid/tree.h"
typedef struct {
  unsigned short flags;

  unsigned short neighbors;
  int pid;
} Cell;

enum {
  active = 1 << 0,
  leaf = 1 << 1,
  border = 1 << 2,
  vertex = 1 << 3,
  user = 4,

  face_x = 1 << 0

  , face_y = 1 << 1


  , face_z = 1 << 2

};
# 54 "/home/e.sharaborin/basilisk/src/grid/tree.h"
typedef struct {
  int i;

  int j;


  int k;

} IndexLevel;

typedef struct {
  IndexLevel * p;
  int n, nm;
} CacheLevel;

typedef struct {
  int i;

  int j;


  int k;

  int level, flags;
} Index;

typedef struct {
  Index * p;
  int n, nm;
} Cache;




static char * new_refarray (size_t len, size_t size) {
  return (char *) calloc(len + 1,size);
}

static void refarray (void * p, size_t len, size_t size) {
  int * refcount = (int *)(((char *)p) + len*size);
  (*refcount)++;
}

static 
# 97 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 97 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           unrefarray (void * p, size_t len, size_t size) {
  int * refcount = (int *)(((char *)p) + len*size);
  (*refcount)--;
  if (*refcount == 0) {
    free(p);
    return 
# 102 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
          1
# 102 "/home/e.sharaborin/basilisk/src/grid/tree.h"
              ;
  }
  return 
# 104 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
        0
# 104 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
}




typedef struct {





  char **** m;

  Mempool * pool;
  int nc;
  int len;
} Layer;

static size_t _size (size_t depth)
{
  return (1 << depth) + 2*2;
}

static size_t poolsize (size_t depth, size_t size)
{






  return ((_size(depth))*(_size(depth))*(_size(depth)))*size;

}
# 140 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static inline
void assign_periodic_x (void ** m, int i, int nl, void * b)
{
  m[i] = b;
  if (Period.x) {
    for (int j = i; j < nl + 2*2; j += nl)
      m[j] = b;
    for (int j = i - nl; j >= 0; j -= nl)
      m[j] = b;
  }
}
# 140 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static inline
void assign_periodic_y (void ** m, int i, int nl, void * b)
{
  m[i] = b;
  if (Period.y) {
    for (int j = i; j < nl + 2*2; j += nl)
      m[j] = b;
    for (int j = i - nl; j >= 0; j -= nl)
      m[j] = b;
  }
}
# 140 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static inline
void assign_periodic_z (void ** m, int i, int nl, void * b)
{
  m[i] = b;
  if (Period.z) {
    for (int j = i; j < nl + 2*2; j += nl)
      m[j] = b;
    for (int j = i - nl; j >= 0; j -= nl)
      m[j] = b;
  }
}

static Layer * new_layer (int depth)
{
  Layer * l = ((Layer *) malloc((1)*sizeof(Layer)));
  l->len = _size (depth);
  if (depth == 0)
    l->pool = 
# 158 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
             ((void *)0)
# 158 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                 ;
  else {
    size_t size = sizeof(Cell) + datasize;


    l->pool = mempool_new (poolsize (depth, size), (1 << 3)*size);
  }





  l->m = ((char *** *) calloc(l->len,sizeof(char ***)));

  l->nc = 0;
  return l;
}

static void destroy_layer (Layer * l)
{
  if (l->pool)
    mempool_destroy (l->pool);
  free(l->m);
  free(l);
}
# 200 "/home/e.sharaborin/basilisk/src/grid/tree.h"
static void layer_add_row (Layer * l, int i, int j)
{
  if (!l->m[i]) {
    assign_periodic_x ((void **) l->m, i, l->len - 2*2,
         (void *) new_refarray (l->len, sizeof (char *)));
    l->nc++;
  }
  refarray (l->m[i], l->len, sizeof(char *));

  if (!l->m[i][j])
    assign_periodic_y ((void **) l->m[i], j, l->len - 2*2,
         (void *) new_refarray (l->len, sizeof (char *)));
  refarray (l->m[i][j], l->len, sizeof(char *));

}

static 
# 216 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 216 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           layer_remove_row (Layer * l, int i, int j)
{

  if (unrefarray (l->m[i][j], l->len, sizeof (char *)))
    assign_periodic_y ((void **) l->m[i], j, l->len - 2*2, 
# 220 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                          ((void *)0)
# 220 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                              );

  if (unrefarray (l->m[i], l->len, sizeof (char *))) {
    assign_periodic_x ((void **) l->m, i, l->len - 2*2, 
# 223 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                       ((void *)0)
# 223 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                           );
    if (--l->nc == 0) {
      destroy_layer (l);
      return 
# 226 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
            1
# 226 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                ;
    }
    
# 228 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
   ((
# 228 "/home/e.sharaborin/basilisk/src/grid/tree.h"
   l->nc >= 0
# 228 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
   ) ? (void) (0) : __assert_fail (
# 228 "/home/e.sharaborin/basilisk/src/grid/tree.h"
   "l->nc >= 0"
# 228 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
   , "/home/e.sharaborin/basilisk/src/grid/tree.h", 228, __extension__ __PRETTY_FUNCTION__))
# 228 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                      ;
  }
  return 
# 230 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
        0
# 230 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
}




typedef struct {
  Grid g;
  Layer ** L;

  Cache leaves;
  Cache faces;
  Cache vertices;
  Cache refined;
  CacheLevel * active;
  CacheLevel * prolongation;
  CacheLevel * boundary;

  CacheLevel * restriction;

  
# 250 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
 _Bool 
# 250 "/home/e.sharaborin/basilisk/src/grid/tree.h"
      dirty;
} Tree;



struct _Point {

  int i;

  int j;


  int k;

  int level;






};
static Point last_point;



static void cache_level_append (CacheLevel * c, Point p)
{
  if (c->n >= c->nm) {
    c->nm += 128;
    c->p = (IndexLevel *) realloc(c->p,(c->nm)*sizeof(IndexLevel));
  }
  c->p[c->n].i = p.i;

  c->p[c->n].j = p.j;


  c->p[c->n].k = p.k;

  c->n++;
}

static void cache_level_shrink (CacheLevel * c)
{
  if (c->nm > (c->n/128 + 1)*128) {
    c->nm = (c->n/128 + 1)*128;
    
# 296 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
   ((
# 296 "/home/e.sharaborin/basilisk/src/grid/tree.h"
   c->nm > c->n
# 296 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
   ) ? (void) (0) : __assert_fail (
# 296 "/home/e.sharaborin/basilisk/src/grid/tree.h"
   "c->nm > c->n"
# 296 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
   , "/home/e.sharaborin/basilisk/src/grid/tree.h", 296, __extension__ __PRETTY_FUNCTION__))
# 296 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                        ;
    c->p = (IndexLevel *) realloc(c->p,sizeof (Index)*c->nm);
  }
}

static void cache_append (Cache * c, Point p, unsigned short flags)
{
  if (c->n >= c->nm) {
    c->nm += 128;
    c->p = (Index *) realloc(c->p,(c->nm)*sizeof(Index));
  }
  c->p[c->n].i = p.i;

  c->p[c->n].j = p.j;


  c->p[c->n].k = p.k;

  c->p[c->n].level = p.level;
  c->p[c->n].flags = flags;
  c->n++;
}

void cache_shrink (Cache * c)
{
  cache_level_shrink ((CacheLevel *)c);
}
# 378 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 388 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 392 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 395 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 404 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 407 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 430 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 466 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 1 "grid/foreach_cell.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 66 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 89 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 123 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 134 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 147 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 244 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 250 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 262 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 275 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 281 "/home/e.sharaborin/basilisk/src/grid/foreach_cell.h"
# 469 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 504 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 514 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 522 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 532 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 541 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 567 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 593 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 601 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 624 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 638 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 645 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 1 "grid/neighbors.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/neighbors.h"
# 35 "/home/e.sharaborin/basilisk/src/grid/neighbors.h"
# 45 "/home/e.sharaborin/basilisk/src/grid/neighbors.h"
# 52 "/home/e.sharaborin/basilisk/src/grid/neighbors.h"
# 649 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static inline 
# 650 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
             _Bool 
# 650 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                  has_local_children (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 651 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0))
      return 
# 654 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
            1
# 654 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                ; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  return 
# 655 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
        0
# 655 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
}

static inline void cache_append_face (Point point, unsigned short flags)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 659 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  Tree * q = ((Tree *)grid);
  cache_append (&q->faces, point, flags);
# 673 "/home/e.sharaborin/basilisk/src/grid/tree.h"
  {
# 673 "/home/e.sharaborin/basilisk/src/grid/tree.h"

    if (flags & face_x)
      for (int i = 0; i <= 1; i++)
 for (int j = 0; j <= 1; j++)
   if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]))))).flags & vertex)) {
     cache_append (&q->vertices, (Point) { point.i + 0, point.j + i, point.k + j, point.level }, 0);
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j])))).flags |= vertex;
   }
# 673 "/home/e.sharaborin/basilisk/src/grid/tree.h"

    if (flags & face_y)
      for (int i = 0; i <= 1; i++)
 for (int j = 0; j <= 1; j++)
   if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]))))).flags & vertex)) {
     cache_append (&q->vertices, (Point) { point.i + j, point.j + 0, point.k + i, point.level }, 0);
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i])))).flags |= vertex;
   }
# 673 "/home/e.sharaborin/basilisk/src/grid/tree.h"

    if (flags & face_z)
      for (int i = 0; i <= 1; i++)
 for (int j = 0; j <= 1; j++)
   if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]))))).flags & vertex)) {
     cache_append (&q->vertices, (Point) { point.i + i, point.j + j, point.k + 0, point.level }, 0);
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0])))).flags |= vertex;
   }}

}



void check_periodic (Tree * q)
{
# 713 "/home/e.sharaborin/basilisk/src/grid/tree.h"
}

static void update_cache_f (void)
{
  Tree * q = ((Tree *)grid);

  check_periodic (q);

   { { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < q->vertices.n; _k++) { point.i = q->vertices.p[_k].i; point.j = q->vertices.p[_k].j; point.k = q->vertices.p[_k].k; point.level = q->vertices.p[_k].level; _flags = q->vertices.p[_k].flags; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 721 "/home/e.sharaborin/basilisk/src/grid/tree.h"

    if (level <= (grid->depth) && (point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~vertex; } } } }; }


  q->leaves.n = q->faces.n = q->vertices.n = 0;
  for (int l = 0; l <= (grid->depth); l++)
    q->active[l].n = q->prolongation[l].n =
      q->boundary[l].n = q->restriction[l].n = 0;

  const unsigned short fboundary = 1 << user;
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 732 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 {



    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active)) {


      cache_level_append (&q->active[level], point);
    }
# 756 "/home/e.sharaborin/basilisk/src/grid/tree.h"
    if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0)) {

       { { int _nn = 2 + 0 ? 2 + 0 : 2; int _i = point.i, _j = point.j, _k = point.k; for (int _l = - _nn; _l <= _nn; _l++) { point.i = _i + _l; for (int _m = - _nn; _m <= _nn; _m++) { point.j = _j + _m; for (int _n = - _nn; _n <= _nn; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
 if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & fboundary)) {
   cache_level_append (&q->boundary[level], point);
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= fboundary;
 } } } } point.i = _i; point.j = _j; point.k = _k;}; }
    }

    else if (level > 0 && (((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0]))))).pid == 0))
      cache_level_append (&q->restriction[level], point);

    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0)) {
 cache_append (&q->leaves, point, 0);

 unsigned short flags = 0;
 {
# 773 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0) ||
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf))
     flags |= face_x;
# 773 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0) ||
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf))
     flags |= face_y;
# 773 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0) ||
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf))
     flags |= face_z;}
 if (flags)
   cache_append (&q->faces, point, flags);
 {
# 779 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid >= 0) ||
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & leaf)))
     cache_append (&q->faces, (Point) { point.i + 1, point.j + 0, point.k + 0, point.level }, face_x);
# 779 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid >= 0) ||
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & leaf)))
     cache_append (&q->faces, (Point) { point.i + 0, point.j + 1, point.k + 0, point.level }, face_y);
# 779 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid >= 0) ||
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & leaf)))
     cache_append (&q->faces, (Point) { point.i + 0, point.j + 0, point.k + 1, point.level }, face_z);}

 for (int i = 0; i <= 1; i++)

   for (int j = 0; j <= 1; j++)


     for (int k = 0; k <= 1; k++)

       if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]))))).flags & vertex)) {
  cache_append (&q->vertices, (Point) { point.i + i, point.j + j, point.k + k, point.level }, 0);
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k])))).flags |= vertex;
       }

        if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors > 0)
   cache_level_append (&q->prolongation[level], point);
      }
      else if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0) || (((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0]))))).pid == 0)) {

 unsigned short flags = 0;
 {
# 802 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if ((point.i+-1 >= 0 && point.i+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) &&
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).pid == 0) && (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0))
     flags |= face_x;
# 802 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+-1 >= 0 && point.j+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) &&
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).pid == 0) && (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0))
     flags |= face_y;
# 802 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+-1 >= 0 && point.k+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) &&
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).pid == 0) && (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0))
     flags |= face_z;}
 if (flags)
   cache_append_face (point, flags);
 {
# 808 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if ((point.i+1 >= 0 && point.i+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).pid == 0) &&
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid >= 0))
     cache_append_face ((Point) { point.i + 1, point.j + 0, point.k + 0, point.level }, face_x);
# 808 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+1 >= 0 && point.j+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).pid == 0) &&
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid >= 0))
     cache_append_face ((Point) { point.i + 0, point.j + 1, point.k + 0, point.level }, face_y);
# 808 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+1 >= 0 && point.k+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).pid == 0) &&
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid >= 0))
     cache_append_face ((Point) { point.i + 0, point.j + 0, point.k + 1, point.level }, face_z);}
      }

      continue;

    }
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }


  cache_shrink (&q->leaves);
  cache_shrink (&q->faces);
  cache_shrink (&q->vertices);
  for (int l = 0; l <= (grid->depth); l++) {
    cache_level_shrink (&q->active[l]);
    cache_level_shrink (&q->prolongation[l]);
    cache_level_shrink (&q->boundary[l]);
    cache_level_shrink (&q->restriction[l]);
}

  q->dirty = 
# 830 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
            0
# 830 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                 ;


  for (int l = (grid->depth); l >= 0; l--)
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _boundary = ((Tree *)grid)->boundary[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _boundary.n; _k++) { point.i = _boundary.p[_k].i; point.j = _boundary.p[_k].j; point.k = _boundary.p[_k].k; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 834 "/home/e.sharaborin/basilisk/src/grid/tree.h"

      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~fboundary; } } } }; }}; }



  grid->n = q->leaves.n;


  grid->tn = grid->n;
  grid->maxdepth = grid->depth;

}
# 851 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 873 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 885 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 890 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 900 "/home/e.sharaborin/basilisk/src/grid/tree.h"
# 908 "/home/e.sharaborin/basilisk/src/grid/tree.h"
void reset (void * alist, double val)
{
  scalar * list = (scalar *) alist;
  Tree * q = ((Tree *)grid);

  for (int l = 0; l <= (grid->depth); l++) {
    Layer * L = q->L[l];
    for (int i = 0; i < L->len; i++)
      if (L->m[i])







 for (int j = 0; j < L->len; j++)
   if (L->m[i][j])







          for (int k = 0; k < L->len; k++)
     if (L->m[i][j][k])
       if (list) for (scalar s = *list, *_i10 = list; ((scalar *)&s)->i >= 0; s = *++_i10) {
           if (!((s).i >= 65536))
    for (int b = 0; b < _attribute[s.i].block; b++)
      ((double *)(L->m[i][j][k] + sizeof(Cell)))[s.i + b] = val;
       }


  }
}
# 952 "/home/e.sharaborin/basilisk/src/grid/tree.h"


static void update_depth (int inc)
{
  Tree * q = ((Tree *)grid);
  grid->depth += inc;
  q->L = &(q->L[-1]);
  q->L = (Layer * *) realloc(q->L,(grid->depth + 2)*sizeof(Layer *));
  q->L = &(q->L[1]);
  if (inc > 0)
    q->L[grid->depth] = new_layer (grid->depth);
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->active[i].p); free(q->active); q->active = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->prolongation[i].p); free(q->prolongation); q->prolongation = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->boundary[i].p); free(q->boundary); q->boundary = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->restriction[i].p); free(q->restriction); q->restriction = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
}

static void alloc_children (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 970 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  if (point.level == grid->depth)
    update_depth (+1);
  else if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0][2*point.j-2 +0] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0][2*point.j-2 +0] [2*point.k-2 +0]))
    return;


  Layer * L = ((Tree *)grid)->L[point.level + 1];
  size_t len = sizeof(Cell) + datasize;
  char * b = (char *) mempool_alloc0 (L->pool);
  int nl = L->len - 2*2;
  int i = 2*point.i - 2;
  for (int k = 0; k < 2; k++, i++) {
# 997 "/home/e.sharaborin/basilisk/src/grid/tree.h"
    int j = 2*point.j - 2;
    for (int l = 0; l < 2; l++, j++) {
      layer_add_row (L, i, j);
      int m = 2*point.k - 2;
      for (int n = 0; n < 2; n++, m++) {
 
# 1002 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
((
# 1002 "/home/e.sharaborin/basilisk/src/grid/tree.h"
!L->m[i][j][m]
# 1002 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
) ? (void) (0) : __assert_fail (
# 1002 "/home/e.sharaborin/basilisk/src/grid/tree.h"
"!L->m[i][j][m]"
# 1002 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
, "/home/e.sharaborin/basilisk/src/grid/tree.h", 1002, __extension__ __PRETTY_FUNCTION__))
# 1002 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                       ;
 assign_periodic_z ((void **) L->m[i][j], m, nl, (void *) b);
 b += len;
      }
    }

  }

  int pid = (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid = pid;




  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}
# 1055 "/home/e.sharaborin/basilisk/src/grid/tree.h"
static void free_children (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1056 "/home/e.sharaborin/basilisk/src/grid/tree.h"


  Layer * L = ((Tree *)grid)->L[point.level + 1];
  int i = 2*point.i - 2, nl = L->len - 2*2;
  
# 1060 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
 ((
# 1060 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 L->m[i][2*point.j - 2][2*point.k - 2]
# 1060 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 1060 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 "L->m[i][2*point.j - 2][2*point.k - 2]"
# 1060 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/tree.h", 1060, __extension__ __PRETTY_FUNCTION__))
# 1060 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                               ;
  mempool_free (L->pool, L->m[i][2*point.j - 2][2*point.k - 2]);
  for (int k = 0; k < 2; k++, i++) {
    int j = 2*point.j - 2;
    for (int l = 0; l < 2; l++, j++) {
      int m = 2*point.k - 2;
      for (int n = 0; n < 2; n++, m++)
 assign_periodic_z ((void **) L->m[i][j], m, nl, 
# 1067 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1067 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    );
      if (layer_remove_row (L, i, j)) {
 
# 1069 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
((
# 1069 "/home/e.sharaborin/basilisk/src/grid/tree.h"
point.level + 1 == grid->depth
# 1069 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
) ? (void) (0) : __assert_fail (
# 1069 "/home/e.sharaborin/basilisk/src/grid/tree.h"
"point.level + 1 == grid->depth"
# 1069 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
, "/home/e.sharaborin/basilisk/src/grid/tree.h", 1069, __extension__ __PRETTY_FUNCTION__))
# 1069 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                       ;
 update_depth (-1);
      }
    }
  }
}


void increment_neighbors (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1078 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  ((Tree *)grid)->dirty = 
# 1079 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                         1
# 1079 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                             ;
  if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors++ == 0)
    alloc_children (point);
   { { int _nn = 2/2 + 0 ? 2/2 + 0 : 2; int _i = point.i, _j = point.j, _k = point.k; for (int _l = - _nn; _l <= _nn; _l++) { point.i = _i + _l; for (int _m = - _nn; _m <= _nn; _m++) { point.j = _j + _m; for (int _n = - _nn; _n <= _nn; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors++ == 0)
      alloc_children (point); } } } point.i = _i; point.j = _j; point.k = _k;}; }
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors--;
}

void decrement_neighbors (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1089 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  ((Tree *)grid)->dirty = 
# 1090 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                         1
# 1090 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                             ;
   { { int _nn = 2/2 + 0 ? 2/2 + 0 : 2; int _i = point.i, _j = point.j, _k = point.k; for (int _l = - _nn; _l <= _nn; _l++) { point.i = _i + _l; for (int _m = - _nn; _m <= _nn; _m++) { point.j = _j + _m; for (int _n = - _nn; _n <= _nn; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) {
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors--;
      if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors == 0)
 free_children (point);
    } } } } point.i = _i; point.j = _j; point.k = _k;}; }
  if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors) {
    int pid = (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid;
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags = 0;
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid = pid;
    } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  }
}

static void apply_periodic_elem (char ** m, int len)
{
  if (m) {
    int end = len - 2;
    for (int k = 0; k < 2; k++) {
      m[k] = m[k + end - 2];
      m[end + k] = m[k + 2];
    }
  }
}

static void apply_periodic (Tree * q)
{
# 1138 "/home/e.sharaborin/basilisk/src/grid/tree.h"
  if (Period.z) {
    for (int i = 0; i < q->L[0]->len; i++)
      for (int j = 0; j < q->L[0]->len; j++)
 for (int k = 0; k < q->L[0]->len; k++)
   q->L[0]->m[i][j][k] = q->L[0]->m[i][j][2];
    for (int l = 1; l <= (grid->depth); l++) {
      Layer * L = q->L[l];
      for (int i = 0; i < L->len; i++)
 if (L->m[i])
   for (int j = 0; j < L->len; j++)
     apply_periodic_elem (L->m[i][j], L->len);
    }
  }

}

void realloc_scalar (int size)
{

  Tree * q = ((Tree *)grid);
  size_t oldlen = sizeof(Cell) + datasize;
  size_t newlen = oldlen + size;
  datasize += size;

  Layer * L = q->L[0];
  int len = L->len;
  for (int i = Period.x*2; i < len - Period.x*2; i++) {



    for (int j = Period.y*2; j < len - Period.y*2; j++) {



      for (int k = Period.z*2; k < len - Period.z*2; k++)
 L->m[i][j][k] = (char *) realloc(L->m[i][j][k],(newlen)*sizeof(char));

    }

  }

  for (int l = 1; l <= (grid->depth); l++) {
    Layer * L = q->L[l];
    int len = L->len;
    Mempool * oldpool = L->pool;
    L->pool = mempool_new (poolsize (l, newlen), (1 << 3)*newlen);
    for (int i = Period.x*2; i < len - Period.x*2; i += 2)
      if (L->m[i]) {
# 1194 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 for (int j = Period.y*2; j < len - Period.y*2; j += 2)
   if (L->m[i][j]) {
# 1205 "/home/e.sharaborin/basilisk/src/grid/tree.h"
     for (int k = Period.z*2; k < len - Period.z*2; k += 2)
       if (L->m[i][j][k]) {
  char * new = (char *) mempool_alloc (L->pool);
  for (int l = 0; l < 2; l++)
    for (int m = 0; m < 2; m++)
      for (int n = 0; n < 2; n++) {
        memcpy (new, L->m[i+l][j+m][k+n], oldlen);
        L->m[i+l][j+m][k+n] = new;
        new += newlen;
      }
       }

   }

      }
    mempool_destroy (oldpool);
  }
  apply_periodic (q);
  check_periodic (q);
}
# 1243 "/home/e.sharaborin/basilisk/src/grid/tree.h"
static inline void no_restriction (Point point, scalar s);

static 
# 1245 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 1245 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           normal_neighbor (Point point, scalar * scalars, vector * vectors)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1246 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  for (int k = 1; k <= 2; k++)
    {
# 1248 "/home/e.sharaborin/basilisk/src/grid/tree.h"

      for (int i = -k; i <= k; i += 2*k)
 if (((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).pid < 0))) {
   Point neighbor = (Point) { point.i + i, point.j + 0, point.k + 0, point.level };
   int id = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid - 1);
   if (scalars) for (scalar s = *scalars, *_i12 = scalars; ((scalar *)&s)->i >= 0; s = *++_i12)
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = _attribute[s.i].boundary[id](neighbor, point, s, 
# 1254 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                    ((void *)0)
# 1254 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                        );
   if (vectors) for (vector v = *vectors, *_i13 = vectors; ((scalar *)&v)->i >= 0; v = *++_i13) {
     scalar vn = v.x;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = _attribute[vn.i].boundary[id](neighbor, point, v.x, 
# 1257 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1257 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );

     scalar vt = v.y;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = _attribute[vt.i].boundary[id](neighbor, point, v.y, 
# 1260 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1260 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );


     scalar vr = v.z;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = _attribute[vr.i].boundary[id](neighbor, point, v.z, 
# 1264 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1264 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );

   }
   return 
# 1267 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
         1
# 1267 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
 }
# 1248 "/home/e.sharaborin/basilisk/src/grid/tree.h"

      for (int i = -k; i <= k; i += 2*k)
 if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).pid < 0))) {
   Point neighbor = (Point) { point.i + 0, point.j + i, point.k + 0, point.level };
   int id = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid - 1);
   if (scalars) for (scalar s = *scalars, *_i12 = scalars; ((scalar *)&s)->i >= 0; s = *++_i12)
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = _attribute[s.i].boundary[id](neighbor, point, s, 
# 1254 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                    ((void *)0)
# 1254 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                        );
   if (vectors) for (vector v = *vectors, *_i13 = vectors; ((scalar *)&v)->i >= 0; v = *++_i13) {
     scalar vn = v.x;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = _attribute[vn.i].boundary[id](neighbor, point, v.y, 
# 1257 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1257 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );

     scalar vt = v.y;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = _attribute[vt.i].boundary[id](neighbor, point, v.z, 
# 1260 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1260 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );


     scalar vr = v.z;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = _attribute[vr.i].boundary[id](neighbor, point, v.x, 
# 1264 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1264 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );

   }
   return 
# 1267 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
         1
# 1267 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
 }
# 1248 "/home/e.sharaborin/basilisk/src/grid/tree.h"

      for (int i = -k; i <= k; i += 2*k)
 if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+i >= 0 && point.k+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).pid < 0))) {
   Point neighbor = (Point) { point.i + 0, point.j + 0, point.k + i, point.level };
   int id = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid - 1);
   if (scalars) for (scalar s = *scalars, *_i12 = scalars; ((scalar *)&s)->i >= 0; s = *++_i12)
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = _attribute[s.i].boundary[id](neighbor, point, s, 
# 1254 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                    ((void *)0)
# 1254 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                        );
   if (vectors) for (vector v = *vectors, *_i13 = vectors; ((scalar *)&v)->i >= 0; v = *++_i13) {
     scalar vn = v.x;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = _attribute[vn.i].boundary[id](neighbor, point, v.z, 
# 1257 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1257 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );

     scalar vt = v.y;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = _attribute[vt.i].boundary[id](neighbor, point, v.x, 
# 1260 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1260 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );


     scalar vr = v.z;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = _attribute[vr.i].boundary[id](neighbor, point, v.y, 
# 1264 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1264 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                             );

   }
   return 
# 1267 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
         1
# 1267 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
 }}
  return 
# 1269 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
        0
# 1269 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
}

static 
# 1272 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 1272 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           diagonal_neighbor_2D (Point point,
      scalar * scalars, vector * vectors)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1274 "/home/e.sharaborin/basilisk/src/grid/tree.h"


  for (int k = 1; k <= 2; k++)

    {
# 1278 "/home/e.sharaborin/basilisk/src/grid/tree.h"


      for (int i = -k; i <= k; i += 2*k)
 for (int j = -k; j <= k; j += 2*k)
   if ((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) && ((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0])))).pid < 0)) &&
       (point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).pid < 0) &&
       (point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0])))).pid < 0)) {
     Point n = (Point) { point.i + i, point.j + j, point.k + 0, point.level },
       n1 = (Point) { point.i + i, point.j + 0, point.k + 0, point.level }, n2 = (Point) { point.i + 0, point.j + j, point.k + 0, point.level };
     int id1 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).pid - 1), id2 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0])))).pid - 1);
     if (scalars) for (scalar s = *scalars, *_i14 = scalars; ((scalar *)&s)->i >= 0; s = *++_i14)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (_attribute[s.i].boundary[id1](n,n1,s,
# 1289 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                           ((void *)0)
# 1289 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                               ) +
       _attribute[s.i].boundary[id2](n,n2,s,
# 1290 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                           ((void *)0)
# 1290 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                               ) -
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(s.i)]);
     if (vectors) for (vector v = *vectors, *_i15 = vectors; ((scalar *)&v)->i >= 0; v = *++_i15) {
       scalar vt = v.y, vn = v.x;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = (_attribute[vt.i].boundary[id1](n,n1,v.x,
# 1294 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1294 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vn.i].boundary[id2](n,n2,v.x,
# 1295 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1295 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(v.x.i)]);
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = (_attribute[vn.i].boundary[id1](n,n1,v.y,
# 1297 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1297 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vt.i].boundary[id2](n,n2,v.y,
# 1298 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1298 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(v.y.i)]);

       scalar vr = v.z;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = (_attribute[vr.i].boundary[id1](n,n1,v.z,
# 1302 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1302 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vr.i].boundary[id2](n,n2,v.z,
# 1303 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1303 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(v.z.i)]);

     }
     return 
# 1307 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
           1
# 1307 "/home/e.sharaborin/basilisk/src/grid/tree.h"
               ;
   }
# 1278 "/home/e.sharaborin/basilisk/src/grid/tree.h"


      for (int i = -k; i <= k; i += 2*k)
 for (int j = -k; j <= k; j += 2*k)
   if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] && point.k+j >= 0 && point.k+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) && ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] && point.k+j >= 0 && point.k+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j])))).pid < 0)) &&
       (point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).pid < 0) &&
       (point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+j >= 0 && point.k+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j])))).pid < 0)) {
     Point n = (Point) { point.i + 0, point.j + i, point.k + j, point.level },
       n1 = (Point) { point.i + 0, point.j + i, point.k + 0, point.level }, n2 = (Point) { point.i + 0, point.j + 0, point.k + j, point.level };
     int id1 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).pid - 1), id2 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j])))).pid - 1);
     if (scalars) for (scalar s = *scalars, *_i14 = scalars; ((scalar *)&s)->i >= 0; s = *++_i14)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (_attribute[s.i].boundary[id1](n,n1,s,
# 1289 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                           ((void *)0)
# 1289 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                               ) +
       _attribute[s.i].boundary[id2](n,n2,s,
# 1290 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                           ((void *)0)
# 1290 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                               ) -
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(s.i)]);
     if (vectors) for (vector v = *vectors, *_i15 = vectors; ((scalar *)&v)->i >= 0; v = *++_i15) {
       scalar vt = v.y, vn = v.x;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = (_attribute[vt.i].boundary[id1](n,n1,v.y,
# 1294 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1294 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vn.i].boundary[id2](n,n2,v.y,
# 1295 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1295 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(v.y.i)]);
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = (_attribute[vn.i].boundary[id1](n,n1,v.z,
# 1297 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1297 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vt.i].boundary[id2](n,n2,v.z,
# 1298 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1298 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(v.z.i)]);

       scalar vr = v.z;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = (_attribute[vr.i].boundary[id1](n,n1,v.x,
# 1302 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1302 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vr.i].boundary[id2](n,n2,v.x,
# 1303 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1303 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(v.x.i)]);

     }
     return 
# 1307 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
           1
# 1307 "/home/e.sharaborin/basilisk/src/grid/tree.h"
               ;
   }
# 1278 "/home/e.sharaborin/basilisk/src/grid/tree.h"


      for (int i = -k; i <= k; i += 2*k)
 for (int j = -k; j <= k; j += 2*k)
   if ((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] && point.k+i >= 0 && point.k+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) && ((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] && point.k+i >= 0 && point.k+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i])))).pid < 0)) &&
       (point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+i >= 0 && point.k+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).pid < 0) &&
       (point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0])))).pid < 0)) {
     Point n = (Point) { point.i + j, point.j + 0, point.k + i, point.level },
       n1 = (Point) { point.i + 0, point.j + 0, point.k + i, point.level }, n2 = (Point) { point.i + j, point.j + 0, point.k + 0, point.level };
     int id1 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).pid - 1), id2 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0])))).pid - 1);
     if (scalars) for (scalar s = *scalars, *_i14 = scalars; ((scalar *)&s)->i >= 0; s = *++_i14)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (_attribute[s.i].boundary[id1](n,n1,s,
# 1289 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                           ((void *)0)
# 1289 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                               ) +
       _attribute[s.i].boundary[id2](n,n2,s,
# 1290 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                           ((void *)0)
# 1290 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                               ) -
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(s.i)]);
     if (vectors) for (vector v = *vectors, *_i15 = vectors; ((scalar *)&v)->i >= 0; v = *++_i15) {
       scalar vt = v.y, vn = v.x;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = (_attribute[vt.i].boundary[id1](n,n1,v.z,
# 1294 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1294 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vn.i].boundary[id2](n,n2,v.z,
# 1295 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1295 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(v.z.i)]);
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = (_attribute[vn.i].boundary[id1](n,n1,v.x,
# 1297 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1297 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vt.i].boundary[id2](n,n2,v.x,
# 1298 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1298 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(v.x.i)]);

       scalar vr = v.z;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = (_attribute[vr.i].boundary[id1](n,n1,v.y,
# 1302 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1302 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vr.i].boundary[id2](n,n2,v.y,
# 1303 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1303 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(v.y.i)]);

     }
     return 
# 1307 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
           1
# 1307 "/home/e.sharaborin/basilisk/src/grid/tree.h"
               ;
   }}

  return 
# 1310 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
        0
# 1310 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
}

static 
# 1313 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 1313 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           diagonal_neighbor_3D (Point point,
      scalar * scalars, vector * vectors)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1315 "/home/e.sharaborin/basilisk/src/grid/tree.h"


  for (int n = 1; n <= 2; n++)
    for (int i = -n; i <= n; i += 2*n)
      for (int j = -n; j <= n; j += 2*n)
 for (int k = -n; k <= n; k += 2*n)
   if (((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] && point.k+k >= 0 && point.k+k < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k])))).pid < 0)) &&
       ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0])))).pid < 0) &&
       ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+k])))).pid < 0) &&
       ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+k])))).pid < 0)) {
     Point
       n0 = (Point) { point.i + i, point.j + j, point.k + k, point.level },
       n1 = (Point) { point.i + i, point.j + j, point.k + 0, point.level },
       n2 = (Point) { point.i + i, point.j + 0, point.k + k, point.level },
       n3 = (Point) { point.i + 0, point.j + j, point.k + k, point.level };
     int
       id1 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0])))).pid - 1),
       id2 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+k])))).pid - 1),
       id3 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+k])))).pid - 1);
     if (scalars) for (scalar s = *scalars, *_i16 = scalars; ((scalar *)&s)->i >= 0; s = *++_i16)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (_attribute[s.i].boundary[id1](n0,n1,s,
# 1335 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                            ((void *)0)
# 1335 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                ) +
       _attribute[s.i].boundary[id2](n0,n2,s,
# 1336 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                            ((void *)0)
# 1336 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                ) +
       _attribute[s.i].boundary[id3](n0,n3,s,
# 1337 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                            ((void *)0)
# 1337 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                ) -
       2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]) + sizeof(Cell)))[(s.i)]);
     if (vectors) for (vector v = *vectors, *_i17 = vectors; ((scalar *)&v)->i >= 0; v = *++_i17) {
       scalar vt = v.y, vn = v.x, vr = v.z;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = (_attribute[vt.i].boundary[id1](n0,n1,v.x,
# 1341 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                 ((void *)0)
# 1341 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                     ) +
         _attribute[vt.i].boundary[id2](n0,n2,v.x,
# 1342 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                 ((void *)0)
# 1342 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     ) +
         _attribute[vn.i].boundary[id3](n0,n3,v.x,
# 1343 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                 ((void *)0)
# 1343 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     ) -
         2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]) + sizeof(Cell)))[(v.x.i)]);
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = (_attribute[vt.i].boundary[id1](n0,n1,v.y,
# 1345 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                 ((void *)0)
# 1345 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                     ) +
         _attribute[vn.i].boundary[id2](n0,n2,v.y,
# 1346 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                 ((void *)0)
# 1346 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     ) +
         _attribute[vt.i].boundary[id3](n0,n3,v.y,
# 1347 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                 ((void *)0)
# 1347 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     ) -
         2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]) + sizeof(Cell)))[(v.y.i)]);
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = (_attribute[vn.i].boundary[id1](n0,n1,v.z,
# 1349 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                 ((void *)0)
# 1349 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                     ) +
         _attribute[vr.i].boundary[id2](n0,n2,v.z,
# 1350 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                 ((void *)0)
# 1350 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     ) +
         _attribute[vr.i].boundary[id3](n0,n3,v.z,
# 1351 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                 ((void *)0)
# 1351 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     ) -
         2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]) + sizeof(Cell)))[(v.z.i)]);
     }
     return 
# 1354 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
           1
# 1354 "/home/e.sharaborin/basilisk/src/grid/tree.h"
               ;
   }

  return 
# 1357 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
        0
# 1357 "/home/e.sharaborin/basilisk/src/grid/tree.h"
             ;
}
# 1361 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static Point tangential_neighbor_x (Point point, 
# 1362 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                _Bool 
# 1362 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     * zn)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1363 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  for (int k = 1; k <= 2; k++)
    for (int j = -k; j <= k; j += 2*k) {
      if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0])))).pid < 0)) || ((point.i+-1 >= 0 && point.i+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+j] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+j] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+j] [point.k+0])))).pid < 0))) {
 *zn = 
# 1367 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      0
# 1367 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           ;
 return (Point) { point.i + 0, point.j + j, point.k + 0, point.level };
      }


      if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+j >= 0 && point.k+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j])))).pid < 0)) || ((point.i+-1 >= 0 && point.i+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] && point.k+j >= 0 && point.k+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+j])))).pid < 0))) {
 *zn = 
# 1373 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      1
# 1373 "/home/e.sharaborin/basilisk/src/grid/tree.h"
          ;
 return (Point) { point.i + 0, point.j + 0, point.k + j, point.level };
      }

    }
  return (Point){.level = -1};
}
# 1361 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static Point tangential_neighbor_y (Point point, 
# 1362 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                _Bool 
# 1362 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     * zn)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1363 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  for (int k = 1; k <= 2; k++)
    for (int j = -k; j <= k; j += 2*k) {
      if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+j >= 0 && point.k+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j])))).pid < 0)) || ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+-1 >= 0 && point.j+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] && point.k+j >= 0 && point.k+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+j])))).pid < 0))) {
 *zn = 
# 1367 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      0
# 1367 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           ;
 return (Point) { point.i + 0, point.j + 0, point.k + j, point.level };
      }


      if (((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0])))).pid < 0)) || ((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+-1 >= 0 && point.j+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+-1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+-1] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+-1] [point.k+0])))).pid < 0))) {
 *zn = 
# 1373 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      1
# 1373 "/home/e.sharaborin/basilisk/src/grid/tree.h"
          ;
 return (Point) { point.i + j, point.j + 0, point.k + 0, point.level };
      }

    }
  return (Point){.level = -1};
}
# 1361 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static Point tangential_neighbor_z (Point point, 
# 1362 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                _Bool 
# 1362 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                     * zn)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1363 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  for (int k = 1; k <= 2; k++)
    for (int j = -k; j <= k; j += 2*k) {
      if (((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0])))).pid < 0)) || ((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] && point.k+-1 >= 0 && point.k+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+-1]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+-1])))).pid < 0))) {
 *zn = 
# 1367 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      0
# 1367 "/home/e.sharaborin/basilisk/src/grid/tree.h"
           ;
 return (Point) { point.i + j, point.j + 0, point.k + 0, point.level };
      }


      if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0])))).pid < 0)) || ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] && point.k+-1 >= 0 && point.k+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+-1]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+-1])))).pid < 0))) {
 *zn = 
# 1373 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
      1
# 1373 "/home/e.sharaborin/basilisk/src/grid/tree.h"
          ;
 return (Point) { point.i + 0, point.j + j, point.k + 0, point.level };
      }

    }
  return (Point){.level = -1};
}


static inline 
# 1382 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
             _Bool 
# 1382 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                  is_boundary_point (Point point) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1382 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  return ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0);
}

static void box_boundary_level (const Boundary * b, scalar * list, int l)
{
  ;
  scalar * scalars = 
# 1389 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                    ((void *)0)
# 1389 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                        ;
  vector * vectors = 
# 1390 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                    ((void *)0)
# 1390 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                        , * faces = 
# 1390 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                    ((void *)0)
# 1390 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                        ;
  if (list) for (scalar s = *list, *_i18 = list; ((scalar *)&s)->i >= 0; s = *++_i18)
    if (!((s).i >= 65536) && _attribute[s.i].refine != no_restriction) {
      if (_attribute[s.i].v.x.i == s.i) {
 if (_attribute[s.i].face)
   faces = vectors_add (faces, _attribute[s.i].v);
 else
   vectors = vectors_add (vectors, _attribute[s.i].v);
      }
      else if (_attribute[s.i].v.x.i < 0 && _attribute[s.i].boundary[0])
 scalars = list_add (scalars, s);
    }

   { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _boundary = ((Tree *)grid)->boundary[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _boundary.n; _k++) { point.i = _boundary.p[_k].i; point.j = _boundary.p[_k].j; point.k = _boundary.p[_k].k; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 1403 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 {
    if (!normal_neighbor (point, scalars, vectors) &&
 !diagonal_neighbor_2D (point, scalars, vectors) &&
 !diagonal_neighbor_3D (point, scalars, vectors)) {

      if (scalars) for (scalar s = *scalars, *_i19 = scalars; ((scalar *)&s)->i >= 0; s = *++_i19)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = undefined;
      if (vectors) for (vector v = *vectors, *_i20 = vectors; ((scalar *)&v)->i >= 0; v = *++_i20)
 {
# 1411 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = undefined;
# 1411 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = undefined;
# 1411 "/home/e.sharaborin/basilisk/src/grid/tree.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = undefined;}
    }
    if (faces) {
      int id = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid - 1);
      {
# 1416 "/home/e.sharaborin/basilisk/src/grid/tree.h"

 for (int i = -1; i <= 1; i += 2) {

   if (((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).pid < 0))) {
     Point neighbor = (Point) { point.i + i, point.j + 0, point.k + 0, point.level };
     if (faces) for (vector v = *faces, *_i21 = faces; ((scalar *)&v)->i >= 0; v = *++_i21) {
       scalar vn = v.x;
       if (_attribute[vn.i].boundary[id])
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(i + 1)/2][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = _attribute[vn.i].boundary[id](neighbor, point, v.x, 
# 1424 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                              ((void *)0)
# 1424 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                                  );
     }
   }

   else if (i == -1) {

     
# 1430 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
    _Bool 
# 1430 "/home/e.sharaborin/basilisk/src/grid/tree.h"
         zn;
     Point neighbor = tangential_neighbor_x (point, &zn);
     if (neighbor.level >= 0) {
       int id = is_boundary_point (neighbor) ?
  (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid - 1) : (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid - 1);
       if (faces) for (vector v = *faces, *_i22 = faces; ((scalar *)&v)->i >= 0; v = *++_i22) {



  scalar vt = zn ? v.y : v.z;

  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = _attribute[vt.i].boundary[id](neighbor, point, v.x, 
# 1441 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                      ((void *)0)
# 1441 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                          );
       }
     }
     else

       if (faces) for (vector v = *faces, *_i23 = faces; ((scalar *)&v)->i >= 0; v = *++_i23)
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = 0.;
   }

 }
# 1416 "/home/e.sharaborin/basilisk/src/grid/tree.h"

 for (int i = -1; i <= 1; i += 2) {

   if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).pid < 0))) {
     Point neighbor = (Point) { point.i + 0, point.j + i, point.k + 0, point.level };
     if (faces) for (vector v = *faces, *_i21 = faces; ((scalar *)&v)->i >= 0; v = *++_i21) {
       scalar vn = v.x;
       if (_attribute[vn.i].boundary[id])
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+(i + 1)/2] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = _attribute[vn.i].boundary[id](neighbor, point, v.y, 
# 1424 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                              ((void *)0)
# 1424 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                                  );
     }
   }

   else if (i == -1) {

     
# 1430 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
    _Bool 
# 1430 "/home/e.sharaborin/basilisk/src/grid/tree.h"
         zn;
     Point neighbor = tangential_neighbor_y (point, &zn);
     if (neighbor.level >= 0) {
       int id = is_boundary_point (neighbor) ?
  (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid - 1) : (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid - 1);
       if (faces) for (vector v = *faces, *_i22 = faces; ((scalar *)&v)->i >= 0; v = *++_i22) {



  scalar vt = zn ? v.y : v.z;

  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = _attribute[vt.i].boundary[id](neighbor, point, v.y, 
# 1441 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                      ((void *)0)
# 1441 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                          );
       }
     }
     else

       if (faces) for (vector v = *faces, *_i23 = faces; ((scalar *)&v)->i >= 0; v = *++_i23)
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = 0.;
   }

 }
# 1416 "/home/e.sharaborin/basilisk/src/grid/tree.h"

 for (int i = -1; i <= 1; i += 2) {

   if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+i >= 0 && point.k+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).pid < 0))) {
     Point neighbor = (Point) { point.i + 0, point.j + 0, point.k + i, point.level };
     if (faces) for (vector v = *faces, *_i21 = faces; ((scalar *)&v)->i >= 0; v = *++_i21) {
       scalar vn = v.x;
       if (_attribute[vn.i].boundary[id])
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+(i + 1)/2]) + sizeof(Cell)))[(v.z.i)] = _attribute[vn.i].boundary[id](neighbor, point, v.z, 
# 1424 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                              ((void *)0)
# 1424 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                                  );
     }
   }

   else if (i == -1) {

     
# 1430 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
    _Bool 
# 1430 "/home/e.sharaborin/basilisk/src/grid/tree.h"
         zn;
     Point neighbor = tangential_neighbor_z (point, &zn);
     if (neighbor.level >= 0) {
       int id = is_boundary_point (neighbor) ?
  (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid - 1) : (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid - 1);
       if (faces) for (vector v = *faces, *_i22 = faces; ((scalar *)&v)->i >= 0; v = *++_i22) {



  scalar vt = zn ? v.y : v.z;

  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = _attribute[vt.i].boundary[id](neighbor, point, v.z, 
# 1441 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                                                                      ((void *)0)
# 1441 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                                                                          );
       }
     }
     else

       if (faces) for (vector v = *faces, *_i23 = faces; ((scalar *)&v)->i >= 0; v = *++_i23)
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = 0.;
   }

 }}
    }
  } } } } }; }}; }

  free(scalars);
  free(vectors);
  free(faces);
  ;
}
# 1467 "/home/e.sharaborin/basilisk/src/grid/tree.h"
static double masked_average (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1468 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  double sum = 0., n = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] != ((double)1e30))
      sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], n++; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  return n ? sum/n : ((double)1e30);
}
# 1476 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static double masked_average_x (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1478 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  double sum = 0., n = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (child.x < 0 && (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0) || !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid < 0)) &&
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] != ((double)1e30))
      sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], n++; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  return n ? sum/n : ((double)1e30);
}
# 1476 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static double masked_average_y (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1478 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  double sum = 0., n = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (child.y < 0 && (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0) || !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid < 0)) &&
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] != ((double)1e30))
      sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)], n++; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  return n ? sum/n : ((double)1e30);
}
# 1476 "/home/e.sharaborin/basilisk/src/grid/tree.h"

static double masked_average_z (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1478 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  double sum = 0., n = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (child.z < 0 && (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0) || !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid < 0)) &&
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] != ((double)1e30))
      sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)], n++; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  return n ? sum/n : ((double)1e30);
}

static void masked_boundary_restriction (const Boundary * b,
      scalar * list, int l)
{
  scalar * scalars = 
# 1490 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                    ((void *)0)
# 1490 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                        ;
  vector * faces = 
# 1491 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
                  ((void *)0)
# 1491 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                      ;
  if (list) for (scalar s = *list, *_i24 = list; ((scalar *)&s)->i >= 0; s = *++_i24)
    if (!((s).i >= 65536) && _attribute[s.i].refine != no_restriction) {
      if (_attribute[s.i].v.x.i == s.i && _attribute[s.i].face)
 faces = vectors_add (faces, _attribute[s.i].v);
      else
 scalars = list_add (scalars, s);
    }

   { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->restriction[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; point.k = _cache.p[_k].k; ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 1500 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 {
    if (scalars) for (scalar s = *scalars, *_i25 = scalars; ((scalar *)&s)->i >= 0; s = *++_i25)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = masked_average (parent, s);
    if (faces) for (vector v = *faces, *_i26 = faces; ((scalar *)&v)->i >= 0; v = *++_i26)
      {
# 1504 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 {
 double average = masked_average_x (parent, v.x);
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = average;
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = average;
      }
# 1504 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 {
 double average = masked_average_y (parent, v.y);
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = average;
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = average;
      }
# 1504 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 {
 double average = masked_average_z (parent, v.z);
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = average;
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)] = average;
      }}
  } } } } }; }}; }

  free(scalars);
  free(faces);
}
# 1540 "/home/e.sharaborin/basilisk/src/grid/tree.h"
static void free_cache (CacheLevel * c)
{
  for (int l = 0; l <= (grid->depth); l++)
    free(c[l].p);
  free(c);
}

void free_grid (void)
{
  if (!grid)
    return;
  free_boundaries();
  Tree * q = ((Tree *)grid);
  free(q->leaves.p);
  free(q->faces.p);
  free(q->vertices.p);
  free(q->refined.p);


  Layer * L = q->L[0];
# 1576 "/home/e.sharaborin/basilisk/src/grid/tree.h"
  for (int i = Period.x*2; i < L->len - Period.x*2; i++) {
    for (int j = Period.y*2; j < L->len - Period.y*2; j++) {
      for (int k = Period.z*2; k < L->len - Period.z*2; k++)
 free(L->m[i][j][k]);
      free(L->m[i][j]);
    }
    free(L->m[i]);
  }

  for (int l = 1; l <= (grid->depth); l++) {
    Layer * L = q->L[l];
    for (int i = Period.x*2; i < L->len - Period.x*2; i++)
      if (L->m[i]) {
 for (int j = Period.y*2; j < L->len - Period.y*2; j++)
   if (L->m[i][j])
     free(L->m[i][j]);
 free(L->m[i]);
      }
  }

  for (int l = 0; l <= (grid->depth); l++)
    destroy_layer (q->L[l]);
  q->L = &(q->L[-1]);
  free(q->L);
  free_cache (q->active);
  free_cache (q->prolongation);
  free_cache (q->boundary);
  free_cache (q->restriction);
  free(q);
  grid = 
# 1605 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
        ((void *)0)
# 1605 "/home/e.sharaborin/basilisk/src/grid/tree.h"
            ;
}

static void refine_level (int depth);


void init_grid (int n)
{ ;

  
# 1614 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
 ((
# 1614 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 sizeof(Cell) % 8 == 0
# 1614 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 1614 "/home/e.sharaborin/basilisk/src/grid/tree.h"
 "sizeof(Cell) % 8 == 0"
# 1614 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/tree.h", 1614, __extension__ __PRETTY_FUNCTION__))
# 1614 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                               ;

  free_grid();
  int depth = 0;
  while (n > 1) {
    if (n % 2) {
      fprintf (
# 1620 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
              stderr
# 1620 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                  , "tree: N must be a power-of-two\n");
      exit (1);
    }
    n /= 2;
    depth++;
  }
  Tree * q = ((Tree *) calloc(1,sizeof(Tree)));
  grid = (Grid *) q;
  grid->depth = 0;


  q->L = ((Layer * *) malloc((2)*sizeof(Layer *)));

  q->L[0] = 
# 1633 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
           ((void *)0)
# 1633 "/home/e.sharaborin/basilisk/src/grid/tree.h"
               ; q->L = &(q->L[1]);

  Layer * L = new_layer (0);
  q->L[0] = L;
# 1670 "/home/e.sharaborin/basilisk/src/grid/tree.h"
  for (int i = Period.x*2; i < L->len - Period.x*2; i++)
    for (int j = Period.y*2; j < L->len - Period.y*2; j++) {
      layer_add_row (L, i, j);
      for (int k = Period.z*2; k < L->len - Period.z*2; k++)
 L->m[i][j][k] = (char *) calloc(1,sizeof(Cell) + datasize);
    }
  apply_periodic (q);
  (*((Cell *)(L->m[2][2][2]))).flags |= leaf;
  if (0 == 0)
    (*((Cell *)(L->m[2][2][2]))).flags |= active;
  for (int k = - 2*(1 - Period.x); k <= 2*(1 - Period.x); k++)
    for (int l = -2*(1 - Period.y); l <= 2*(1 - Period.y); l++)
      for (int n = -2*(1 - Period.z); n <= 2*(1 - Period.z); n++)
 (*((Cell *)(L->m[2 +k][2 +l][2 +n]))).pid = (k > 0 ? -1 - right :
       k < 0 ? -1 - left :
       l > 0 ? -1 - top :
       l < 0 ? -1 - bottom :
       n > 0 ? -1 - front :
       n < 0 ? -1 - back :
       0);
  (*((Cell *)(L->m[2][2][2]))).pid = 0;

  q->active = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->prolongation = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->boundary = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->restriction = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->dirty = 
# 1696 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
            1
# 1696 "/home/e.sharaborin/basilisk/src/grid/tree.h"
                ;
  N = 1 << depth;





  Boundary * b = ((Boundary *) calloc(1,sizeof(Boundary)));
  b->level = box_boundary_level;
  b->restriction = masked_boundary_restriction;
  add_boundary (b);
  refine_level (depth);
  reset (all, 0.);
  { if (((Tree *)grid)->dirty) update_cache_f(); };
 ; }
# 1746 "/home/e.sharaborin/basilisk/src/grid/tree.h"
struct _locate { double x, y, z; };

Point locate (struct _locate p)
{
  for (int l = (grid->depth); l >= 0; l--) {
    Point point = {0}; int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1751 "/home/e.sharaborin/basilisk/src/grid/tree.h"

    point.level = l;
    int n = 1 << point.level;
    point.i = (p.x - X0)/L0*n + 2;

    point.j = (p.y - Y0)/L0*n + 2;


    point.k = (p.z - Z0)/L0*n + 2;

    if (point.i >= 0 && point.i < n + 2*2

 && point.j >= 0 && point.j < n + 2*2


 && point.k >= 0 && point.k < n + 2*2

 ) {
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
 return point;
    }
    else
      break;
  }
  Point point = {0}; int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 1775 "/home/e.sharaborin/basilisk/src/grid/tree.h"

  point.level = -1;
  return point;
}




# 1782 "/home/e.sharaborin/basilisk/src/grid/tree.h" 3 4
_Bool 
# 1782 "/home/e.sharaborin/basilisk/src/grid/tree.h"
    tree_is_full()
{
  { if (((Tree *)grid)->dirty) update_cache_f(); };
  return (grid->tn == 1L << grid->maxdepth*3);
}
# 1 "grid/tree-common.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
# 1 "grid/multigrid-common.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
# 1 "grid/cartesian-common.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
# 1 "grid/events.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/events.h"







static void event_error (Event * ev, const char * s)
{
  fprintf (
# 10 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
          stderr
# 10 "/home/e.sharaborin/basilisk/src/grid/events.h"
              , "%s:%d: error: %s\n", ev->file, ev->line, s);
  exit (1);
}

static void init_event (Event * ev)
{
  if (ev->arrayi || ev->arrayt) {
    ev->i = ev->t = -1;
    if (ev->arrayi)
      ev->i = ev->arrayi[0];
    else
      ev->t = ev->arrayt[0];
    ev->a = 1;
    ev->expr[1] = 
# 23 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                 ((void *)0)
# 23 "/home/e.sharaborin/basilisk/src/grid/events.h"
                     ;
  }
  else {
    if (ev->nexpr > 0) {
      Expr init = 
# 27 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                 ((void *)0)
# 27 "/home/e.sharaborin/basilisk/src/grid/events.h"
                     , cond = 
# 27 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                              ((void *)0)
# 27 "/home/e.sharaborin/basilisk/src/grid/events.h"
                                  , inc = 
# 27 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                                          ((void *)0)
# 27 "/home/e.sharaborin/basilisk/src/grid/events.h"
                                              ;
      for (int j = 0; j < ev->nexpr; j++) {
 int i = -123456; double t = i;
 (* ev->expr[j]) (&i, &t, ev);
 if (i == -123456 && t == -123456) {

   if (cond)
     event_error (ev, "events can only use a single condition");
   cond = ev->expr[j];
 }
 else {

   int i1 = i; double t1 = t;
   (* ev->expr[j]) (&i1, &t1, ev);
   if (i1 == i && t1 == t) {


     if (init)
       event_error (ev, "events can only use a single initialisation");
     init = ev->expr[j];
   }
   else {

     if (inc)
       event_error (ev, "events can only use a single increment");
     inc = ev->expr[j];
   }
 }
      }
      ev->expr[0] = init;
      ev->expr[1] = cond;
      ev->expr[2] = inc;
      ev->nexpr = 0;
    }
    ev->i = ev->t = -1;
    if (ev->expr[0]) {
      (* ev->expr[0]) (&ev->i, &ev->t, ev);
      if (ev->i == 1234567890 || ev->t == 1234567890) {
 ev->i = 1234567890; ev->t = -1;
      }
    }
    else if (ev->expr[2]) {
      (* ev->expr[2]) (&ev->i, &ev->t, ev);
      if (ev->i != -1)
 ev->i = 0;
      if (ev->t != -1)
 ev->t = 0;
    }
  }
}

enum { event_done, event_alive, event_stop };

static int event_finished (Event * ev)
{
  ev->t = ev->i = -1;
  return event_done;
}

void event_register (Event event) {
  
# 87 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
 ((
# 87 "/home/e.sharaborin/basilisk/src/grid/events.h"
 Events
# 87 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 87 "/home/e.sharaborin/basilisk/src/grid/events.h"
 "Events"
# 87 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/events.h", 87, __extension__ __PRETTY_FUNCTION__))
# 87 "/home/e.sharaborin/basilisk/src/grid/events.h"
                ;
  
# 88 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
 ((
# 88 "/home/e.sharaborin/basilisk/src/grid/events.h"
 !event.last
# 88 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 88 "/home/e.sharaborin/basilisk/src/grid/events.h"
 "!event.last"
# 88 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/events.h", 88, __extension__ __PRETTY_FUNCTION__))
# 88 "/home/e.sharaborin/basilisk/src/grid/events.h"
                     ;
  int n = 0, parent = -1;
  for (Event * ev = Events; !ev->last; ev++) {
    if (!strcmp (event.name, ev->name)) {
      
# 92 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
     ((
# 92 "/home/e.sharaborin/basilisk/src/grid/events.h"
     parent < 0
# 92 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 92 "/home/e.sharaborin/basilisk/src/grid/events.h"
     "parent < 0"
# 92 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
     , "/home/e.sharaborin/basilisk/src/grid/events.h", 92, __extension__ __PRETTY_FUNCTION__))
# 92 "/home/e.sharaborin/basilisk/src/grid/events.h"
                        ;
      parent = n;
    }
    n++;
  }
  if (parent < 0) {
    Events = (Event *) realloc(Events,(n + 2)*sizeof(Event));
    Events[n] = event;
    Events[n].next = 
# 100 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                    ((void *)0)
# 100 "/home/e.sharaborin/basilisk/src/grid/events.h"
                        ;
    Events[n + 1].last = 
# 101 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                        1
# 101 "/home/e.sharaborin/basilisk/src/grid/events.h"
                            ;
    init_event (&Events[n]);
  }
  else {
    Event * ev = ((Event *) calloc(1,sizeof(Event)));
    *ev = Events[parent];
    Events[parent] = event;
    Events[parent].next = ev;
    init_event (&Events[parent]);
  }
}

static int event_cond (Event * ev, int i, double t)
{
  if (!ev->expr[1])
    return 
# 116 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
          1
# 116 "/home/e.sharaborin/basilisk/src/grid/events.h"
              ;
  return (* ev->expr[1]) (&i, &t, ev);
}
# 131 "/home/e.sharaborin/basilisk/src/grid/events.h"
static int event_do (Event * ev, 
# 131 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                                _Bool 
# 131 "/home/e.sharaborin/basilisk/src/grid/events.h"
                                     action)
{
  if ((iter > ev->i && t > ev->t) || !event_cond (ev, iter, t))
    return event_finished (ev);
  if (iter == ev->i || fabs (t - ev->t) <= 1e-9) {
    if (action) {
      
# 137 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
     _Bool 
# 137 "/home/e.sharaborin/basilisk/src/grid/events.h"
          finished = 
# 137 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                     0
# 137 "/home/e.sharaborin/basilisk/src/grid/events.h"
                          ;
      for (Event * e = ev; e; e = e->next) {



 if ((* e->action) (iter, t, e))
   finished = 
# 143 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
             1
# 143 "/home/e.sharaborin/basilisk/src/grid/events.h"
                 ;
      }
      if (finished) {
 event_finished (ev);
 return event_stop;
      }
    }
    if (ev->arrayi) {
      ev->i = ev->arrayi[ev->a++];
      if (ev->i < 0)
 return event_finished (ev);
    }
    if (ev->arrayt) {
      ev->t = ev->arrayt[ev->a++];
      if (ev->t < 0)
 return event_finished (ev);
    }
    else if (ev->expr[2]) {
      int i0 = ev->i;
      (* ev->expr[2]) (&ev->i, &ev->t, ev);
      if (i0 == -1 && ev->i != i0)
 ev->i += iter + 1;
      if (!event_cond (ev, iter + 1, ev->t))
 return event_finished (ev);
    }
    else if (ev->expr[0] && !ev->expr[1])
      return event_finished (ev);
  }
  return event_alive;
}

static void end_event_do (
# 174 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
                         _Bool 
# 174 "/home/e.sharaborin/basilisk/src/grid/events.h"
                              action)
{




  for (Event * ev = Events; !ev->last; ev++)
    if (ev->i == 1234567890 && action)
      for (Event * e = ev; e; e = e->next) {



 e->action (iter, t, e);
      }
}

int events (
# 190 "/home/e.sharaborin/basilisk/src/grid/events.h" 3 4
           _Bool 
# 190 "/home/e.sharaborin/basilisk/src/grid/events.h"
                action)
{





  if (iter == 0)
    for (Event * ev = Events; !ev->last; ev++)
      init_event (ev);

  int cond = 0, cond1 = 0;
  inext = 1234567890; tnext = ((double)1e30);
  for (Event * ev = Events; !ev->last && !cond; ev++)
    if (ev->i != 1234567890 &&
 (ev->expr[1] || (ev->expr[0] && !ev->expr[1] && !ev->expr[2]) || ev->arrayi || ev->arrayt))
      cond = 1;
  for (Event * ev = Events; !ev->last; ev++) {
    int status = event_do (ev, action);
    if (status == event_stop) {
      end_event_do (action);
      return 0;
    }
    if (status == event_alive && ev->i != 1234567890 &&
 (ev->expr[1] || (ev->expr[0] && !ev->expr[1] && !ev->expr[2]) || ev->arrayi || ev->arrayt))
      cond1 = 1;
    if (ev->t > t && ev->t < tnext)
      tnext = ev->t;
    if (ev->i > iter && ev->i < inext)
      inext = ev->i;
  }
  if ((!cond || cond1) && (tnext != ((double)1e30) || inext != 1234567890)) {
    inext = iter + 1;
    return 1;
  }
  end_event_do (action);
  return 0;
}

void event (const char * name)
{
  for (Event * ev = Events; !ev->last; ev++)
    if (!strcmp (ev->name, name))
      for (Event * e = ev; e; e = e->next) {



 (* e->action) (0, 0, e);
      }
}

double dtnext (double dt)
{
  if (tnext != ((double)1e30) && tnext > t) {
    unsigned int n = (tnext - t)/dt;

    if (n == 0)
      dt = tnext - t;
    else {
      double dt1 = (tnext - t)/n;
      if (dt1 > dt + 1e-9)
 dt = (tnext - t)/(n + 1);
      else if (dt1 < dt)
 dt = dt1;
      tnext = t + dt;
    }
  }
  else
    tnext = t + dt;
  return dt;
}
# 2 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

void (* debug) (Point);
# 32 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
# 1 "grid/fpe.h"
# 1 "/home/e.sharaborin/basilisk/src/grid/fpe.h"


# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4








# 8 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 3 4
typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 63 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 189 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));






extern int sighold (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigrelse (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigignore (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) __attribute__ ((__nothrow__ , __leaf__));
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));





# 4 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 277 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) ;






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1006 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1027 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1092 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1110 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1167 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;








# 5 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 2


# 6 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
static int gdb()
{
  if (last_point.level >= 0) {
    debug (last_point);
    fputc ('\n', 
# 10 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
                stderr
# 10 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                    );
    fflush (
# 11 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
           stderr
# 11 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
               );
  }
  char command[80];
  sprintf (command, "exec xterm -e 'gdb -p %d' & xterm -e 'gnuplot plot -'",
    getpid());
  return system (command);
}

static void caught_abort (int sig)
{
  fprintf (
# 21 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
          stderr
# 21 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
              , "Caught signal %d (Aborted)\n", sig);
  gdb();
}

static void caught_fpe (int sig)
{
  fprintf (
# 27 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
          stderr
# 27 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
              , "Caught signal %d (Floating Point Exception)\n", sig);
  gdb();
  exit (1);
}

static void caught_segfault (int sig)
{
  fprintf (
# 34 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
          stderr
# 34 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
              , "Caught signal %d (Segmentation Fault)\n", sig);
  gdb();
  exit (2);
}

void catch_fpe (void)
{
  struct sigaction act;
  act.
# 42 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
     __sigaction_handler.sa_handler 
# 42 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                = caught_fpe;
  sigemptyset (&act.sa_mask);
  act.sa_flags = 0;
  last_point.level = -1;
  sigaction (8, &act, 
# 46 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
                     ((void *)0)
# 46 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                         );
  act.
# 47 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
     __sigaction_handler.sa_handler 
# 47 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                = caught_segfault;
  sigaction (11, &act, 
# 48 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
                      ((void *)0)
# 48 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                          );
  act.
# 49 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
     __sigaction_handler.sa_handler 
# 49 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                = caught_abort;
  act.sa_flags = 
# 50 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
                0x80000000
# 50 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                            ;
  sigaction (6, &act, 
# 51 "/home/e.sharaborin/basilisk/src/grid/fpe.h" 3 4
                     ((void *)0)
# 51 "/home/e.sharaborin/basilisk/src/grid/fpe.h"
                         );
}
# 35 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"



static void init_block_scalar (scalar sb, const char * name, const char * ext,
          int n, int block)
{
  char bname[strlen(name) + strlen(ext) + 10];
  if (n == 0) {
    sprintf (bname, "%s%s", name, ext);
    init_scalar (sb, bname);
    _attribute[sb.i].block = block;
  }
  else {
    sprintf (bname, "%s%d%s", name, n, ext);
    init_scalar (sb, bname);
    _attribute[sb.i].block = - n;
  }
  all = list_append (all, sb);
}

scalar new_block_scalar (const char * name, const char * ext, int block)
{
  int nvar = datasize/sizeof(double);

  scalar s = {0};
  while (s.i < nvar) {
    int n = 0;
    scalar sb = s;
    while (sb.i < nvar && n < block && _attribute[sb.i].freed)
      n++, sb.i++;
    if (n >= block) {
      for (sb.i = s.i, n = 0; n < block; n++, sb.i++)
 init_block_scalar (sb, name, ext, n, block);
      ;
      return s;
    }
    s.i = sb.i + 1;
  }


  s = (scalar){nvar};
  
# 76 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
 ((
# 76 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 nvar + block <= 65536
# 76 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 76 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 "nvar + block <= _NVARMAX"
# 76 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h", 76, __extension__ __PRETTY_FUNCTION__))
# 76 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                  ;
  _attribute = (_Attributes *) realloc(_attribute,(nvar + block)*sizeof(_Attributes));
  memset (&_attribute[nvar], 0, block*sizeof (_Attributes));
  for (int n = 0; n < block; n++, nvar++) {
    scalar sb = (scalar){nvar};
    init_block_scalar (sb, name, ext, n, block);
  }

  realloc_scalar (block*sizeof(double));
  ;
  return s;
}

scalar new_scalar (const char * name)
{
  return new_block_scalar (name, "", 1);
}

scalar new_vertex_scalar (const char * name)
{
  return init_vertex_scalar (new_scalar (name), name);
}

static vector alloc_block_vector (const char * name, int block)
{
  vector v;
  struct { char * x, * y, * z; } ext = {".x", ".y", ".z"};
  {
# 103 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    v.x = new_block_scalar (name, ext.x, block);
# 103 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    v.y = new_block_scalar (name, ext.y, block);
# 103 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    v.z = new_block_scalar (name, ext.z, block);}
  return v;
}

vector new_vector (const char * name)
{
  vector v = alloc_block_vector (name, 1);
  init_vector (v, 
# 111 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 111 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                     );
  return v;
}

vector new_face_vector (const char * name)
{
  vector v = alloc_block_vector (name, 1);
  init_face_vector (v, 
# 118 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                      ((void *)0)
# 118 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                          );
  return v;
}

vector new_block_vector (const char * name, int block)
{
  vector v = alloc_block_vector (name, block);
  for (int i = 0; i < block; i++) {
    vector vb;
    {
# 127 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      vb.x.i = v.x.i + i;
# 127 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      vb.y.i = v.y.i + i;
# 127 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      vb.z.i = v.z.i + i;}
    init_vector (vb, 
# 129 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                    ((void *)0)
# 129 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                        );
    {
# 130 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      _attribute[vb.x.i].block = - i;
# 130 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      _attribute[vb.y.i].block = - i;
# 130 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      _attribute[vb.z.i].block = - i;}
  }
  {
# 133 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[v.x.i].block = block;
# 133 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[v.y.i].block = block;
# 133 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[v.z.i].block = block;}
  return v;
}

vector new_block_face_vector (const char * name, int block)
{
  vector v = alloc_block_vector (name, block);
  for (int i = 0; i < block; i++) {
    vector vb;
    {
# 143 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      vb.x.i = v.x.i + i;
# 143 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      vb.y.i = v.y.i + i;
# 143 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      vb.z.i = v.z.i + i;}
    init_face_vector (vb, 
# 145 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                         ((void *)0)
# 145 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                             );
    {
# 146 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      _attribute[vb.x.i].block = - i;
# 146 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      _attribute[vb.y.i].block = - i;
# 146 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      _attribute[vb.z.i].block = - i;}
  }
  {
# 149 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[v.x.i].block = block;
# 149 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[v.y.i].block = block;
# 149 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[v.z.i].block = block;}
  return v;
}

tensor new_tensor (const char * name)
{
  char cname[strlen(name) + 3];
  struct { char * x, * y, * z; } ext = {"%s.x", "%s.y", "%s.z"};
  tensor t;
  {
# 159 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    sprintf (cname, ext.x, name);
    t.x = new_vector (cname);
  }
# 159 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    sprintf (cname, ext.y, name);
    t.y = new_vector (cname);
  }
# 159 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    sprintf (cname, ext.z, name);
    t.z = new_vector (cname);
  }}
  init_tensor (t, 
# 163 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 163 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                     );
  return t;
}

tensor new_symmetric_tensor (const char * name)
{
  char cname[strlen(name) + 5];
  struct { char * x, * y, * z; } ext = {"%s.x.x", "%s.y.y", "%s.z.z"};
  tensor t;
  {
# 172 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    sprintf (cname, ext.x, name);
    t.x.x = new_scalar(cname);
  }
# 172 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    sprintf (cname, ext.y, name);
    t.y.y = new_scalar(cname);
  }
# 172 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    sprintf (cname, ext.z, name);
    t.z.z = new_scalar(cname);
  }}

    sprintf (cname, "%s.x.y", name);
    t.x.y = new_scalar(cname);
    t.y.x = t.x.y;


    sprintf (cname, "%s.x.z", name);
    t.x.z = new_scalar(cname);
    t.z.x = t.x.z;
    sprintf (cname, "%s.y.z", name);
    t.y.z = new_scalar(cname);
    t.z.y = t.y.z;




  init_tensor (t, 
# 192 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 192 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                     );
  return t;
}

static int nconst = 0;

void init_const_scalar (scalar s, const char * name, double val)
{
  if (s.i - 65536 >= nconst) {
    nconst = s.i - 65536 + 1;
    _constant = (double *) realloc(_constant,(nconst)*sizeof(double));
  }
  _constant[s.i - 65536] = val;
}

scalar new_const_scalar (const char * name, int i, double val)
{
  scalar s = (scalar){i + 65536};
  init_const_scalar (s, name, val);
  return s;
}

void init_const_vector (vector v, const char * name, double * val)
{
  {
# 216 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    init_const_scalar (v.x, name, *val++);
# 216 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    init_const_scalar (v.y, name, *val++);
# 216 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    init_const_scalar (v.z, name, *val++);}
}

vector new_const_vector (const char * name, int i, double * val)
{
  vector v;
  {
# 223 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    v.x.i = 65536 + i++;
# 223 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    v.y.i = 65536 + i++;
# 223 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    v.z.i = 65536 + i++;}
  init_const_vector (v, name, val);
  return v;
}

void scalar_clone (scalar a, scalar b)
{
  char * name = _attribute[a.i].name;
  double (** boundary) (Point, Point, scalar, void *) = _attribute[a.i].boundary;
  double (** boundary_homogeneous) (Point, Point, scalar, void *) =
    _attribute[a.i].boundary_homogeneous;
  
# 235 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
 ((
# 235 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 _attribute[b.i].block > 0 && _attribute[a.i].block == _attribute[b.i].block
# 235 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 235 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 "_attribute[b.i].block > 0 && _attribute[a.i].block == _attribute[b.i].block"
# 235 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h", 235, __extension__ __PRETTY_FUNCTION__))
# 235 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                                     ;
  _attribute[a.i] = _attribute[b.i];
  _attribute[a.i].name = name;
  _attribute[a.i].boundary = boundary;
  _attribute[a.i].boundary_homogeneous = boundary_homogeneous;
  for (int i = 0; i < nboundary; i++) {
    _attribute[a.i].boundary[i] = _attribute[b.i].boundary[i];
    _attribute[a.i].boundary_homogeneous[i] = _attribute[b.i].boundary_homogeneous[i];
  }
}

scalar * list_clone (scalar * l)
{
  scalar * list = 
# 248 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 248 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                     ;
  int nvar = datasize/sizeof(double), map[nvar];
  for (int i = 0; i < nvar; i++)
    map[i] = -1;
  if (l) for (scalar s = *l, *_i27 = l; ((scalar *)&s)->i >= 0; s = *++_i27) {
    scalar c = _attribute[s.i].block > 1 ? new_block_scalar("c", "", _attribute[s.i].block) :
      new_scalar("c");
    scalar_clone (c, s);
    map[s.i] = c.i;
    list = list_append (list, c);
  }
  if (list) for (scalar s = *list, *_i28 = list; ((scalar *)&s)->i >= 0; s = *++_i28)
    {
# 260 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      if (_attribute[s.i].v.x.i >= 0 && map[_attribute[s.i].v.x.i] >= 0)
 _attribute[s.i].v.x.i = map[_attribute[s.i].v.x.i];
# 260 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      if (_attribute[s.i].v.y.i >= 0 && map[_attribute[s.i].v.y.i] >= 0)
 _attribute[s.i].v.y.i = map[_attribute[s.i].v.y.i];
# 260 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      if (_attribute[s.i].v.z.i >= 0 && map[_attribute[s.i].v.z.i] >= 0)
 _attribute[s.i].v.z.i = map[_attribute[s.i].v.z.i];}
  return list;
}

void delete (scalar * list)
{
  if (all == 
# 268 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
            ((void *)0)
# 268 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                )
    return;

  if (list) for (scalar f = *list, *_i29 = list; ((scalar *)&f)->i >= 0; f = *++_i29) {
    for (int i = 0; i < _attribute[f.i].block; i++) {
      scalar fb = {f.i + i};
      if (_attribute[f.i].delete)
 _attribute[f.i].delete (fb);
      free(_attribute[fb.i].name); _attribute[fb.i].name = 
# 276 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                       ((void *)0)
# 276 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                                           ;
      free(_attribute[fb.i].boundary); _attribute[fb.i].boundary = 
# 277 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                               ((void *)0)
# 277 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                                                   ;
      free(_attribute[fb.i].boundary_homogeneous); _attribute[fb.i].boundary_homogeneous = 
# 278 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                                                       ((void *)0)
# 278 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                                                                           ;
      _attribute[fb.i].freed = 
# 279 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                              1
# 279 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                  ;
    }
  }

  if (list == all) {
    all[0].i = -1;
    return;
  }

  ;
  if (list) for (scalar f = *list, *_i30 = list; ((scalar *)&f)->i >= 0; f = *++_i30) {
    if (_attribute[f.i].block > 0) {
      scalar * s = all;
      for (; s->i >= 0 && s->i != f.i; s++);
      if (s->i == f.i) {
 for (; s[_attribute[f.i].block].i >= 0; s++)
   s[0] = s[_attribute[f.i].block];
 s->i = -1;
      }
    }
  }
}

void free_solver()
{
  if (free_solver_funcs) {
    free_solver_func * a = (free_solver_func *) free_solver_funcs->p;
    for (int i = 0; i < free_solver_funcs->len/sizeof(free_solver_func); i++)
      a[i] ();
    array_free (free_solver_funcs);
  }

  delete (all);
  free(all); all = 
# 312 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                               ((void *)0)
# 312 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                   ;
  for (Event * ev = Events; !ev->last; ev++) {
    Event * e = ev->next;
    while (e) {
      Event * next = e->next;
      free(e);
      e = next;
    }
  }

  free(Events); Events = 
# 322 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                     ((void *)0)
# 322 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                         ;
  free(_attribute); _attribute = 
# 323 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                             ((void *)0)
# 323 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                 ;
  free(_constant); _constant = 
# 324 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                           ((void *)0)
# 324 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                               ;
  free_grid();
  qpclose_all();
# 336 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
}



void (* boundary_level) (scalar *, int l);
void (* boundary_flux) (vector *);


void boundary (scalar * list)
{ ;
  if (list == 
# 346 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
             ((void *)0)
# 346 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                 )
    { ; ; return; }
  vector * listf = 
# 348 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                  ((void *)0)
# 348 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                      ;
  if (list) for (scalar s = *list, *_i31 = list; ((scalar *)&s)->i >= 0; s = *++_i31)
    if (!((s).i >= 65536) && _attribute[s.i].block > 0 && _attribute[s.i].face)
      listf = vectors_add (listf, _attribute[s.i].v);
  if (listf) {
    boundary_flux (listf);
    free(listf);
  }
  boundary_level (list, -1);
 ; }

void cartesian_boundary_level (scalar * list, int l)
{
  { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, l); };
}

void cartesian_boundary_flux (vector * list)
{

}

static double symmetry (Point point, Point neighbor, scalar s, void * data)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 370 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

  return ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)];
}

static double antisymmetry (Point point, Point neighbor, scalar s, void * data)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 375 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

  return -((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)];
}

double (* default_scalar_bc[]) (Point, Point, scalar, void *) = {
  symmetry, symmetry, symmetry, symmetry, symmetry, symmetry
};

scalar cartesian_init_scalar (scalar s, const char * name)
{

  char * pname;
  if (name) {
    free(_attribute[s.i].name);
    pname = strdup(name);
  }
  else
    pname = _attribute[s.i].name;
  free(_attribute[s.i].boundary);
  free(_attribute[s.i].boundary_homogeneous);

  _attribute[s.i] = (const _Attributes){0};
  _attribute[s.i].block = 1;
  _attribute[s.i].name = pname;

  _attribute[s.i].boundary = (double (**)(Point, Point, scalar, void *))
    malloc(nboundary*sizeof (void (*)()));
  _attribute[s.i].boundary_homogeneous = (double (**)(Point, Point, scalar, void *))
    malloc(nboundary*sizeof (void (*)()));
  for (int b = 0; b < nboundary; b++)
    _attribute[s.i].boundary[b] = _attribute[s.i].boundary_homogeneous[b] =
      b < 2*3 ? default_scalar_bc[b] : symmetry;
  _attribute[s.i].gradient = 
# 407 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                            ((void *)0)
# 407 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                ;
  {
# 408 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[s.i].d.x = 0;
    _attribute[s.i].v.x.i = -1;
  }
# 408 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[s.i].d.y = 0;
    _attribute[s.i].v.y.i = -1;
  }
# 408 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[s.i].d.z = 0;
    _attribute[s.i].v.z.i = -1;
  }}
  _attribute[s.i].face = 
# 412 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                        0
# 412 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                             ;
  return s;
}

scalar cartesian_init_vertex_scalar (scalar s, const char * name)
{
  {
# 418 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[s.i].d.x = -1;
# 418 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[s.i].d.y = -1;
# 418 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    _attribute[s.i].d.z = -1;}
  for (int d = 0; d < nboundary; d++)
    _attribute[s.i].boundary[d] = _attribute[s.i].boundary_homogeneous[d] = 
# 421 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                                           ((void *)0)
# 421 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                               ;
  return s;
}

double (* default_vector_bc[]) (Point, Point, scalar, void *) = {
  antisymmetry, antisymmetry,
  antisymmetry, antisymmetry,
  antisymmetry, antisymmetry
};

vector cartesian_init_vector (vector v, const char * name)
{
  struct { char * x, * y, * z; } ext = {".x", ".y", ".z"};
  {
# 434 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      sprintf (cname, "%s%s", name, ext.x);
      init_scalar (v.x, cname);
    }
    else
      init_scalar (v.x, 
# 441 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 441 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                           );
    _attribute[v.x.i].v = v;
  }
# 434 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      sprintf (cname, "%s%s", name, ext.y);
      init_scalar (v.y, cname);
    }
    else
      init_scalar (v.y, 
# 441 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 441 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                           );
    _attribute[v.y.i].v = v;
  }
# 434 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      sprintf (cname, "%s%s", name, ext.z);
      init_scalar (v.z, cname);
    }
    else
      init_scalar (v.z, 
# 441 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 441 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                           );
    _attribute[v.z.i].v = v;
  }}

  for (int d = 0; d < nboundary; d++)
    _attribute[v.x.i].boundary[d] = _attribute[v.x.i].boundary_homogeneous[d] =
      d < 2*3 ? default_vector_bc[d] : antisymmetry;
  return v;
}

vector cartesian_init_face_vector (vector v, const char * name)
{
  v = cartesian_init_vector (v, name);
  {
# 454 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[v.x.i].d.x = -1;
    _attribute[v.x.i].face = 
# 456 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                            1
# 456 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                ;
  }
# 454 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[v.y.i].d.y = -1;
    _attribute[v.y.i].face = 
# 456 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                            1
# 456 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                ;
  }
# 454 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[v.z.i].d.z = -1;
    _attribute[v.z.i].face = 
# 456 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                            1
# 456 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                ;
  }}
  for (int d = 0; d < nboundary; d++)
    _attribute[v.x.i].boundary[d] = _attribute[v.x.i].boundary_homogeneous[d] = 
# 459 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                                               ((void *)0)
# 459 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                                   ;
  return v;
}

tensor cartesian_init_tensor (tensor t, const char * name)
{
  struct { char * x, * y, * z; } ext = {".x", ".y", ".z"};
  {
# 466 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      sprintf (cname, "%s%s", name, ext.x);
      init_vector (t.x, cname);
    }
    else
      init_vector (t.x, 
# 473 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 473 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                           );
  }
# 466 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      sprintf (cname, "%s%s", name, ext.y);
      init_vector (t.y, cname);
    }
    else
      init_vector (t.y, 
# 473 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 473 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                           );
  }
# 466 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      sprintf (cname, "%s%s", name, ext.z);
      init_vector (t.z, cname);
    }
    else
      init_vector (t.z, 
# 473 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 473 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                           );
  }}
# 490 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
    
# 490 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
   ((0) ? (void) (0) : __assert_fail (
# 490 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
   "false"
# 490 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
   , "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h", 490, __extension__ __PRETTY_FUNCTION__))
# 490 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                 ;

  return t;
}

struct OutputCells {
  FILE * fp;
  coord c;
  double size;
};

void output_cells (struct OutputCells p)
{
  if (!p.fp) p.fp = 
# 503 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                   stdout
# 503 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                       ;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 504 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 {
    
# 505 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
   _Bool 
# 505 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
        inside = 
# 505 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                 1
# 505 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                     ;
    coord o = {x,y,z};
    {
# 507 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      if (inside && p.size > 0. &&
   (o.x > p.c.x + p.size || o.x < p.c.x - p.size))
 inside = 
# 510 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
         0
# 510 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
              ;
# 507 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      if (inside && p.size > 0. &&
   (o.y > p.c.y + p.size || o.y < p.c.y - p.size))
 inside = 
# 510 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
         0
# 510 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
              ;
# 507 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

      if (inside && p.size > 0. &&
   (o.z > p.c.z + p.size || o.z < p.c.z - p.size))
 inside = 
# 510 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
         0
# 510 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
              ;}
    if (inside) {
      Delta /= 2.;
# 523 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
      for (int i = -1; i <= 1; i += 2) {
 fprintf (p.fp, "%g %g %g\n%g %g %g\n%g %g %g\n%g %g %g\n%g %g %g\n\n",
   x - Delta, y - Delta, z + i*Delta,
   x - Delta, y + Delta, z + i*Delta,
   x + Delta, y + Delta, z + i*Delta,
   x + Delta, y - Delta, z + i*Delta,
   x - Delta, y - Delta, z + i*Delta);
 for (int j = -1; j <= 1; j += 2)
   fprintf (p.fp, "%g %g %g\n%g %g %g\n\n",
     x + i*Delta, y + j*Delta, z - Delta,
     x + i*Delta, y + j*Delta, z + Delta);
      }

    }
  } } } } }; }
  fflush (p.fp);
}
# 548 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
static char * replace_ (const char * vname)
{
  char * name = strdup(vname), * c = name;
  while (*c != '\0') {
    if (*c == '.')
      *c = '_';
    c++;
  }
  return name;
}

static void debug_plot (FILE * fp, const char * name, const char * cells,
   const char * stencil)
{
  char * vname = replace_ (name);
  fprintf (fp,
    "  load 'debug.plot'\n"
    "  v=%s\n"







    "  splot '%s' w l lc 0, "
    "'%s' u 1+4*v:2+4*v:3+4*v:4+4*v w labels tc lt 1"
           " title columnhead(4+4*v)",

    vname, cells, stencil);
  free(vname);
}

void cartesian_debug (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 582 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

  char name[80] = "cells";
  if (0 > 0)
    sprintf (name, "cells-%d", 0);
  FILE * fp = fopen (name, "w");
  output_cells ((struct OutputCells){fp, (coord){x,y,z}, 4.*Delta});
  fclose (fp);

  char stencil[80] = "stencil";
  if (0 > 0)
    sprintf (stencil, "stencil-%d", 0);
  fp = fopen (stencil, "w");
  if (all) for (scalar v = *all, *_i32 = all; ((scalar *)&v)->i >= 0; v = *++_i32)





    fprintf (fp, "x y z %s ", _attribute[v.i].name);

  fputc ('\n', fp);
# 629 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
    for (int k = -2; k <= 2; k++)
      for (int l = -2; l <= 2; l++)
 for (int m = -2; m <= 2; m++) {
   if (all) for (scalar v = *all, *_i33 = all; ((scalar *)&v)->i >= 0; v = *++_i33) {
     fprintf (fp, "%g %g %g ",
       x + k*Delta + _attribute[v.i].d.x*Delta/2.,
       y + l*Delta + _attribute[v.i].d.y*Delta/2.,
       z + m*Delta + _attribute[v.i].d.z*Delta/2.);
     if ((point.i+k >= 0 && point.i+k < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+k] && point.j+l >= 0 && point.j+l < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+k][point.j+l] && point.k+m >= 0 && point.k+m < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+k][point.j+l] [point.k+m]))
       fprintf (fp, "%g ", ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+k][point.j+l] [point.k+m]) + sizeof(Cell)))[(v.i)]);
     else
       fputs ("n/a ", fp);
   }
   fputc ('\n', fp);
 }

  fclose (fp);

  fp = fopen ("debug.plot", "w");
  fprintf (fp,
    "set term x11\n"
    "set size ratio -1\n"
    "set key outside\n");
  if (all) for (scalar s = *all, *_i34 = all; ((scalar *)&s)->i >= 0; s = *++_i34) {
    char * name = replace_ (_attribute[s.i].name);
    fprintf (fp, "%s = %d\n", name, s.i);
    free(name);
  }
  fclose (fp);

  fprintf (
# 659 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
          stderr
# 659 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
              , "Last point stencils can be displayed using (in gnuplot)\n");
  debug_plot (
# 660 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
             stderr
# 660 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                 , _attribute[0].name, name, stencil);
  fflush (
# 661 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
         stderr
# 661 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
             );

  fp = fopen ("plot", "w");
  debug_plot (fp, _attribute[0].name, name, stencil);
  fclose (fp);
}

void cartesian_methods()
{
  init_scalar = cartesian_init_scalar;
  init_vertex_scalar = cartesian_init_vertex_scalar;
  init_vector = cartesian_init_vector;
  init_tensor = cartesian_init_tensor;
  init_face_vector = cartesian_init_face_vector;
  boundary_level = cartesian_boundary_level;
  boundary_flux = cartesian_boundary_flux;
  debug = cartesian_debug;
}

struct _interpolate {
  scalar v;
  double x, y, z;
};

static double interpolate_linear (Point point, struct _interpolate p)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 686 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

  scalar v = p.v;
# 703 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
  x = (p.x - x)/Delta - _attribute[v.i].d.x/2.;
  y = (p.y - y)/Delta - _attribute[v.i].d.y/2.;
  z = (p.z - z)/Delta - _attribute[v.i].d.z/2.;
  int i = ((x) > 0 ? 1 : -1), j = ((y) > 0 ? 1 : -1), k = ((z) > 0 ? 1 : -1);
  x = fabs(x); y = fabs(y); z = fabs(z);

  return (((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.i)]*(1. - x) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.i)]*x)*(1. - y) +
    (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0]) + sizeof(Cell)))[(v.i)]*(1. - x) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(v.i)]*x)*y)*(1. - z) +
   ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+k]) + sizeof(Cell)))[(v.i)]*(1. - x) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+k]) + sizeof(Cell)))[(v.i)]*x)*(1. - y) +
    (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+k]) + sizeof(Cell)))[(v.i)]*(1. - x) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]) + sizeof(Cell)))[(v.i)]*x)*y)*z);

}


double interpolate (struct _interpolate p)
{ ;
  Point point = locate ((struct _locate){p.x, p.y, p.z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 719 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

  if (point.level < 0)
    { double _ret = ((double)1e30); ; return _ret; }
  { double _ret = interpolate_linear (point, p); ; return _ret; }
 ; }


void interpolate_array (scalar * list, coord * a, int n, double * v, 
# 726 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                                    _Bool 
# 726 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                         linear)
{ ;
  int j = 0;
  for (int i = 0; i < n; i++) {
    Point point = locate ((struct _locate){a[i].x, a[i].y, a[i].z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 730 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

    if (point.level >= 0) {
      if (list) for (scalar s = *list, *_i35 = list; ((scalar *)&s)->i >= 0; s = *++_i35)
 v[j++] = !linear ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] :
   interpolate_linear (point,
         (struct _interpolate){s, a[i].x, a[i].y, a[i].z});
    }
    else
      if (list) for (scalar s = *list, *_i36 = list; ((scalar *)&s)->i >= 0; s = *++_i36)
 v[j++] = ((double)1e30);
  }
# 749 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
 ; }



typedef int bid;

bid new_bid()
{
  int b = nboundary++;
  if (all) for (scalar s = *all, *_i37 = all; ((scalar *)&s)->i >= 0; s = *++_i37) {
    _attribute[s.i].boundary = (double (**)(Point, Point, scalar, void *))
      realloc(_attribute[s.i].boundary,nboundary*sizeof (void (*)()));
    _attribute[s.i].boundary_homogeneous = (double (**)(Point, Point, scalar, void *))
      realloc(_attribute[s.i].boundary_homogeneous,nboundary*sizeof (void (*)()));
  }
  if (all) for (scalar s = *all, *_i38 = all; ((scalar *)&s)->i >= 0; s = *++_i38) {
    if (_attribute[s.i].v.x.i < 0)
      _attribute[s.i].boundary[b] = _attribute[s.i].boundary_homogeneous[b] = symmetry;
    else if (_attribute[s.i].v.x.i == s.i) {
      vector v = _attribute[s.i].v;
      {
# 769 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

 _attribute[v.y.i].boundary[b] = _attribute[v.y.i].boundary_homogeneous[b] = symmetry;
# 769 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

 _attribute[v.z.i].boundary[b] = _attribute[v.z.i].boundary_homogeneous[b] = symmetry;
# 769 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

 _attribute[v.x.i].boundary[b] = _attribute[v.x.i].boundary_homogeneous[b] = symmetry;}
      _attribute[v.x.i].boundary[b] = _attribute[v.x.i].boundary_homogeneous[b] =
 _attribute[v.x.i].face ? 
# 772 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                         ((void *)0) 
# 772 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                              : antisymmetry;
    }
  }
  return b;
}



static double periodic_bc (Point point, Point neighbor, scalar s, void * data)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 781 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"

  return ((double)1e30);
}

static void periodic_boundary (int d)
{

  if (all) for (scalar s = *all, *_i39 = all; ((scalar *)&s)->i >= 0; s = *++_i39)
    _attribute[s.i].boundary[d] = _attribute[s.i].boundary_homogeneous[d] = periodic_bc;

  if (all) for (scalar s = *all, *_i40 = all; ((scalar *)&s)->i >= 0; s = *++_i40)
    if (_attribute[s.i].face) {
      vector v = _attribute[s.i].v;
      _attribute[v.x.i].boundary[d] = _attribute[v.x.i].boundary_homogeneous[d] = 
# 794 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                 ((void *)0)
# 794 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                                                                                     ;
    }

  default_scalar_bc[d] = periodic_bc;
  default_vector_bc[d] = periodic_bc;
}

void periodic (int dir)
{





    
# 808 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
   ((
# 808 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
   dir <= back
# 808 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
   ) ? (void) (0) : __assert_fail (
# 808 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
   "dir <= back"
# 808 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
   , "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h", 808, __extension__ __PRETTY_FUNCTION__))
# 808 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                       ;


  int c = dir/2;
  periodic_boundary (2*c);
  periodic_boundary (2*c + 1);
  (&Period.x)[c] = 
# 814 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h" 3 4
                  1
# 814 "/home/e.sharaborin/basilisk/src/grid/cartesian-common.h"
                      ;
}
# 4 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
# 24 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
void (* restriction) (scalar *);

static inline void restriction_average (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 27 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  double sum = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sum/(1 << 3);
}

static inline void restriction_volume_average (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 35 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

if (!((cm).i >= 65536)) {
# 35 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  double sum = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sum/(1 << 3)/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-30);
 }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 35 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  double sum = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    sum += _const_cm*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sum/(1 << 3)/(_const_cm + 1e-30);
 }}

static inline void face_average (Point point, vector v)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 43 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  {
# 44 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 {







      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(v.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(v.x.i)] +
        ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(v.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(v.x.i)])/4.;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(v.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(v.x.i)] +
  ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(v.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(v.x.i)])/4.;

  }
# 44 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 {







      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(v.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(v.y.i)] +
        ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(v.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(v.y.i)])/4.;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2][2*point.k-2 +0]) + sizeof(Cell)))[(v.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2][2*point.k-2 +1]) + sizeof(Cell)))[(v.y.i)] +
  ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2][2*point.k-2 +0]) + sizeof(Cell)))[(v.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2][2*point.k-2 +1]) + sizeof(Cell)))[(v.y.i)])/4.;

  }
# 44 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 {







      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(v.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(v.z.i)] +
        ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(v.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(v.z.i)])/4.;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +2]) + sizeof(Cell)))[(v.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +2]) + sizeof(Cell)))[(v.z.i)] +
  ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +2]) + sizeof(Cell)))[(v.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +2]) + sizeof(Cell)))[(v.z.i)])/4.;

  }}
}

static inline void restriction_face (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 61 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  face_average (point, _attribute[s.i].v);
}

static inline void restriction_vertex (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 66 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  for (int i = 0; i <= 1; i++) {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(s.i)];

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] = ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +2][2*point.k-2 +0]) + sizeof(Cell)))[(s.i)];


    for (int j = 0; j <= 1; j++)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+1]) + sizeof(Cell)))[(s.i)] = ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +2*j][2*point.k-2 +2]) + sizeof(Cell)))[(s.i)];

  }
}

static inline void no_restriction (Point point, scalar s) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 78 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
}

static inline void no_data (Point point, scalar s) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 81 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = ((double)1e30); } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}

void wavelet (scalar s, scalar w)
{
  restriction (((scalar []){s,{-1}}));
  for (int l = (grid->depth) - 1; l >= 0; l--) {
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 90 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 {
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
      _attribute[s.i].prolongation (point, s);
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
        double sp = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)];
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.i)];

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.i)] -= sp;
      } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
    } } } } } }; }}; }
    boundary_level (((scalar []){w,{-1}}), l + 1);
  }

   { { if (0 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[0]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = 0; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 104 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } }; }}; }
  boundary_level (((scalar []){w,{-1}}), 0);
}

void inverse_wavelet (scalar s, scalar w)
{
   { { if (0 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[0]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = 0; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 111 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.i)]; } } } }; }}; }
  boundary_level (((scalar []){s,{-1}}), 0);
  for (int l = 0; l <= (grid->depth) - 1; l++) {
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 115 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 {
      _attribute[s.i].prolongation (point, s);
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
    } } } } } }; }}; }
    boundary_level (((scalar []){s,{-1}}), l + 1);
  }
}

static inline double bilinear (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 125 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
# 133 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
    return (27.*((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0]) + sizeof(Cell)))[(s.i)] +
     9.*(((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+0][(point.k+2)/2+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+child.y][(point.k+2)/2+0]) + sizeof(Cell)))[(s.i)] +
  ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+child.z]) + sizeof(Cell)))[(s.i)]) +
     3.*(((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+child.y][(point.k+2)/2+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+0][(point.k+2)/2+child.z]) + sizeof(Cell)))[(s.i)] +
  ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+child.y][(point.k+2)/2+child.z]) + sizeof(Cell)))[(s.i)]) +
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+child.y][(point.k+2)/2+child.z]) + sizeof(Cell)))[(s.i)])/64.;

}

static inline void refine_bilinear (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 143 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = bilinear (point, s); } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}

static inline double quadratic (double a, double b, double c)
{
  return (30.*a + 5.*b - 3.*c)/32.;
}

static inline double biquadratic (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 154 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
# 169 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
  
# 169 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 ((0) ? (void) (0) : __assert_fail (
# 169 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 "false"
# 169 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h", 169, __extension__ __PRETTY_FUNCTION__))
# 169 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
               ;
  return 0.;

}

static inline double biquadratic_vertex (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 175 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"







  
# 182 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 ((0) ? (void) (0) : __assert_fail (
# 182 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 "false"
# 182 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h", 182, __extension__ __PRETTY_FUNCTION__))
# 182 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
               ;
  return 0.;

}

static inline void refine_biquadratic (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 188 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = biquadratic (point, s); } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}

static inline void refine_linear (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 194 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

if (!((cm).i >= 65536)) {
# 194 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  coord g;
  if (_attribute[s.i].gradient)
    {
# 197 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.x = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
# 197 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.y = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)]);
# 197 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.z = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)]);}
  else
    {
# 200 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/2.;
# 200 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)])/2.;
# 200 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)])/2.;}

  double sc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], cmc = 4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)], sum = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*(1 << 3);
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sc;
    {
# 206 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.x*g.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-child.x][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]/cmc;
# 206 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.y*g.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-child.y] [point.k+0]) + sizeof(Cell)))[(cm.i)]/cmc;
# 206 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.z*g.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-child.z]) + sizeof(Cell)))[(cm.i)]/cmc;}
    sum -= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)];
  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 ((
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 fabs(sum) < 1e-10
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 "fabs(sum) < 1e-10"
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h", 210, __extension__ __PRETTY_FUNCTION__))
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                           ;
 }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 194 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  coord g;
  if (_attribute[s.i].gradient)
    {
# 197 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.x = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
# 197 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.y = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)]);
# 197 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.z = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)]);}
  else
    {
# 200 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/2.;
# 200 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)])/2.;
# 200 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      g.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)])/2.;}

  double sc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], cmc = 4.*_const_cm, sum = _const_cm*(1 << 3);
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sc;
    {
# 206 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.x*g.x*_const_cm/cmc;
# 206 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.y*g.y*_const_cm/cmc;
# 206 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.z*g.z*_const_cm/cmc;}
    sum -= _const_cm;
  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 ((
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 fabs(sum) < 1e-10
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 "fabs(sum) < 1e-10"
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h", 210, __extension__ __PRETTY_FUNCTION__))
# 210 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                           ;
 }}

static inline void refine_reset (Point point, scalar v)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 214 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.i)] = 0.; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}

static inline void refine_injection (Point point, scalar v)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 220 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  double val = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.i)];
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.i)] = val; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}

static scalar multigrid_init_scalar (scalar s, const char * name)
{
  s = cartesian_init_scalar (s, name);
  _attribute[s.i].prolongation = refine_bilinear;
  _attribute[s.i].restriction = restriction_average;
  return s;
}

static scalar multigrid_init_vertex_scalar (scalar s, const char * name)
{
  s = cartesian_init_vertex_scalar (s, name);
  _attribute[s.i].restriction = restriction_vertex;
  return s;
}

static vector multigrid_init_face_vector (vector v, const char * name)
{
  v = cartesian_init_face_vector (v, name);
  {
# 244 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

    _attribute[v.y.i].restriction = no_restriction;
# 244 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

    _attribute[v.z.i].restriction = no_restriction;
# 244 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

    _attribute[v.x.i].restriction = no_restriction;}
  _attribute[v.x.i].restriction = restriction_face;
  return v;
}

void multigrid_debug (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 251 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

  cartesian_debug (point);

  FILE * plot = fopen ("plot", "a");
  if (point.level > 0) {
    char name[80] = "coarse";
    if (0 > 0)
      sprintf (name, "coarse-%d", 0);
    FILE * fp = fopen (name, "w");
# 284 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
      double xc = x - child.x*Delta/2., yc = y - child.y*Delta/2.;
      double zc = z - child.z*Delta/2.;
      for (int k = 0; k <= 1; k++)
 for (int l = 0; l <= 1; l++)
   for (int m = 0; m <= 1; m++) {
     if (all) for (scalar v = *all, *_i41 = all; ((scalar *)&v)->i >= 0; v = *++_i41)
       fprintf (fp, "%g %g %g %g ",
         xc + k*child.x*Delta*2. + _attribute[v.i].d.x*Delta,
         yc + l*child.y*Delta*2. + _attribute[v.i].d.y*Delta,
         zc + m*child.z*Delta*2. + _attribute[v.i].d.z*Delta,
         ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k*child.x] [(point.j+2)/2+l*child.y][(point.k+2)/2+m*child.z]) + sizeof(Cell)))[(v.i)]);
     fputc ('\n', fp);
   }
      fprintf (
# 297 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
              stderr
# 297 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                  , ", '%s' u 1+4*v:2+4*v:3+4*v:4+4*v w labels tc lt 3 t ''",
        name);
      fprintf (plot, ", '%s' u 1+4*v:2+4*v:3+4*v:4+4*v w labels tc lt 3 t ''",
        name);

    fclose (fp);
  }

  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).neighbors > 0)) {
    char name[80] = "fine";
    if (0 > 0)
      sprintf (name, "fine-%d", 0);
    FILE * fp = fopen (name, "w");
# 341 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
      double xf = x - Delta/4., yf = y - Delta/4., zf = z - Delta/4.;
      for (int k = -2; k <= 3; k++)
 for (int l = -2; l <= 3; l++)
   for (int m = -2; m <= 3; m++) {
     if (all) for (scalar v = *all, *_i42 = all; ((scalar *)&v)->i >= 0; v = *++_i42) {
       fprintf (fp, "%g %g %g ",
         xf + k*Delta/2. + _attribute[v.i].d.x*Delta/4.,
         yf + l*Delta/2. + _attribute[v.i].d.y*Delta/4.,
         zf + m*Delta/2. + _attribute[v.i].d.z*Delta/4.);
       if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k][2*point.j-2 +l] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k][2*point.j-2 +l] [2*point.k-2 +m]))
  fprintf (fp, "%g ", ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k] [2*point.j-2 +l][2*point.k-2 +m]) + sizeof(Cell)))[(v.i)]);
       else
  fputs ("n/a ", fp);
     }
     fputc ('\n', fp);
   }
      fprintf (
# 357 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
              stderr
# 357 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                  , ", '%s' u 1+4*v:2+4*v:3+4*v:4+4*v w labels tc lt 2 t ''",
        name);
      fprintf (plot, ", '%s' u 1+4*v:2+4*v:3+4*v:4+4*v w labels tc lt 2 t ''",
        name);

    fclose (fp);
  }
  fflush (
# 364 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
         stderr
# 364 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
             );
  fclose (plot);
}

static void multigrid_restriction (scalar * list)
{
  scalar * listdef = 
# 370 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
                    ((void *)0)
# 370 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                        , * listc = 
# 370 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
                                    ((void *)0)
# 370 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                                        , * list2 = 
# 370 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
                                                    ((void *)0)
# 370 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                                                        ;
  if (list) for (scalar s = *list, *_i43 = list; ((scalar *)&s)->i >= 0; s = *++_i43)
    if (!((s).i >= 65536) && _attribute[s.i].block > 0) {
      if (_attribute[s.i].restriction == restriction_average) {
 listdef = list_add (listdef, s);
 list2 = list_add (list2, s);
      }
      else if (_attribute[s.i].restriction != no_restriction) {
 listc = list_add (listc, s);
 if (_attribute[s.i].face)
   {
# 380 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

     list2 = list_add (list2, _attribute[s.i].v.x);
# 380 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

     list2 = list_add (list2, _attribute[s.i].v.y);
# 380 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

     list2 = list_add (list2, _attribute[s.i].v.z);}
 else
   list2 = list_add (list2, s);
      }
    }

  if (listdef || listc) {
    for (int l = (grid->depth) - 1; l >= 0; l--) {
       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 389 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 {
 if (listdef) for (scalar s = *listdef, *_i44 = listdef; ((scalar *)&s)->i >= 0; s = *++_i44)

     restriction_average (point, s);
 if (listc) for (scalar s = *listc, *_i45 = listc; ((scalar *)&s)->i >= 0; s = *++_i45) {

     _attribute[s.i].restriction (point, s);
 }
      } } } } } }; }}; }
      { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list2, l); };
    }
    free(listdef);
    free(listc);
    free(list2);
  }
}

void multigrid_methods()
{
  cartesian_methods();
  debug = multigrid_debug;
  init_scalar = multigrid_init_scalar;
  init_vertex_scalar = multigrid_init_vertex_scalar;
  init_face_vector = multigrid_init_face_vector;
  restriction = multigrid_restriction;
}







void subtree_size (scalar size, 
# 422 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h" 3 4
                               _Bool 
# 422 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
                                    leaves)
{




   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 428 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(size.i)] = 1; } } } }; }





  { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, ((scalar []){size,{-1}}), (grid->depth)); };
  for (int l = (grid->depth) - 1; l >= 0; l--) {
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 437 "/home/e.sharaborin/basilisk/src/grid/multigrid-common.h"
 {
      double sum = !leaves;
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
 sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(size.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(size.i)] = sum;
    } } } } } }; }}; }
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, ((scalar []){size,{-1}}), l); };
  }
}
# 5 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
# 21 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
int refine_cell (Point point, scalar * list, int flag, Cache * refined)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 22 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  int nr = 0;


  if (level > 0)
    for (int k = 0; k != 2*child.x; k += child.x)

      for (int l = 0; l != 2*child.y; l += child.y)


 for (int m = 0; m != 2*child.z; m += child.z)

   if ((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k] [(point.j+2)/2+l][(point.k+2)/2+m])))).pid >= 0 && (((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k] [(point.j+2)/2+l][(point.k+2)/2+m]))))).flags & leaf)) {
     Point p = point;


     p.level = point.level - 1;
     p.i = (point.i + 2)/2 + k;
     do { if (p.i < 2) p.i += 1 << p.level; else if (p.i >= 2 + (1 << p.level)) p.i -= 1 << p.level; } while(0);

       p.j = (point.j + 2)/2 + l;
       do { if (p.j < 2) p.j += 1 << p.level; else if (p.j >= 2 + (1 << p.level)) p.j -= 1 << p.level; } while(0);


       p.k = (point.k + 2)/2 + m;
       do { if (p.k < 2) p.k += 1 << p.level; else if (p.k >= 2 + (1 << p.level)) p.k -= 1 << p.level; } while(0);

     nr += refine_cell (p, list, flag, refined);
     (*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k] [(point.j+2)/2+l][(point.k+2)/2+m])))).flags |= flag;
   }



  increment_neighbors (point);

  int cflag = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active) ? (active|leaf) : leaf;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= cflag; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }


  if (list) for (scalar s = *list, *_i46 = list; ((scalar *)&s)->i >= 0; s = *++_i46)
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) || _attribute[s.i].face)
      _attribute[s.i].refine (point, s);


  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~leaf;
# 91 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
  return nr;
}






# 98 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
_Bool 
# 98 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
    coarsen_cell (Point point, scalar * list)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 99 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"




  int pid = (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors || ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0 && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid != pid))
      return 
# 106 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
            0
# 106 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                 ; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }



  if (list) for (scalar s = *list, *_i47 = list; ((scalar *)&s)->i >= 0; s = *++_i47) {
    _attribute[s.i].restriction (point, s);
    if (_attribute[s.i].coarsen)
      _attribute[s.i].coarsen (point, s);
  }


  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= leaf;


  decrement_neighbors (point);
# 133 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
  return 
# 133 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
        1
# 133 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
            ;
}

void coarsen_cell_recursive (Point point, scalar * list)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 137 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"



   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors)
       { { int _nn = 1 + 0 ? 1 + 0 : 2; int _i = point.i, _j = point.j, _k = point.k; for (int _l = - _nn; _l <= _nn; _l++) { point.i = _i + _l; for (int _m = - _nn; _m <= _nn; _m++) { point.j = _j + _m; for (int _n = - _nn; _n <= _nn; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
 if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0))
   coarsen_cell_recursive (point, list); } } } point.i = _i; point.j = _j; point.k = _k;}; } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }

  
# 146 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 ((
# 146 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 coarsen_cell (point, list)
# 146 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 146 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 "coarsen_cell (point, list)"
# 146 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 146, __extension__ __PRETTY_FUNCTION__))
# 146 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                                    ;
}

void mpi_boundary_refine (scalar *);
void mpi_boundary_coarsen (int, int);
void mpi_boundary_update (scalar *);

typedef struct {
  int nc, nf;
} astats;

struct Adapt {
  scalar * slist;
  double * max;
  int maxlevel;
  int minlevel;
  scalar * list;
};


astats adapt_wavelet (struct Adapt p)
{ ;
  if (p.list == 
# 168 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
               ((void *)0)
# 168 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                   )
    p.list = all;
  if (((cm).i >= 65536))
    restriction (p.slist);
  else {
    scalar * listr = list_concat (((scalar []){cm,{-1}}), p.slist);
    restriction (listr);
    free(listr);
  }

  astats st = {0, 0};
  scalar * listc = 
# 179 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 179 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                      ;
  if (p.list) for (scalar s = *p.list, *_i48 = p.list; ((scalar *)&s)->i >= 0; s = *++_i48)
    if (!((s).i >= 65536) && _attribute[s.i].restriction != no_restriction)
      listc = list_add (listc, s);


  if (p.minlevel < 1)
    p.minlevel = 1;
  ((Tree *)grid)->refined.n = 0;
  static const int refined = 1 << user, too_fine = 1 << (user + 1);
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 189 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active)) {
      static const int too_coarse = 1 << (user + 2);
      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_coarse) {
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   refine_cell (point, listc, refined, &((Tree *)grid)->refined);
   st.nf++;
 }
 continue;
      }
      else {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & refined) {

   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   continue;
 }

 
# 207 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
_Bool 
# 207 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     local = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0);
 if (!local)
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
     if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0))
       local = 
# 211 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
              1
# 211 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                  , _l = _m = _n = 2; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
 if (local) {
   int i = 0;
   static const int just_fine = 1 << (user + 3);
   if (p.slist) for (scalar s = *p.slist, *_i49 = p.slist; ((scalar *)&s)->i >= 0; s = *++_i49) {
     double max = p.max[i++], sc[1 << 3];
     int c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
       sc[c++] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
     _attribute[s.i].prolongation (point, s);
     c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
       double e = fabs(sc[c] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
       if (e > max && level < p.maxlevel) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_coarse;
       }
       else if ((e <= max/1.5 || level > p.maxlevel) &&
         !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & (too_coarse|just_fine))) {
  if (level >= p.minlevel)
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_fine;
       }
       else if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_coarse)) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= just_fine;
       }
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sc[c++];
     } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
   }
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~just_fine;
     if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
       if (level >= p.maxlevel)
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_fine;
     }
     else if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active))
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
 }
      }
    }
    else
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  mpi_boundary_refine (listc);



  for (int l = (grid->depth); l >= 0; l--) {
     { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 261 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

      if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0)) {
 if (level == l) {
   if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
     if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & refined)

       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~(refined|too_fine);
     else if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_fine) {
       if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && coarsen_cell (point, listc))
  st.nc++;
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
     }
   }
   if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_fine)
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
   else if (level > 0 && ((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0])))).flags & too_fine))
     (*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0])))).flags &= ~too_fine;
   continue;
 }
 else if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
   continue;
      } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
    mpi_boundary_coarsen (l, too_fine);
  }
  free(listc);

  ;
  ;
  if (st.nc || st.nf)
    mpi_boundary_update (p.list);

  { astats _ret = st; ; return _ret; }
 ; }
# 314 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
static void refine_level (int depth)
{
  int refined;
  do {
    refined = 0;
    ((Tree *)grid)->refined.n = 0;
     { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) { if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0)) {{
# 320 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

      if (level < depth) {
 refine_cell (point, 
# 322 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                    ((void *)0)
# 322 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                        , 0, &((Tree *)grid)->refined);
 refined++;
 continue;
      } } } continue; } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
    ;
    if (refined) {
      mpi_boundary_refine (
# 328 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                          ((void *)0)
# 328 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                              );
      mpi_boundary_update (
# 329 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                          ((void *)0)
# 329 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                              );
    }
  } while (refined);
}
# 359 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
static void halo_flux (vector * list)
{
  vector * listv = 
# 361 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 361 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                      ;
  if (list) for (vector v = *list, *_i50 = list; ((scalar *)&v)->i >= 0; v = *++_i50)
    if (!((v.x).i >= 65536))
      listv = vectors_add (listv, v);

  if (listv) {
    for (int l = (grid->depth) - 1; l >= 0; l--)
       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; point.k = _cache.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 368 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

 {
# 369 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
# 385 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i51 = listv; ((scalar *)&f)->i >= 0; f = *++_i51)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.x.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(f.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(f.x.i)] +
         ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(f.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(f.x.i)])/4.;
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i52 = listv; ((scalar *)&f)->i >= 0; f = *++_i52)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.x.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(f.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(f.x.i)] +
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(f.x.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(f.x.i)])/4.;

      }
# 369 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
# 385 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i51 = listv; ((scalar *)&f)->i >= 0; f = *++_i51)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.y.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(f.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(f.y.i)] +
         ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(f.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(f.y.i)])/4.;
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i52 = listv; ((scalar *)&f)->i >= 0; f = *++_i52)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.y.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2][2*point.k-2 +0]) + sizeof(Cell)))[(f.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2][2*point.k-2 +1]) + sizeof(Cell)))[(f.y.i)] +
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2][2*point.k-2 +0]) + sizeof(Cell)))[(f.y.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2][2*point.k-2 +1]) + sizeof(Cell)))[(f.y.i)])/4.;

      }
# 369 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
# 385 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i51 = listv; ((scalar *)&f)->i >= 0; f = *++_i51)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.z.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(f.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(f.z.i)] +
         ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(f.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(f.z.i)])/4.;
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i52 = listv; ((scalar *)&f)->i >= 0; f = *++_i52)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.z.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +2]) + sizeof(Cell)))[(f.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +2]) + sizeof(Cell)))[(f.z.i)] +
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +2]) + sizeof(Cell)))[(f.z.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +2]) + sizeof(Cell)))[(f.z.i)])/4.;

      }} } } } }; }}; }
    free(listv);
  }
}



static scalar tree_init_scalar (scalar s, const char * name)
{
  s = multigrid_init_scalar (s, name);
  _attribute[s.i].refine = _attribute[s.i].prolongation;
  return s;
}

static void prolongation_vertex (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 409 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"




  ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] +
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+1]) + sizeof(Cell)))[(s.i)])/8.;


  for (int i = 0; i <= 1; i++) {
    for (int j = 0; j <= 1; j++)

      for (int k = 0; k <= 1; k++)
 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i][2*point.j-2 +2*j] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i][2*point.j-2 +2*j] [2*point.k-2 +2*k]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +2*j][2*point.k-2 +2*k]) + sizeof(Cell)))[(s.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+k]) + sizeof(Cell)))[(s.i)];





    {
# 428 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

      if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).neighbors) {



 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+1]) + sizeof(Cell)))[(s.i)])/4.;
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)])/2.;
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)])/2.;
 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i][2*point.j-2 +1] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i][2*point.j-2 +1] [2*point.k-2 +2]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +1][2*point.k-2 +2]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+1]) + sizeof(Cell)))[(s.i)])/2.;
 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i][2*point.j-2 +2] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i][2*point.j-2 +2] [2*point.k-2 +1]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +2][2*point.k-2 +1]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+1]) + sizeof(Cell)))[(s.i)])/2.;

      }
# 428 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

      if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).neighbors) {



 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2*i][2*point.k-2 +1]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+1]) + sizeof(Cell)))[(s.i)])/4.;
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2*i][2*point.k-2 +1]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(s.i)])/2.;
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2*i][2*point.k-2 +0]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(s.i)])/2.;
 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2][2*point.j-2 +2*i] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2][2*point.j-2 +2*i] [2*point.k-2 +1]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +2*i][2*point.k-2 +1]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+1]) + sizeof(Cell)))[(s.i)])/2.;
 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1][2*point.j-2 +2*i] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1][2*point.j-2 +2*i] [2*point.k-2 +2]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2*i][2*point.k-2 +2]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+1]) + sizeof(Cell)))[(s.i)])/2.;

      }
# 428 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

      if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).neighbors) {



 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +2*i]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+i]) + sizeof(Cell)))[(s.i)])/4.;
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +2*i]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(s.i)])/2.;
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +2*i]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(s.i)])/2.;
 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1][2*point.j-2 +2] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1][2*point.j-2 +2] [2*point.k-2 +2*i]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2][2*point.k-2 +2*i]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+i]) + sizeof(Cell)))[(s.i)])/2.;
 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2][2*point.j-2 +1] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2][2*point.j-2 +1] [2*point.k-2 +2*i]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1][2*point.k-2 +2*i]) + sizeof(Cell)))[(s.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+i]) + sizeof(Cell)))[(s.i)])/2.;

      }}
  }
}

static scalar tree_init_vertex_scalar (scalar s, const char * name)
{
  s = multigrid_init_vertex_scalar (s, name);
  _attribute[s.i].refine = _attribute[s.i].prolongation = prolongation_vertex;
  return s;
}
# 452 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

static void refine_face_x (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 454 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  vector v = _attribute[s.i].v;
# 475 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0) &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+0]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.x.i)])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.x.i)])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +j][2*point.k-2 +k]) + sizeof(Cell)))[(v.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid >= 0) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).neighbors &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+ +1] [point.k+0]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.x.i)])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.x.i)])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +j][2*point.k-2 +k]) + sizeof(Cell)))[(v.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0)) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+0]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+ +1] [point.k+0]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.x.i)])/16.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.x.i)])/16.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +j][2*point.k-2 +k]) + sizeof(Cell)))[(v.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)])/2. + (2*j - 1)*g1 + (2*k - 1)*g2;
  }

}
# 452 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

static void refine_face_y (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 454 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  vector v = _attribute[s.i].v;
# 475 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0) &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.y.i)])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k] [2*point.j-2 +0][2*point.k-2 +j]) + sizeof(Cell)))[(v.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid >= 0) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).neighbors &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+ +1]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(v.y.i)])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k] [2*point.j-2 +2][2*point.k-2 +j]) + sizeof(Cell)))[(v.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0)) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+ +1]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(v.y.i)])/16.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)])/16.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k] [2*point.j-2 +1][2*point.k-2 +j]) + sizeof(Cell)))[(v.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)])/2. + (2*j - 1)*g1 + (2*k - 1)*g2;
  }

}
# 452 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

static void refine_face_z (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 454 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  vector v = _attribute[s.i].v;
# 475 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0) &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+0]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.z.i)])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +j] [2*point.j-2 +k][2*point.k-2 +0]) + sizeof(Cell)))[(v.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid >= 0) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).neighbors &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+1]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(v.z.i)])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +j] [2*point.j-2 +k][2*point.k-2 +2]) + sizeof(Cell)))[(v.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0)) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)])/16.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+0]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+1]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(v.z.i)])/16.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +j] [2*point.j-2 +k][2*point.k-2 +1]) + sizeof(Cell)))[(v.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)])/2. + (2*j - 1)*g1 + (2*k - 1)*g2;
  }

}

void refine_face (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 502 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  vector v = _attribute[s.i].v;
  {
# 504 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.x.i].prolongation (point, v.x);
# 504 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.y.i].prolongation (point, v.y);
# 504 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.z.i].prolongation (point, v.z);}
}

void refine_face_solenoidal (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 509 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  refine_face (point, s);

  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0)) {

    vector v = _attribute[s.i].v;
    double d[1 << 3], p[1 << 3];
    int i = 0;
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
      d[i] = 0.;
      {
# 519 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

 d[i] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)];
# 519 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

 d[i] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)];
# 519 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

 d[i] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)];}
      i++;
    } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
# 533 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
    static double m[7][7] = {
      {7./12,5./24,3./8,5./24,3./8,1./4,1./3},
      {5./24,7./12,3./8,5./24,1./4,3./8,1./3},
      {3./8,3./8,3./4,1./4,3./8,3./8,1./2},
      {5./24,5./24,1./4,7./12,3./8,3./8,1./3},
      {3./8,1./4,3./8,3./8,3./4,3./8,1./2},
      {1./4,3./8,3./8,3./8,3./8,3./4,1./2},
      {1./3,1./3,1./2,1./3,1./2,1./2,5./6}
    };
    p[0] = 0.;
    for (int i = 0; i < 7; i++) {
      p[i + 1] = 0.;
      for (int j = 0; j < 7; j++)
 p[i + 1] += m[i][j]*d[j+1];
    }
    for (int k = 0; k <= 1; k++) {
      ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +k]) + sizeof(Cell)))[(v.x.i)] += p[4+k] - p[0+k];
      ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +k]) + sizeof(Cell)))[(v.x.i)] += p[6+k] - p[2+k];
      ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +k]) + sizeof(Cell)))[(v.y.i)] += p[2+k] - p[0+k];
      ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +k]) + sizeof(Cell)))[(v.y.i)] += p[6+k] - p[4+k];
    }
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(v.z.i)] += p[1] - p[0];
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(v.z.i)] += p[3] - p[2];
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(v.z.i)] += p[5] - p[4];
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(v.z.i)] += p[7] - p[6];

  }

}

vector tree_init_face_vector (vector v, const char * name)
{
  v = cartesian_init_face_vector (v, name);
  {
# 566 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.x.i].restriction = _attribute[v.x.i].refine = no_restriction;
# 566 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.y.i].restriction = _attribute[v.y.i].refine = no_restriction;
# 566 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.z.i].restriction = _attribute[v.z.i].refine = no_restriction;}
  _attribute[v.x.i].restriction = restriction_face;
  _attribute[v.x.i].refine = refine_face;
  {
# 570 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.x.i].prolongation = refine_face_x;
# 570 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.y.i].prolongation = refine_face_y;
# 570 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    _attribute[v.z.i].prolongation = refine_face_z;}
  return v;
}

static void tree_boundary_level (scalar * list, int l)
{
  int depth = l < 0 ? (grid->depth) : l;

  if (tree_is_full()) {
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, depth); };
    return;
  }

  scalar * listdef = 
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                    ((void *)0)
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                        , * listc = 
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                                    ((void *)0)
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                                        , * list2 = 
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                                                    ((void *)0)
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                                                        , * vlist = 
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                                                                    ((void *)0)
# 584 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                                                                        ;
  if (list) for (scalar s = *list, *_i53 = list; ((scalar *)&s)->i >= 0; s = *++_i53)
    if (!((s).i >= 65536)) {
      if (_attribute[s.i].restriction == restriction_average) {
 listdef = list_add (listdef, s);
 list2 = list_add (list2, s);
      }
      else if (_attribute[s.i].restriction != no_restriction) {
 listc = list_add (listc, s);
 if (_attribute[s.i].face)
   {
# 594 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

     list2 = list_add (list2, _attribute[s.i].v.x);
# 594 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

     list2 = list_add (list2, _attribute[s.i].v.y);
# 594 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

     list2 = list_add (list2, _attribute[s.i].v.z);}
 else {
   list2 = list_add (list2, s);
   if (_attribute[s.i].restriction == restriction_vertex)
     vlist = list_add (vlist, s);
 }
      }
    }

  if (vlist)
# 629 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 629 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0) ||
   (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0])))).pid >= 0) ||
   (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1])))).pid >= 0) ||
   (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+-1])))).pid >= 0)) {

 if (vlist) for (scalar s = *vlist, *_i54 = vlist; ((scalar *)&s)->i >= 0; s = *++_i54)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (((*((Cell *)((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]))))).flags & vertex) ? ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(s.i)] : ((double)1e30);
      }
      else
 {
# 639 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
   if (child.y == 1 && child.z == 1 &&
       ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i55 = vlist; ((scalar *)&s)->i >= 0; s = *++_i55)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]))))).flags & vertex)
  && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(s.i)])/4. : ((double)1e30);
   }
   else if (child.x == -1 && child.z == -1 && child.y == 1 &&
     ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0) ||
      (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0) ||
      (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i56 = vlist; ((scalar *)&s)->i >= 0; s = *++_i56)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)])/2. : ((double)1e30);
   }
 }
# 639 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
   if (child.z == 1 && child.x == 1 &&
       ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i55 = vlist; ((scalar *)&s)->i >= 0; s = *++_i55)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]))))).flags & vertex)
  && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)])/4. : ((double)1e30);
   }
   else if (child.y == -1 && child.x == -1 && child.z == 1 &&
     ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0) ||
      (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0) ||
      (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i56 = vlist; ((scalar *)&s)->i >= 0; s = *++_i56)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)])/2. : ((double)1e30);
   }
 }
# 639 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
   if (child.x == 1 && child.y == 1 &&
       ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i55 = vlist; ((scalar *)&s)->i >= 0; s = *++_i55)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]))))).flags & vertex)
  && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)])/4. : ((double)1e30);
   }
   else if (child.z == -1 && child.y == -1 && child.x == 1 &&
     ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0) ||
      (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0) ||
      (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i56 = vlist; ((scalar *)&s)->i >= 0; s = *++_i56)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/2. : ((double)1e30);
   }
 }}
    } } } } } }; }

  free(vlist);

  if (listdef || listc) {
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, list2, depth); };
    for (int l = depth - 1; l >= 0; l--) {
       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 665 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
 if (listdef) for (scalar s = *listdef, *_i57 = listdef; ((scalar *)&s)->i >= 0; s = *++_i57)
   restriction_average (point, s);
 if (listc) for (scalar s = *listc, *_i58 = listc; ((scalar *)&s)->i >= 0; s = *++_i58)
   _attribute[s.i].restriction (point, s);
      } } } } } }; }}; }
      { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, list2, l); };
    }
    free(listdef);
    free(listc);
    free(list2);
  }

  scalar * listr = 
# 678 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 678 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                      ;
  vector * listf = 
# 679 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 679 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                      ;
  if (list) for (scalar s = *list, *_i59 = list; ((scalar *)&s)->i >= 0; s = *++_i59)
    if (!((s).i >= 65536) && _attribute[s.i].refine != no_restriction) {
      if (_attribute[s.i].face)
 listf = vectors_add (listf, _attribute[s.i].v);
      else
 listr = list_add (listr, s);
    }

  if (listr || listf) {
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, 0); };
    for (int i = 0; i < depth; i++) {
       { { if (i <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[i]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = i; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; point.k = _cache.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 691 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
 if (listr) for (scalar s = *listr, *_i60 = listr; ((scalar *)&s)->i >= 0; s = *++_i60)
          _attribute[s.i].prolongation (point, s);
 if (listf) for (vector v = *listf, *_i61 = listf; ((scalar *)&v)->i >= 0; v = *++_i61)
   {
# 695 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

     _attribute[v.x.i].prolongation (point, v.x);
# 695 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

     _attribute[v.y.i].prolongation (point, v.y);
# 695 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

     _attribute[v.z.i].prolongation (point, v.z);}
      } } } } }; }}; }
      { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, i + 1); };
    }
    free(listr);
    free(listf);
  }
}

double treex (Point point) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 705 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  if (level == 0)
    return 0;




  
# 712 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 ((0) ? (void) (0) : __assert_fail (
# 712 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 "false"
# 712 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 712, __extension__ __PRETTY_FUNCTION__))
# 712 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
               ;
  double i = 0;

  return treex(parent) + i/(1 << 2*(level - 1));
}

double treey (Point point) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 718 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

  if (level == 0)
    return 0;
  return treey(parent) + 4./(1 << 2*(level - 1));
}

void output_tree (FILE * fp)
{
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 726 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors)
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
 if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0))
   fprintf (fp, "%g %g\n%g %g\n\n",
     treex(parent), treey(parent), treex(point), treey(point)); } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }; } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
}

void tree_check()
{


  long nleaves = 0, nactive = 0;
   { { Point root = {0}; for (root.i = 2*Period.x; root.i <= 2*(2 - Period.x); root.i++) for (root.j = 2*Period.y; root.j <= 2*(2 - Period.y); root.j++) for (root.k = 2*Period.z; root.k <= 2*(2 - Period.z); root.k++) { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 739 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
      
# 741 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     ((
# 741 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0
# 741 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 741 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     "cell.pid >= 0"
# 741 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 741, __extension__ __PRETTY_FUNCTION__))
# 741 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                           ;
      nleaves++;
    }
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0))
      
# 745 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     ((
# 745 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0)
# 745 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 745 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     "is_active(cell) || (!is_leaf(cell) && !cell.neighbors && cell.pid >= 0)"
# 745 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 745, __extension__ __PRETTY_FUNCTION__))
# 745 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                                                                                     ;
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active))
      nactive++;

    int neighbors = 0;
     { { int _nn = 1 + 0 ? 1 + 0 : 2; int _i = point.i, _j = point.j, _k = point.k; for (int _l = - _nn; _l <= _nn; _l++) { point.i = _i + _l; for (int _m = - _nn; _m <= _nn; _m++) { point.j = _j + _m; for (int _n = - _nn; _n <= _nn; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) && (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid >= 0))
 neighbors++; } } } point.i = _i; point.j = _j; point.k = _k;}; }
    
# 753 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
   ((
# 753 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors == neighbors
# 753 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
   ) ? (void) (0) : __assert_fail (
# 753 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
   "cell.neighbors == neighbors"
# 753 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
   , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 753, __extension__ __PRETTY_FUNCTION__))
# 753 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                                       ;


    if (!(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).neighbors)
      
# 757 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     ((
# 757 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     !(level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && point.k > 0 && point.k <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0][2*point.j-2 +0] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0][2*point.j-2 +0] [2*point.k-2 +0])
# 757 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     ) ? (void) (0) : __assert_fail (
# 757 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
     "!allocated_child(0,0,0)"
# 757 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
     , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 757, __extension__ __PRETTY_FUNCTION__))
# 757 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                                     ;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }


  long reachable = 0;
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 762 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 {
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active))
      reachable++;
    else
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  
# 768 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 ((
# 768 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 nactive == reachable
# 768 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 768 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 "nactive == reachable"
# 768 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 768, __extension__ __PRETTY_FUNCTION__))
# 768 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                              ;


  reachable = 0;
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 772 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"

    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
      reachable++;
      continue;
    } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  
# 777 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 ((
# 777 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 nleaves == reachable
# 777 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 777 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
 "nleaves == reachable"
# 777 "/home/e.sharaborin/basilisk/src/grid/tree-common.h" 3 4
 , "/home/e.sharaborin/basilisk/src/grid/tree-common.h", 777, __extension__ __PRETTY_FUNCTION__))
# 777 "/home/e.sharaborin/basilisk/src/grid/tree-common.h"
                              ;
}

static void tree_restriction (scalar * list) {
  if (tree_is_full())
    multigrid_restriction (list);

}

void tree_methods()
{
  multigrid_methods();
  init_scalar = tree_init_scalar;
  init_vertex_scalar = tree_init_vertex_scalar;
  init_face_vector = tree_init_face_vector;
  boundary_level = tree_boundary_level;
  boundary_flux = halo_flux;
  restriction = tree_restriction;
}
# 1789 "/home/e.sharaborin/basilisk/src/grid/tree.h"


void tree_periodic (int dir)
{
  int depth = grid ? (grid->depth) : -1;
  if (grid)
    free_grid();
  periodic (dir);
  if (depth >= 0)
    init_grid (1 << depth);
}
# 3685 "/home/e.sharaborin/basilisk/src/grid/tree.h"
void mpi_boundary_refine (scalar * list){}
void mpi_boundary_coarsen (int a, int b){}
void mpi_boundary_update (scalar * list) {
  boundary (list);
}
# 4 "/home/e.sharaborin/basilisk/src/grid/octree.h"

void octree_methods() {
  tree_methods();
}
# 17 "tube_bp.c"
# 1 "../src_local/centered-weugene.h"
# 1 "./../src_local/centered-weugene.h"
# 35 "./../src_local/centered-weugene.h"
# 1 "./run.h"
# 1 "/home/e.sharaborin/basilisk/src/run.h"
# 9 "/home/e.sharaborin/basilisk/src/run.h"
double dt = 1.;
# 1 "./utils.h"
# 1 "/home/e.sharaborin/basilisk/src/utils.h"







double DT = 1e10, CFL = 0.5;




struct {

  long nc;

  long tnc;

  double t;

  double speed;

  timer gt;
} perf;





void update_perf() {
  perf.nc += grid->n;
  perf.tnc += grid->tn;
  perf.t = timer_elapsed (perf.gt);
  perf.speed = perf.tnc/perf.t;
}






typedef struct {
  double cpu;
  double real;
  double speed;
  double min;
  double avg;
  double max;
  size_t tnc;
  long mem;
} timing;






timing timer_timing (timer t, int i, size_t tnc, double * mpi)
{
  timing s;



  clock_t end = clock();
  s.cpu = ((double) (end - t.c))/
# 65 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
                                ((__clock_t) 1000000)
# 65 "/home/e.sharaborin/basilisk/src/utils.h"
                                              ;
  s.real = timer_elapsed (t);
  if (tnc == 0) {
    double n = 0;
     {


 {
double _n = n;
# 69 "/home/e.sharaborin/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 69 "/home/e.sharaborin/basilisk/src/utils.h"
 _n++; } } } }; n += _n;
;



}
# 69 "/home/e.sharaborin/basilisk/src/utils.h"
 }
    s.tnc = n;
    tnc = n*i;
  }
  else
    s.tnc = tnc;

  struct rusage usage;
  getrusage (
# 77 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
            RUSAGE_SELF
# 77 "/home/e.sharaborin/basilisk/src/utils.h"
                       , &usage);
  s.mem = usage.ru_maxrss;
# 95 "/home/e.sharaborin/basilisk/src/utils.h"
  s.min = s.max = s.avg = 0.;

  s.speed = s.real > 0. ? tnc/s.real : -1.;
  return s;
}




void timer_print (timer t, int i, size_t tnc)
{
  timing s = timer_timing (t, i, tnc, 
# 106 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
                                     ((void *)0)
# 106 "/home/e.sharaborin/basilisk/src/utils.h"
                                         );
  fprintf (
# 107 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
          stdout
# 107 "/home/e.sharaborin/basilisk/src/utils.h"
              ,
    "\n# " "Octree"
    ", %d steps, %g CPU, %.4g real, %.3g points.step/s, %d var\n",
    i, s.cpu, s.real, s.speed, (int) (datasize/sizeof(double)));
# 120 "/home/e.sharaborin/basilisk/src/utils.h"
}







typedef struct {
  double avg, rms, max, volume;
} norm;

norm normf (scalar f)
{
  double avg = 0., rms = 0., max = 0., volume = 0.;
   {


 {
double _max = max; double _avg = avg; double _rms = rms; double _volume = volume;
# 135 "/home/e.sharaborin/basilisk/src/utils.h"

if (!((cm).i >= 65536)) {
# 135 "/home/e.sharaborin/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 136 "/home/e.sharaborin/basilisk/src/utils.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double)1e30) && (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]) > 0.) {
      double v = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]);
      if (v > _max) _max = v;
      _volume += (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]);
      _avg += (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)])*v;
      _rms += (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)])*((v)*(v));
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 135 "/home/e.sharaborin/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 136 "/home/e.sharaborin/basilisk/src/utils.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double)1e30) && (((Delta)*(Delta)*(Delta))*_const_cm) > 0.) {
      double v = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]);
      if (v > _max) _max = v;
      _volume += (((Delta)*(Delta)*(Delta))*_const_cm);
      _avg += (((Delta)*(Delta)*(Delta))*_const_cm)*v;
      _rms += (((Delta)*(Delta)*(Delta))*_const_cm)*((v)*(v));
    } } } } }; } if (_max > max) max = _max;
;
 avg += _avg;
;
 rms += _rms;
;
 volume += _volume;
;



}
# 143 "/home/e.sharaborin/basilisk/src/utils.h"
 }
  norm n;
  n.avg = volume ? avg/volume : 0.;
  n.rms = volume ? sqrt(rms/volume) : 0.;
  n.max = max;
  n.volume = volume;
  return n;
}





typedef struct {
  double min, max, sum, stddev, volume;
} stats;

stats statsf (scalar f)
{
  double min = 1e100, max = -1e100, sum = 0., sum2 = 0., volume = 0.;
   {


 {
double _sum = sum; double _sum2 = sum2; double _volume = volume; double _max = max; double _min = min;
# 163 "/home/e.sharaborin/basilisk/src/utils.h"

if (!((cm).i >= 65536)) {
# 163 "/home/e.sharaborin/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 164 "/home/e.sharaborin/basilisk/src/utils.h"

    if ((((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]) > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double)1e30)) {
      _volume += (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]);
      _sum += (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)])*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
      _sum2 += (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)])*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]));
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] > _max) _max = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < _min) _min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 163 "/home/e.sharaborin/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 164 "/home/e.sharaborin/basilisk/src/utils.h"

    if ((((Delta)*(Delta)*(Delta))*_const_cm) > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double)1e30)) {
      _volume += (((Delta)*(Delta)*(Delta))*_const_cm);
      _sum += (((Delta)*(Delta)*(Delta))*_const_cm)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
      _sum2 += (((Delta)*(Delta)*(Delta))*_const_cm)*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]));
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] > _max) _max = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < _min) _min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
    } } } } }; } sum += _sum;
;
 sum2 += _sum2;
;
 volume += _volume;
;
 if (_max > max) max = _max;
;
 if (_min < min) min = _min;
;



}
# 171 "/home/e.sharaborin/basilisk/src/utils.h"
 }
  if (volume > 0.){
    sum /= volume; sum2 /= volume;
  }
  sum2 -= ((sum)*(sum));
  stats s;
  s.min = min, s.max = max, s.sum = sum, s.volume = volume;
  s.stddev = sum2 > 0. ? sqrt(sum2) : 0.;
  fprintf(
# 179 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
         stderr
# 179 "/home/e.sharaborin/basilisk/src/utils.h"
             , "statsf: sum:%g sum2%g stddev:%g", sum, sum2, s.stddev);
  return s;
}
# 190 "/home/e.sharaborin/basilisk/src/utils.h"
static double generic_limiter (double r, double beta)
{
  double v1 = ((r) < (beta) ? (r) : (beta)), v2 = ((beta*r) < (1.) ? (beta*r) : (1.));
  v1 = ((0.) > (v1) ? (0.) : (v1));
  return ((v1) > (v2) ? (v1) : (v2));
}

double minmod (double s0, double s1, double s2) {
  return s1 == s0 ? 0. : generic_limiter ((s2 - s1)/(s1 - s0), 1.)*(s1 - s0);
}

double superbee (double s0, double s1, double s2) {
  return s1 == s0 ? 0. : generic_limiter ((s2 - s1)/(s1 - s0), 2.)*(s1 - s0);
}

double sweby (double s0, double s1, double s2) {
  return s1 == s0 ? 0. : generic_limiter ((s2 - s1)/(s1 - s0), 1.5)*(s1 - s0);
}
# 216 "/home/e.sharaborin/basilisk/src/utils.h"
double theta = 1.3;

double minmod2 (double s0, double s1, double s2)
{
  if (s0 < s1 && s1 < s2) {
    double d1 = theta*(s1 - s0), d2 = (s2 - s0)/2., d3 = theta*(s2 - s1);
    if (d2 < d1) d1 = d2;
    return ((d1) < (d3) ? (d1) : (d3));
  }
  if (s0 > s1 && s1 > s2) {
    double d1 = theta*(s1 - s0), d2 = (s2 - s0)/2., d3 = theta*(s2 - s1);
    if (d2 > d1) d1 = d2;
    return ((d1) > (d3) ? (d1) : (d3));
  }
  return 0.;
}
# 240 "/home/e.sharaborin/basilisk/src/utils.h"
void gradients (scalar * f, vector * g)
{
  
# 242 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
 ((
# 242 "/home/e.sharaborin/basilisk/src/utils.h"
 list_len(f) == vectors_len(g)
# 242 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 242 "/home/e.sharaborin/basilisk/src/utils.h"
 "list_len(f) == vectors_len(g)"
# 242 "/home/e.sharaborin/basilisk/src/utils.h" 3 4
 , "/home/e.sharaborin/basilisk/src/utils.h", 242, __extension__ __PRETTY_FUNCTION__))
# 242 "/home/e.sharaborin/basilisk/src/utils.h"
                                       ;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 243 "/home/e.sharaborin/basilisk/src/utils.h"
 {
    scalar s; vector v;
    scalar * _i0 = f; vector * _i1 = g; if (f) for (s = *f, v = *g; ((scalar *)&s)->i >= 0; s = *++_i0, v = *++_i1) {
      if (_attribute[s.i].gradient)
 {
# 247 "/home/e.sharaborin/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/Delta;
 }
# 247 "/home/e.sharaborin/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)])/Delta;
 }
# 247 "/home/e.sharaborin/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)])/Delta;
 }}
      else
 {
# 256 "/home/e.sharaborin/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta);
 }
# 256 "/home/e.sharaborin/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta);
 }
# 256 "/home/e.sharaborin/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)])/(2.*Delta);
 }}
    }
  } } } } }; }
  boundary ((scalar *) g);
}
# 278 "/home/e.sharaborin/basilisk/src/utils.h"
void vorticity (const vector u, scalar omega)
{
  struct { double x, y; } a = {1., -1.};
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 281 "/home/e.sharaborin/basilisk/src/utils.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(omega.i)] = 0.;
    {
# 283 "/home/e.sharaborin/basilisk/src/utils.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(omega.i)] += a.x*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/(2.*Delta));
# 283 "/home/e.sharaborin/basilisk/src/utils.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(omega.i)] += a.y*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/(2.*Delta));}
  } } } } }; }
  boundary (((scalar []){omega,{-1}}));
}





double change (scalar s, scalar sn)
{
  double max = 0.;
   {


 {
double _max = max;
# 296 "/home/e.sharaborin/basilisk/src/utils.h"

if (!((cm).i >= 65536)) {
# 296 "/home/e.sharaborin/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 296 "/home/e.sharaborin/basilisk/src/utils.h"
 {
    if ((((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]) > 0.) {
      double ds = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sn.i)]);
      if (ds > _max)
 _max = ds;
    }
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sn.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)];
  } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 296 "/home/e.sharaborin/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 296 "/home/e.sharaborin/basilisk/src/utils.h"
 {
    if ((((Delta)*(Delta)*(Delta))*_const_cm) > 0.) {
      double ds = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sn.i)]);
      if (ds > _max)
 _max = ds;
    }
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sn.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)];
  } } } } }; } if (_max > max) max = _max;
;



}
# 303 "/home/e.sharaborin/basilisk/src/utils.h"
 }
  return max;
}





scalar lookup_field (const char * name)
{
  if (name)
    if (all) for (scalar s = *all, *_i71 = all; ((scalar *)&s)->i >= 0; s = *++_i71)
      if (!strcmp (_attribute[s.i].name, name))
 return s;
  return (scalar){-1};
}

vector lookup_vector (const char * name)
{
  if (name) {
    char component[strlen(name) + 3];
    strcpy (component, name);
    strcat (component, ".x");
    if (all) for (scalar s = *all, *_i72 = all; ((scalar *)&s)->i >= 0; s = *++_i72)
      if (!strcmp (_attribute[s.i].name, component))
 return _attribute[s.i].v;
  }
  return (vector){{-1}};
}
# 365 "/home/e.sharaborin/basilisk/src/utils.h"
# 1 "./output.h"
# 1 "/home/e.sharaborin/basilisk/src/output.h"
# 37 "/home/e.sharaborin/basilisk/src/output.h"
struct OutputField {
  scalar * list;
  FILE * fp;
  int n;
  
# 41 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 41 "/home/e.sharaborin/basilisk/src/output.h"
      linear;
  double box[2][2];
};


void output_field (struct OutputField p)
{ ;
  if (!p.list) p.list = all;
  if (p.n == 0) p.n = N;
  if (!p.fp) p.fp = 
# 50 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                   stdout
# 50 "/home/e.sharaborin/basilisk/src/output.h"
                       ;
  p.n++;
  if (p.box[0][0] == 0. && p.box[0][1] == 0. &&
      p.box[1][0] == 0. && p.box[1][1] == 0.) {
    p.box[0][0] = X0; p.box[0][1] = Y0;
    p.box[1][0] = X0 + L0; p.box[1][1] = Y0 + L0;
  }

  int len = list_len(p.list);
  double Delta = 0.999999*(p.box[1][0] - p.box[0][0])/(p.n - 1);
  int ny = (p.box[1][1] - p.box[0][1])/Delta + 1;
  double ** field = (double **) matrix_new (p.n, ny, len*sizeof(double));
  for (int i = 0; i < p.n; i++) {
    double x = Delta*i + p.box[0][0];
    for (int j = 0; j < ny; j++) {
      double y = Delta*j + p.box[0][1];
      if (p.linear) {
 int k = 0;
 if (p.list) for (scalar s = *p.list, *_i73 = p.list; ((scalar *)&s)->i >= 0; s = *++_i73)
   field[i][len*j + k++] = interpolate ((struct _interpolate){s, x, y});
      }
      else {
 Point point = locate ((struct _locate){x, y}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 72 "/home/e.sharaborin/basilisk/src/output.h"

 int k = 0;
 if (p.list) for (scalar s = *p.list, *_i74 = p.list; ((scalar *)&s)->i >= 0; s = *++_i74)
   field[i][len*j + k++] = point.level >= 0 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] : ((double)1e30);
      }
    }
  }

  if (0 == 0) {




    fprintf (p.fp, "# 1:x 2:y");
    int i = 3;
    if (p.list) for (scalar s = *p.list, *_i75 = p.list; ((scalar *)&s)->i >= 0; s = *++_i75)
      fprintf (p.fp, " %d:%s", i++, _attribute[s.i].name);
    fputc('\n', p.fp);
    for (int i = 0; i < p.n; i++) {
      double x = Delta*i + p.box[0][0];
      for (int j = 0; j < ny; j++) {
 double y = Delta*j + p.box[0][1];

 fprintf (p.fp, "%g %g", x, y);
 int k = 0;
 if (p.list) for (scalar s = *p.list, *_i76 = p.list; ((scalar *)&s)->i >= 0; s = *++_i76)
   fprintf (p.fp, " %g", field[i][len*j + k++]);
 fputc ('\n', p.fp);
      }
      fputc ('\n', p.fp);
    }
    fflush (p.fp);
  }






  matrix_free (field);
 ; }
# 140 "/home/e.sharaborin/basilisk/src/output.h"
struct OutputMatrix {
  scalar f;
  FILE * fp;
  int n;
  
# 144 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 144 "/home/e.sharaborin/basilisk/src/output.h"
      linear;
};


void output_matrix (struct OutputMatrix p)
{ ;
  if (p.n == 0) p.n = N;
  if (!p.fp) p.fp = 
# 151 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                   stdout
# 151 "/home/e.sharaborin/basilisk/src/output.h"
                       ;
  float fn = p.n;
  float Delta = (float) L0/fn;
  fwrite (&fn, sizeof(float), 1, p.fp);
  for (int j = 0; j < p.n; j++) {
    float yp = (float) (Delta*j + X0 + Delta/2.);
    fwrite (&yp, sizeof(float), 1, p.fp);
  }
  for (int i = 0; i < p.n; i++) {
    float xp = (float) (Delta*i + X0 + Delta/2.);
    fwrite (&xp, sizeof(float), 1, p.fp);
    for (int j = 0; j < p.n; j++) {
      float yp = (float)(Delta*j + Y0 + Delta/2.), v;
      if (p.linear)
 v = interpolate ((struct _interpolate){p.f, xp, yp});
      else {
 Point point = locate ((struct _locate){xp, yp}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 167 "/home/e.sharaborin/basilisk/src/output.h"

 
# 168 "/home/e.sharaborin/basilisk/src/output.h" 3 4
((
# 168 "/home/e.sharaborin/basilisk/src/output.h"
point.level >= 0
# 168 "/home/e.sharaborin/basilisk/src/output.h" 3 4
) ? (void) (0) : __assert_fail (
# 168 "/home/e.sharaborin/basilisk/src/output.h"
"point.level >= 0"
# 168 "/home/e.sharaborin/basilisk/src/output.h" 3 4
, "/home/e.sharaborin/basilisk/src/output.h", 168, __extension__ __PRETTY_FUNCTION__))
# 168 "/home/e.sharaborin/basilisk/src/output.h"
                         ;
 v = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.f.i)];
      }
      fwrite (&v, sizeof(float), 1, p.fp);
    }
  }
  fflush (p.fp);
 ; }
# 184 "/home/e.sharaborin/basilisk/src/output.h"
typedef void (* colormap) (double cmap[127][3]);

void jet (double cmap[127][3])
{
  for (int i = 0; i < 127; i++) {
    cmap[i][0] =
      i <= 46 ? 0. :
      i >= 111 ? -0.03125*(i - 111) + 1. :
      i >= 78 ? 1. :
      0.03125*(i - 46);
    cmap[i][1] =
      i <= 14 || i >= 111 ? 0. :
      i >= 79 ? -0.03125*(i - 111) :
      i <= 46 ? 0.03125*(i - 14) :
      1.;
    cmap[i][2] =
      i >= 79 ? 0. :
      i >= 47 ? -0.03125*(i - 79) :
      i <= 14 ? 0.03125*(i - 14) + 1.:
      1.;
  }
}

void cool_warm (double cmap[127][3])
{






  static double basemap[33][3] = {
    {0.2298057, 0.298717966, 0.753683153},
    {0.26623388, 0.353094838, 0.801466763},
    {0.30386891, 0.406535296, 0.84495867},
    {0.342804478, 0.458757618, 0.883725899},
    {0.38301334, 0.50941904, 0.917387822},
    {0.424369608, 0.558148092, 0.945619588},
    {0.46666708, 0.604562568, 0.968154911},
    {0.509635204, 0.648280772, 0.98478814},
    {0.552953156, 0.688929332, 0.995375608},
    {0.596262162, 0.726149107, 0.999836203},
    {0.639176211, 0.759599947, 0.998151185},
    {0.681291281, 0.788964712, 0.990363227},
    {0.722193294, 0.813952739, 0.976574709},
    {0.761464949, 0.834302879, 0.956945269},
    {0.798691636, 0.849786142, 0.931688648},
    {0.833466556, 0.860207984, 0.901068838},
    {0.865395197, 0.86541021, 0.865395561},
    {0.897787179, 0.848937047, 0.820880546},
    {0.924127593, 0.827384882, 0.774508472},
    {0.944468518, 0.800927443, 0.726736146},
    {0.958852946, 0.769767752, 0.678007945},
    {0.96732803, 0.734132809, 0.628751763},
    {0.969954137, 0.694266682, 0.579375448},
    {0.966811177, 0.650421156, 0.530263762},
    {0.958003065, 0.602842431, 0.481775914},
    {0.943660866, 0.551750968, 0.434243684},
    {0.923944917, 0.49730856, 0.387970225},
    {0.89904617, 0.439559467, 0.343229596},
    {0.869186849, 0.378313092, 0.300267182},
    {0.834620542, 0.312874446, 0.259301199},
    {0.795631745, 0.24128379, 0.220525627},
    {0.752534934, 0.157246067, 0.184115123},
    {0.705673158, 0.01555616, 0.150232812}
  };

  for (int i = 0; i < 127; i++) {
    double x = i*(32 - 1e-10)/(127 - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void gray (double cmap[127][3])
{
  for (int i = 0; i < 127; i++)
    for (int k = 0; k < 3; k++)
      cmap[i][k] = i/(127 - 1.);
}

void randomap (double cmap[127][3])
{
  srand(0);
  for (int i = 0; i < 127; i++)
    for (int k = 0; k < 3; k++)
      cmap[i][k] = ((1. - 2.*rand()/(double)
# 271 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                   2147483647
# 271 "/home/e.sharaborin/basilisk/src/output.h"
                   ) + 1.)/2.;
}





typedef struct {
  unsigned char r, g, b;
} color;

color colormap_color (double cmap[127][3],
        double val, double min, double max)
{
  color c;
  if (val == ((double)1e30)) {
    c.r = c.g = c.b = 0;
    return c;
  }
  int i;
  double coef;
  if (max != min)
    val = (val - min)/(max - min);
  else
    val = 0.;
  if (val <= 0.) i = 0, coef = 0.;
  else if (val >= 1.) i = 127 - 2, coef = 1.;
  else {
    i = val*(127 - 1);
    coef = val*(127 - 1) - i;
  }
  
# 302 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ((
# 302 "/home/e.sharaborin/basilisk/src/output.h"
 i < 127 - 1
# 302 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 302 "/home/e.sharaborin/basilisk/src/output.h"
 "i < 127 - 1"
# 302 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 , "/home/e.sharaborin/basilisk/src/output.h", 302, __extension__ __PRETTY_FUNCTION__))
# 302 "/home/e.sharaborin/basilisk/src/output.h"
                     ;
  unsigned char * c1 = (unsigned char *) &c;
  for (int j = 0; j < 3; j++)
    c1[j] = 255*(cmap[i][j]*(1. - coef) + cmap[i + 1][j]*coef);
  return c;
}
# 321 "/home/e.sharaborin/basilisk/src/output.h"
static const char * extension (const char * file, const char * ext) {
  int len = strlen(file);
  return len > 4 && !strcmp (file + len - 4, ext) ? file + len - 4 : 
# 323 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                                                    ((void *)0)
# 323 "/home/e.sharaborin/basilisk/src/output.h"
                                                                        ;
}

static const char * is_animation (const char * file) {
  const char * ext;
  if ((ext = extension (file, ".mp4")) ||
      (ext = extension (file, ".ogv")) ||
      (ext = extension (file, ".gif")))
    return ext;
  return 
# 332 "/home/e.sharaborin/basilisk/src/output.h" 3 4
        ((void *)0)
# 332 "/home/e.sharaborin/basilisk/src/output.h"
            ;
}

static struct {
  FILE ** fp;
  char ** names;
  int n;
} open_image_data = {
# 339 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                    ((void *)0)
# 339 "/home/e.sharaborin/basilisk/src/output.h"
                        , 
# 339 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                          ((void *)0)
# 339 "/home/e.sharaborin/basilisk/src/output.h"
                              , 0};

static void open_image_cleanup()
{
  for (int i = 0; i < open_image_data.n; i++) {
    qpclose (open_image_data.fp[i]);
    free(open_image_data.names[i]);
  }
  free(open_image_data.fp);
  free(open_image_data.names);
  open_image_data.fp = 
# 349 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                      ((void *)0)
# 349 "/home/e.sharaborin/basilisk/src/output.h"
                          ;
  open_image_data.names = 
# 350 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                         ((void *)0)
# 350 "/home/e.sharaborin/basilisk/src/output.h"
                             ;
  open_image_data.n = 0;
}

static FILE * open_image_lookup (const char * file)
{
  for (int i = 0; i < open_image_data.n; i++)
    if (!strcmp (file, open_image_data.names[i]))
      return open_image_data.fp[i];
  return 
# 359 "/home/e.sharaborin/basilisk/src/output.h" 3 4
        ((void *)0)
# 359 "/home/e.sharaborin/basilisk/src/output.h"
            ;
}

static 
# 362 "/home/e.sharaborin/basilisk/src/output.h" 3 4
      _Bool 
# 362 "/home/e.sharaborin/basilisk/src/output.h"
           which (const char * command)
{
  char * s = getenv ("PATH");
  if (!s)
    return 
# 366 "/home/e.sharaborin/basilisk/src/output.h" 3 4
          0
# 366 "/home/e.sharaborin/basilisk/src/output.h"
               ;
  char path[strlen(s) + 1];
  strcpy (path, s);
  s = strtok (path, ":");
  while (s) {
    char f[strlen(s) + strlen(command) + 2];
    strcpy (f, s);
    strcat (f, "/");
    strcat (f, command);
    FILE * fp = fopen (f, "r");
    if (fp) {
      fclose (fp);
      return 
# 378 "/home/e.sharaborin/basilisk/src/output.h" 3 4
            1
# 378 "/home/e.sharaborin/basilisk/src/output.h"
                ;
    }
    s = strtok (
# 380 "/home/e.sharaborin/basilisk/src/output.h" 3 4
               ((void *)0)
# 380 "/home/e.sharaborin/basilisk/src/output.h"
                   , ":");
  }
  return 
# 382 "/home/e.sharaborin/basilisk/src/output.h" 3 4
        0
# 382 "/home/e.sharaborin/basilisk/src/output.h"
             ;
}

static FILE * ppm_fallback (const char * file, const char * mode)
{
  char filename[strlen(file) + 5];
  strcpy (filename, file);
  strcat (filename, ".ppm");
  FILE * fp = fopen (filename, mode);
  if (!fp) {
    perror (file);



    exit (1);
  }
  return fp;
}

FILE * open_image (const char * file, const char * options)
{
  
# 403 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ((
# 403 "/home/e.sharaborin/basilisk/src/output.h"
 0 == 0
# 403 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 403 "/home/e.sharaborin/basilisk/src/output.h"
 "pid() == 0"
# 403 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 , "/home/e.sharaborin/basilisk/src/output.h", 403, __extension__ __PRETTY_FUNCTION__))
# 403 "/home/e.sharaborin/basilisk/src/output.h"
                    ;
  const char * ext;
  if ((ext = is_animation (file))) {
    FILE * fp = open_image_lookup (file);
    if (fp)
      return fp;

    int len = strlen ("ppm2???    ") + strlen (file) +
      (options ? strlen (options) : 0);
    char command[len];
    strcpy (command, "ppm2"); strcat (command, ext + 1);

    static int has_ffmpeg = -1;
    if (has_ffmpeg < 0) {
      if (which (command) && (which ("ffmpeg") || which ("avconv")))
 has_ffmpeg = 
# 418 "/home/e.sharaborin/basilisk/src/output.h" 3 4
             1
# 418 "/home/e.sharaborin/basilisk/src/output.h"
                 ;
      else {
 fprintf (
# 420 "/home/e.sharaborin/basilisk/src/output.h" 3 4
         stderr
# 420 "/home/e.sharaborin/basilisk/src/output.h"
             ,
   "open_image(): cannot find '%s' or 'ffmpeg'/'avconv'\n"
   "  falling back to raw PPM outputs\n", command);
 has_ffmpeg = 
# 423 "/home/e.sharaborin/basilisk/src/output.h" 3 4
             0
# 423 "/home/e.sharaborin/basilisk/src/output.h"
                  ;
      }
    }
    if (!has_ffmpeg)
      return ppm_fallback (file, "a");

    static 
# 429 "/home/e.sharaborin/basilisk/src/output.h" 3 4
          _Bool 
# 429 "/home/e.sharaborin/basilisk/src/output.h"
               added = 
# 429 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                       0
# 429 "/home/e.sharaborin/basilisk/src/output.h"
                            ;
    if (!added) {
      free_solver_func_add (open_image_cleanup);
      added = 
# 432 "/home/e.sharaborin/basilisk/src/output.h" 3 4
             1
# 432 "/home/e.sharaborin/basilisk/src/output.h"
                 ;
    }
    open_image_data.n++;
    open_image_data.names = (char * *) realloc(open_image_data.names,(open_image_data.n)*sizeof(char *));
    open_image_data.names[open_image_data.n - 1] = strdup(file);

    if (options) {
      strcat (command, " ");
      strcat (command, options);
    }
    strcat (command, !strcmp (ext, ".mp4") ? " " : " > ");
    strcat (command, file);
    open_image_data.fp = (FILE * *) realloc(open_image_data.fp,(open_image_data.n)*sizeof(FILE *));
    return open_image_data.fp[open_image_data.n - 1] = qpopen (command, "w");
  }
  else {
    static int has_convert = -1;
    if (has_convert < 0) {
      if (which ("convert"))
 has_convert = 
# 451 "/home/e.sharaborin/basilisk/src/output.h" 3 4
              1
# 451 "/home/e.sharaborin/basilisk/src/output.h"
                  ;
      else {
 fprintf (
# 453 "/home/e.sharaborin/basilisk/src/output.h" 3 4
         stderr
# 453 "/home/e.sharaborin/basilisk/src/output.h"
             ,
   "open_image(): cannot find 'convert'\n"
   "  falling back to raw PPM outputs\n");
 has_convert = 
# 456 "/home/e.sharaborin/basilisk/src/output.h" 3 4
              0
# 456 "/home/e.sharaborin/basilisk/src/output.h"
                   ;
      }
    }
    if (!has_convert)
      return ppm_fallback (file, "w");

    int len = strlen ("convert ppm:-   ") + strlen (file) +
      (options ? strlen (options) : 0);
    char command[len];
    strcpy (command, "convert ppm:- ");
    if (options) {
      strcat (command, options);
      strcat (command, " ");
    }
    strcat (command, file);
    return qpopen (command, "w");
  }
}

void close_image (const char * file, FILE * fp)
{
  
# 477 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ((
# 477 "/home/e.sharaborin/basilisk/src/output.h"
 0 == 0
# 477 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 477 "/home/e.sharaborin/basilisk/src/output.h"
 "pid() == 0"
# 477 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 , "/home/e.sharaborin/basilisk/src/output.h", 477, __extension__ __PRETTY_FUNCTION__))
# 477 "/home/e.sharaborin/basilisk/src/output.h"
                    ;
  if (is_animation (file)) {
    if (!open_image_lookup (file))
      fclose (fp);
  }
  else if (which ("convert"))
    qpclose (fp);
  else
    fclose (fp);
}
# 552 "/home/e.sharaborin/basilisk/src/output.h"
struct OutputPPM {
  scalar f;
  FILE * fp;
  int n;
  char * file;
  double min, max, spread, z;
  
# 558 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 558 "/home/e.sharaborin/basilisk/src/output.h"
      linear;
  double box[2][2];
  scalar mask;
  colormap map;
  char * opt;
};


void output_ppm (struct OutputPPM p)
{ ;

  if (p.n == 0) p.n = N;
  if (p.min == 0 && p.max == 0) {
    stats s = statsf (p.f);
    if (p.spread < 0.)
      p.min = s.min, p.max = s.max;
    else {
      double avg = s.sum/s.volume, spread = (p.spread ? p.spread : 5.)*s.stddev;
      p.min = avg - spread; p.max = avg + spread;
    }
  }
  if (p.box[0][0] == 0. && p.box[0][1] == 0. &&
      p.box[1][0] == 0. && p.box[1][1] == 0.) {
    p.box[0][0] = X0; p.box[0][1] = Y0;
    p.box[1][0] = X0 + L0; p.box[1][1] = Y0 + L0;
  }
  if (!p.map)
    p.map = jet;

  double fn = p.n;
  double Delta = (p.box[1][0] - p.box[0][0])/fn;
  int ny = (p.box[1][1] - p.box[0][1])/Delta;
  if (ny % 2) ny++;

  color ** ppm = (color **) matrix_new (ny, p.n, sizeof(color));
  double cmap[127][3];
  p.map (cmap);
  {
   
      for (int j = 0; j < ny; j++) {
 double yp = Delta*j + p.box[0][1] + Delta/2.;
 for (int i = 0; i < p.n; i++) {
   double xp = Delta*i + p.box[0][0] + Delta/2., v;
   if (p.mask.i) {
     if (p.linear) {
       double m = interpolate ((struct _interpolate){p.mask, xp, yp, p.z});
       if (m < 0.)
  v = ((double)1e30);
       else
  v = interpolate ((struct _interpolate){p.f, xp, yp, p.z});
     }
     else {
       Point point = locate ((struct _locate){xp, yp, p.z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 610 "/home/e.sharaborin/basilisk/src/output.h"

       if (point.level < 0 || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.mask.i)] < 0.)
  v = ((double)1e30);
       else
  v = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.f.i)];
     }
   }
   else if (p.linear)
     v = interpolate ((struct _interpolate){p.f, xp, yp, p.z});
   else {
     Point point = locate ((struct _locate){xp, yp, p.z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 620 "/home/e.sharaborin/basilisk/src/output.h"

     v = point.level >= 0 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.f.i)] : ((double)1e30);
   }
   ppm[ny - 1 - j][i] = colormap_color (cmap, v, p.min, p.max);
 }
      }
  }

  if (0 == 0) {




    if (!p.fp) p.fp = 
# 633 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                     stdout
# 633 "/home/e.sharaborin/basilisk/src/output.h"
                         ;
    if (p.file)
      p.fp = open_image (p.file, p.opt);

    fprintf (p.fp, "P6\n%u %u 255\n", p.n, ny);
    fwrite (((void **) ppm)[0], sizeof(color), ny*p.n, p.fp);

    if (p.file)
      close_image (p.file, p.fp);
    else
      fflush (p.fp);
  }






  matrix_free (ppm);
 ; }
# 684 "/home/e.sharaborin/basilisk/src/output.h"
struct OutputGRD {
  scalar f;
  FILE * fp;
  double Delta;
  
# 688 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 688 "/home/e.sharaborin/basilisk/src/output.h"
      linear;
  double box[2][2];
  scalar mask;
};


void output_grd (struct OutputGRD p)
{ ;

  if (!p.fp) p.fp = 
# 697 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                   stdout
# 697 "/home/e.sharaborin/basilisk/src/output.h"
                       ;
  if (p.box[0][0] == 0. && p.box[0][1] == 0. &&
      p.box[1][0] == 0. && p.box[1][1] == 0.) {
    p.box[0][0] = X0; p.box[0][1] = Y0;
    p.box[1][0] = X0 + L0; p.box[1][1] = Y0 + L0;
    if (p.Delta == 0) p.Delta = L0/N;
  }

  double Delta = p.Delta;
  int nx = (p.box[1][0] - p.box[0][0])/Delta;
  int ny = (p.box[1][1] - p.box[0][1])/Delta;


  fprintf (p.fp, "ncols          %d\n", nx);
  fprintf (p.fp, "nrows          %d\n", ny);
  fprintf (p.fp, "xllcorner      %g\n", p.box[0][0]);
  fprintf (p.fp, "yllcorner      %g\n", p.box[0][1]);
  fprintf (p.fp, "cellsize       %g\n", Delta);
  fprintf (p.fp, "nodata_value   -9999\n");


  for (int j = ny-1; j >= 0; j--) {
    double yp = Delta*j + p.box[0][1] + Delta/2.;
    for (int i = 0; i < nx; i++) {
      double xp = Delta*i + p.box[0][0] + Delta/2., v;
      if (p.mask.i) {
 if (p.linear) {
   double m = interpolate ((struct _interpolate){p.mask, xp, yp});
   if (m < 0.)
     v = ((double)1e30);
   else
     v = interpolate ((struct _interpolate){p.f, xp, yp});
 }
 else {
   Point point = locate ((struct _locate){xp, yp}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 731 "/home/e.sharaborin/basilisk/src/output.h"

   if (point.level < 0 || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.mask.i)] < 0.)
     v = ((double)1e30);
   else
     v = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.f.i)];
 }
      }
      else if (p.linear)
 v = interpolate ((struct _interpolate){p.f, xp, yp});
      else {
 Point point = locate ((struct _locate){xp, yp}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 741 "/home/e.sharaborin/basilisk/src/output.h"

 v = point.level >= 0 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.f.i)] : ((double)1e30);
      }
      if (v == ((double)1e30))
 fprintf (p.fp, "-9999 ");
      else
 fprintf (p.fp, "%f ", v);
    }
    fprintf (p.fp, "\n");
  }

  fflush (p.fp);
 ; }
# 780 "/home/e.sharaborin/basilisk/src/output.h"
struct OutputGfs {
  FILE * fp;
  scalar * list;
  double t;
  char * file;
  
# 785 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 785 "/home/e.sharaborin/basilisk/src/output.h"
      translate;
};

static char * replace (const char * input, int target, int with,
         
# 789 "/home/e.sharaborin/basilisk/src/output.h" 3 4
        _Bool 
# 789 "/home/e.sharaborin/basilisk/src/output.h"
             translate)
{
  if (translate) {
    if (!strcmp (input, "u.x"))
      return strdup("U");
    if (!strcmp (input, "u.y"))
      return strdup("V");
    if (!strcmp (input, "u.z"))
      return strdup("W");
  }
  char * name = strdup(input), * i = name;
  while (*i != '\0') {
    if (*i == target)
      *i = with;
    i++;
  }
  return name;
}


void output_gfs (struct OutputGfs p)
{ ;
  char * fname = p.file;
# 827 "/home/e.sharaborin/basilisk/src/output.h"
  
# 827 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 827 "/home/e.sharaborin/basilisk/src/output.h"
      opened = 
# 827 "/home/e.sharaborin/basilisk/src/output.h" 3 4
               0
# 827 "/home/e.sharaborin/basilisk/src/output.h"
                    ;
  if (p.fp == 
# 828 "/home/e.sharaborin/basilisk/src/output.h" 3 4
             ((void *)0)
# 828 "/home/e.sharaborin/basilisk/src/output.h"
                 ) {
    if (fname == 
# 829 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                ((void *)0)
# 829 "/home/e.sharaborin/basilisk/src/output.h"
                    )
      p.fp = 
# 830 "/home/e.sharaborin/basilisk/src/output.h" 3 4
            stdout
# 830 "/home/e.sharaborin/basilisk/src/output.h"
                ;
    else if (!(p.fp = fopen (fname, "w"))) {
      perror (fname);
      exit (1);
    }
    else
      opened = 
# 836 "/home/e.sharaborin/basilisk/src/output.h" 3 4
              1
# 836 "/home/e.sharaborin/basilisk/src/output.h"
                  ;
  }

  scalar * list = p.list ? p.list : list_copy (all);

  restriction (list);
  fprintf (p.fp,
    "1 0 GfsSimulation GfsBox GfsGEdge { binary = 1"
    " x = %g y = %g ",
    0.5 + X0/L0, 0.5 + Y0/L0);

  fprintf (p.fp, "z = %g ", 0.5 + Z0/L0);


  if (list != 
# 850 "/home/e.sharaborin/basilisk/src/output.h" 3 4
             ((void *)0) 
# 850 "/home/e.sharaborin/basilisk/src/output.h"
                  && list[0].i != -1) {
    scalar s = list[0];
    char * name = replace (_attribute[s.i].name, '.', '_', p.translate);
    fprintf (p.fp, "variables = %s", name);
    free(name);
    for (int i = 1; i < list_len(list); i++) {
      scalar s = list[i];
      if (_attribute[s.i].name) {
 char * name = replace (_attribute[s.i].name, '.', '_', p.translate);
 fprintf (p.fp, ",%s", name);
 free(name);
      }
    }
    fprintf (p.fp, " ");
  }
  fprintf (p.fp, "} {\n");
  fprintf (p.fp, "  Time { t = %g }\n", t);
  if (L0 != 1.)
    fprintf (p.fp, "  PhysicalParams { L = %g }\n", L0);
  fprintf (p.fp, "  VariableTracerVOF f\n");
  fprintf (p.fp, "}\nGfsBox { x = 0 y = 0 z = 0 } {\n");
# 888 "/home/e.sharaborin/basilisk/src/output.h"
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 888 "/home/e.sharaborin/basilisk/src/output.h"
 {



    {






      unsigned flags =
 level == 0 ? 0 :
# 909 "/home/e.sharaborin/basilisk/src/output.h"
      child.x == -1 && child.y == -1 && child.z == -1 ? 0 :
 child.x == -1 && child.y == -1 && child.z == 1 ? 1 :
 child.x == -1 && child.y == 1 && child.z == -1 ? 2 :
 child.x == -1 && child.y == 1 && child.z == 1 ? 3 :
 child.x == 1 && child.y == -1 && child.z == -1 ? 4 :
 child.x == 1 && child.y == -1 && child.z == 1 ? 5 :
 child.x == 1 && child.y == 1 && child.z == -1 ? 6 :
 7;

      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
 flags |= (1 << 4);
      fwrite (&flags, sizeof (unsigned), 1, p.fp);
      double a = -1;
      fwrite (&a, sizeof (double), 1, p.fp);
      if (list) for (scalar s = *list, *_i78 = list; ((scalar *)&s)->i >= 0; s = *++_i78)
 if (_attribute[s.i].name) {
   if (_attribute[s.i].v.x.i >= 0) {




     if (_attribute[s.i].v.x.i == s.i) {
       s = _attribute[s.i].v.y;
       a = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] != ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] : (double) ((double)1.79769313486231570814527423731704357e+308L);
     }
     else if (_attribute[s.i].v.y.i == s.i) {
       s = _attribute[s.i].v.x;
       a = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] != ((double)1e30) ? - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] : (double) ((double)1.79769313486231570814527423731704357e+308L);
     }


     else
       a = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] != ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] : (double) ((double)1.79769313486231570814527423731704357e+308L);

   }
   else
     a = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] != ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] : (double) ((double)1.79769313486231570814527423731704357e+308L);
   fwrite (&a, sizeof (double), 1, p.fp);
 }
    }
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
# 961 "/home/e.sharaborin/basilisk/src/output.h"
    fputs ("}\n", p.fp);
  fflush (p.fp);

  if (!p.list)
    free(list);
  if (opened)
    fclose (p.fp);
# 986 "/home/e.sharaborin/basilisk/src/output.h"
 ; }
# 1010 "/home/e.sharaborin/basilisk/src/output.h"
struct Dump {
  char * file;
  scalar * list;
  FILE * fp;
  
# 1014 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 1014 "/home/e.sharaborin/basilisk/src/output.h"
      unbuffered;
};

struct DumpHeader {
  double t;
  long len;
  int i, depth, npe, version;
  coord n;
};

static const int dump_version =

  170901;

static scalar * dump_list (scalar * lista)
{
  scalar * list = ((cm).i >= 65536) ? 
# 1030 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                   ((void *)0) 
# 1030 "/home/e.sharaborin/basilisk/src/output.h"
                                        : list_concat (((scalar []){cm,{-1}}), 
# 1030 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                                                               ((void *)0)
# 1030 "/home/e.sharaborin/basilisk/src/output.h"
                                                                                   );
  if (lista) for (scalar s = *lista, *_i79 = lista; ((scalar *)&s)->i >= 0; s = *++_i79)
    if (!_attribute[s.i].face && !_attribute[s.i].nodump && s.i != cm.i)
      list = list_add (list, s);
  return list;
}

static void dump_header (FILE * fp, struct DumpHeader * header, scalar * list)
{
  if (fwrite (header, sizeof(struct DumpHeader), 1, fp) < 1) {
    perror ("dump(): error while writing header");
    exit (1);
  }
  if (list) for (scalar s = *list, *_i80 = list; ((scalar *)&s)->i >= 0; s = *++_i80) {
    unsigned len = strlen(_attribute[s.i].name);
    if (fwrite (&len, sizeof(unsigned), 1, fp) < 1) {
      perror ("dump(): error while writing len");
      exit (1);
    }
    if (fwrite (_attribute[s.i].name, sizeof(char), len, fp) < len) {
      perror ("dump(): error while writing s.name");
      exit (1);
    }
  }
  double o[4] = {X0,Y0,Z0,L0};
  if (fwrite (o, sizeof(double), 4, fp) < 4) {
    perror ("dump(): error while writing coordinates");
    exit (1);
  }
}



void dump (struct Dump p)
{ ;
  FILE * fp = p.fp;
  char def[] = "dump", * file = p.file ? p.file : p.fp ? 
# 1066 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                                        ((void *)0) 
# 1066 "/home/e.sharaborin/basilisk/src/output.h"
                                                             : def;

  char * name = 
# 1068 "/home/e.sharaborin/basilisk/src/output.h" 3 4
               ((void *)0)
# 1068 "/home/e.sharaborin/basilisk/src/output.h"
                   ;
  if (file) {
    name = (char *) malloc(strlen(file) + 2);
    strcpy (name, file);
    if (!p.unbuffered)
      strcat (name, "~");
    if ((fp = fopen (name, "w")) == 
# 1074 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                   ((void *)0)
# 1074 "/home/e.sharaborin/basilisk/src/output.h"
                                       ) {
      perror (name);
      exit (1);
    }
  }
  
# 1079 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ((
# 1079 "/home/e.sharaborin/basilisk/src/output.h"
 fp
# 1079 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 1079 "/home/e.sharaborin/basilisk/src/output.h"
 "fp"
# 1079 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 , "/home/e.sharaborin/basilisk/src/output.h", 1079, __extension__ __PRETTY_FUNCTION__))
# 1079 "/home/e.sharaborin/basilisk/src/output.h"
            ;

  scalar * dlist = dump_list (p.list ? p.list : all);
  scalar size= new_scalar("size");
  scalar * list = list_concat (((scalar []){size,{-1}}), dlist); free(dlist);
  struct DumpHeader header = { t, list_len(list), iter, (grid->depth), 1,
          dump_version };
  dump_header (fp, &header, list);

  subtree_size (size, 
# 1088 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                     0
# 1088 "/home/e.sharaborin/basilisk/src/output.h"
                          );

   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 1090 "/home/e.sharaborin/basilisk/src/output.h"
 {
    unsigned flags = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf) ? leaf : 0;
    if (fwrite (&flags, sizeof(unsigned), 1, fp) < 1) {
      perror ("dump(): error while writing flags");
      exit (1);
    }
    if (list) for (scalar s = *list, *_i81 = list; ((scalar *)&s)->i >= 0; s = *++_i81)
      if (fwrite (&((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], sizeof(double), 1, fp) < 1) {
 perror ("dump(): error while writing scalars");
 exit (1);
      }
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }

  free(list);
  if (file) {
    fclose (fp);
    if (!p.unbuffered)
      rename (name, file);
    free(name);
  }
 delete (((scalar []){size,{-1}})); ; }
# 1193 "/home/e.sharaborin/basilisk/src/output.h"

# 1193 "/home/e.sharaborin/basilisk/src/output.h" 3 4
_Bool 
# 1193 "/home/e.sharaborin/basilisk/src/output.h"
    restore (struct Dump p)
{ ;
  FILE * fp = p.fp;
  char * file = p.file;
  if (file && (fp = fopen (file, "r")) == 
# 1197 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                         ((void *)0)
# 1197 "/home/e.sharaborin/basilisk/src/output.h"
                                             )
    { 
# 1198 "/home/e.sharaborin/basilisk/src/output.h" 3 4
     _Bool 
# 1198 "/home/e.sharaborin/basilisk/src/output.h"
          _ret = 
# 1198 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                  0
# 1198 "/home/e.sharaborin/basilisk/src/output.h"
                       ; ; return _ret; }
  
# 1199 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ((
# 1199 "/home/e.sharaborin/basilisk/src/output.h"
 fp
# 1199 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 1199 "/home/e.sharaborin/basilisk/src/output.h"
 "fp"
# 1199 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 , "/home/e.sharaborin/basilisk/src/output.h", 1199, __extension__ __PRETTY_FUNCTION__))
# 1199 "/home/e.sharaborin/basilisk/src/output.h"
            ;

  struct DumpHeader header;
  if (fread (&header, sizeof(header), 1, fp) < 1) {
    fprintf (
# 1203 "/home/e.sharaborin/basilisk/src/output.h" 3 4
            stderr
# 1203 "/home/e.sharaborin/basilisk/src/output.h"
                , "restore(): error: expecting header\n");
    exit (1);
  }


  init_grid (1);
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 1206 "/home/e.sharaborin/basilisk/src/output.h"
 {
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid = 0;
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= active;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  ((Tree *)grid)->dirty = 
# 1210 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                         1
# 1210 "/home/e.sharaborin/basilisk/src/output.h"
                             ;
# 1231 "/home/e.sharaborin/basilisk/src/output.h"
  
# 1231 "/home/e.sharaborin/basilisk/src/output.h" 3 4
 _Bool 
# 1231 "/home/e.sharaborin/basilisk/src/output.h"
      restore_all = (p.list == all);
  scalar * list = dump_list (p.list ? p.list : all);
  if (header.version == 161020) {
    if (header.len - 1 != list_len (list)) {
      fprintf (
# 1235 "/home/e.sharaborin/basilisk/src/output.h" 3 4
              stderr
# 1235 "/home/e.sharaborin/basilisk/src/output.h"
                  ,
        "restore(): error: the list lengths don't match: "
        "%ld (file) != %d (code)\n",
        header.len - 1, list_len (list));
      exit (1);
    }
  }
  else {
    if (header.version != dump_version) {
      fprintf (
# 1244 "/home/e.sharaborin/basilisk/src/output.h" 3 4
              stderr
# 1244 "/home/e.sharaborin/basilisk/src/output.h"
                  ,
        "restore(): error: file version mismatch: "
        "%d (file) != %d (code)\n",
        header.version, dump_version);
      exit (1);
    }

    scalar * input = 
# 1251 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                    ((void *)0)
# 1251 "/home/e.sharaborin/basilisk/src/output.h"
                        ;
    for (int i = 0; i < header.len; i++) {
      unsigned len;
      if (fread (&len, sizeof(unsigned), 1, fp) < 1) {
 fprintf (
# 1255 "/home/e.sharaborin/basilisk/src/output.h" 3 4
         stderr
# 1255 "/home/e.sharaborin/basilisk/src/output.h"
             , "restore(): error: expecting len\n");
 exit (1);
      }
      char name[len + 1];
      if (fread (name, sizeof(char), len, fp) < 1) {
 fprintf (
# 1260 "/home/e.sharaborin/basilisk/src/output.h" 3 4
         stderr
# 1260 "/home/e.sharaborin/basilisk/src/output.h"
             , "restore(): error: expecting s.name\n");
 exit (1);
      }
      name[len] = '\0';

      if (i > 0) {
 
# 1266 "/home/e.sharaborin/basilisk/src/output.h" 3 4
_Bool 
# 1266 "/home/e.sharaborin/basilisk/src/output.h"
     found = 
# 1266 "/home/e.sharaborin/basilisk/src/output.h" 3 4
             0
# 1266 "/home/e.sharaborin/basilisk/src/output.h"
                  ;
 if (list) for (scalar s = *list, *_i84 = list; ((scalar *)&s)->i >= 0; s = *++_i84)
   if (!strcmp (_attribute[s.i].name, name)) {
     input = list_append (input, s);
     found = 
# 1270 "/home/e.sharaborin/basilisk/src/output.h" 3 4
            1
# 1270 "/home/e.sharaborin/basilisk/src/output.h"
                ; break;
   }
 if (!found) {
   if (restore_all) {
     scalar s = new_scalar("s");
     free(_attribute[s.i].name);
     _attribute[s.i].name = strdup(name);
     input = list_append (input, s);
   }
   else
     input = list_append (input, (scalar){0x7fffffff});
 }
      }
    }
    free(list);
    list = input;

    double o[4];
    if (fread (o, sizeof(double), 4, fp) < 4) {
      fprintf (
# 1289 "/home/e.sharaborin/basilisk/src/output.h" 3 4
              stderr
# 1289 "/home/e.sharaborin/basilisk/src/output.h"
                  , "restore(): error: expecting coordinates\n");
      exit (1);
    }
    origin ((struct _origin){o[0], o[1], o[2]});
    size (o[3]);
  }
# 1306 "/home/e.sharaborin/basilisk/src/output.h"
  scalar * listm = ((cm).i >= 65536) ? 
# 1306 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                    ((void *)0) 
# 1306 "/home/e.sharaborin/basilisk/src/output.h"
                                         : (scalar *)((vector []){{fm.x,fm.y,fm.z},{{-1},{-1},{-1}}});



   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 1310 "/home/e.sharaborin/basilisk/src/output.h"
 {
    unsigned flags;
    if (fread (&flags, sizeof(unsigned), 1, fp) != 1) {
      fprintf (
# 1313 "/home/e.sharaborin/basilisk/src/output.h" 3 4
              stderr
# 1313 "/home/e.sharaborin/basilisk/src/output.h"
                  , "restore(): error: expecting 'flags'\n");
      exit (1);
    }

    fseek (fp, sizeof(double), 
# 1317 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                              1
# 1317 "/home/e.sharaborin/basilisk/src/output.h"
                                      );
    if (list) for (scalar s = *list, *_i85 = list; ((scalar *)&s)->i >= 0; s = *++_i85) {
      double val;
      if (fread (&val, sizeof(double), 1, fp) != 1) {
 fprintf (
# 1321 "/home/e.sharaborin/basilisk/src/output.h" 3 4
         stderr
# 1321 "/home/e.sharaborin/basilisk/src/output.h"
             , "restore(): error: expecting a scalar\n");
 exit (1);
      }
      if (s.i != 0x7fffffff)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = val;
    }
    if (!(flags & leaf) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
      refine_cell (point, listm, 0, 
# 1328 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                   ((void *)0)
# 1328 "/home/e.sharaborin/basilisk/src/output.h"
                                       );
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  boundary (list);

  boundary (listm);

  scalar * other = 
# 1336 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                  ((void *)0)
# 1336 "/home/e.sharaborin/basilisk/src/output.h"
                      ;
  if (all) for (scalar s = *all, *_i86 = all; ((scalar *)&s)->i >= 0; s = *++_i86)
    if (!list_lookup (list, s) && !list_lookup (listm, s))
      other = list_append (other, s);
  reset (other, 0.);
  free(other);

  free(list);
  if (file)
    fclose (fp);


  while (iter < header.i && events (
# 1348 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                   0
# 1348 "/home/e.sharaborin/basilisk/src/output.h"
                                        ))
    iter = inext;
  events (
# 1350 "/home/e.sharaborin/basilisk/src/output.h" 3 4
         0
# 1350 "/home/e.sharaborin/basilisk/src/output.h"
              );
  while (t < header.t && events (
# 1351 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                                0
# 1351 "/home/e.sharaborin/basilisk/src/output.h"
                                     ))
    t = tnext;
  t = header.t;
  events (
# 1354 "/home/e.sharaborin/basilisk/src/output.h" 3 4
         0
# 1354 "/home/e.sharaborin/basilisk/src/output.h"
              );

  { 
# 1356 "/home/e.sharaborin/basilisk/src/output.h" 3 4
   _Bool 
# 1356 "/home/e.sharaborin/basilisk/src/output.h"
        _ret = 
# 1356 "/home/e.sharaborin/basilisk/src/output.h" 3 4
                1
# 1356 "/home/e.sharaborin/basilisk/src/output.h"
                    ; ; return _ret; }
 ; }
# 369 "/home/e.sharaborin/basilisk/src/utils.h"
# 12 "/home/e.sharaborin/basilisk/src/run.h"


void run (void)
{ ;
  iter = 0, t = 0., dt = 1.;
  init_grid (N);

  perf.nc = perf.tnc = 0;
  perf.gt = timer_start();
  while (events (
# 21 "/home/e.sharaborin/basilisk/src/run.h" 3 4
                1
# 21 "/home/e.sharaborin/basilisk/src/run.h"
                    )) {





    update_perf();
    iter = inext, t = tnext;
  }




  timer_print (perf.gt, iter, perf.tnc);

  free_grid();
 ; }




static int defaults_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i = 0); *ip = i; *tp = t; return ret; } static int defaults (const int i, const double t, Event * _ev) { ; {
  display ((struct _display){"box();"});
 ; } return 0; }





static int cleanup_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (t = 1234567890); *ip = i; *tp = t; return ret; } static int cleanup (const int i, const double t, Event * _ev) { ; {
  display ((struct _display){"", 
# 51 "/home/e.sharaborin/basilisk/src/run.h" 3 4
                                1
# 51 "/home/e.sharaborin/basilisk/src/run.h"
                                    });
 ; } return 0; }
# 36 "./../src_local/centered-weugene.h"
# 1 "./timestep.h"
# 1 "/home/e.sharaborin/basilisk/src/timestep.h"

double timestep (const vector u, double dtmax)
{
  static double previous = 0.;
  double DTMAX = dtmax;
  dtmax /= CFL;
   {


 {
double _dtmax = dtmax;
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"

if (!((cm).i >= 65536)) {
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] != 0.) {
      double dt = Delta/fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]);




      dt *= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)];

      if (dt < _dtmax) _dtmax = dt;
    } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] != 0.) {
      double dt = Delta/fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]);




      dt *= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)];

      if (dt < _dtmax) _dtmax = dt;
    } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] != 0.) {
      double dt = Delta/fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]);




      dt *= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)];

      if (dt < _dtmax) _dtmax = dt;
    } } }} } } }
# 17 "/home/e.sharaborin/basilisk/src/timestep.h"
 ; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] != 0.) {
      double dt = Delta/fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]);




      dt *= _const_cm;

      if (dt < _dtmax) _dtmax = dt;
    } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] != 0.) {
      double dt = Delta/fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]);




      dt *= _const_cm;

      if (dt < _dtmax) _dtmax = dt;
    } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"
{
# 7 "/home/e.sharaborin/basilisk/src/timestep.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] != 0.) {
      double dt = Delta/fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]);




      dt *= _const_cm;

      if (dt < _dtmax) _dtmax = dt;
    } } }} } } }
# 17 "/home/e.sharaborin/basilisk/src/timestep.h"
 ; } if (_dtmax < dtmax) dtmax = _dtmax;
;



}
# 17 "/home/e.sharaborin/basilisk/src/timestep.h"
 }
  dtmax *= CFL;
  if (dtmax > previous)
    dtmax = (previous + 0.1*dtmax)/1.1;
  if (dtmax > DTMAX) dtmax=DTMAX;
  fprintf(
# 22 "/home/e.sharaborin/basilisk/src/timestep.h" 3 4
         stderr
# 22 "/home/e.sharaborin/basilisk/src/timestep.h"
             , "timestep: dtmax=%g DTMAX=%g\n", dtmax, DTMAX);
  previous = dtmax;
  return dtmax;
}
# 37 "./../src_local/centered-weugene.h"
# 1 "./bcg.h"
# 1 "/home/e.sharaborin/basilisk/src/bcg.h"
# 11 "/home/e.sharaborin/basilisk/src/bcg.h"
void tracer_fluxes (scalar f,
      vector uf,
      vector flux,
      double dt,
       scalar src)
{





  vector g= new_vector("g");
  gradients (((scalar []){f,{-1}}), ((vector []){{g.x,g.y,g.z},{{-1},{-1},{-1}}}));




   {
if (!((fm.x).i >= 65536) && !((src).i >= 65536)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)]*Delta/2.;





    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(src.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(g.y.i)]*Delta/2.;





    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.y.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(src.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(g.z.i)]*Delta/2.;





    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)]) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)]);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.y.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(fm.y.i)]) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(uf.y.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(fm.y.i)]);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.z.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
  } } }} } } }
# 59 "/home/e.sharaborin/basilisk/src/bcg.h"
 ; }
if (((fm.x).i >= 65536) && !((src).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]/(_const_fm.x*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)]*Delta/2.;





    if (_const_fm.y && _const_fm.y) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)])/(_const_fm.y + _const_fm.y);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (_const_fm.z && _const_fm.z) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(_const_fm.z + _const_fm.z);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]/(_const_fm.y*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(src.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(g.y.i)]*Delta/2.;





    if (_const_fm.z && _const_fm.z) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(_const_fm.z + _const_fm.z);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (_const_fm.x && _const_fm.x) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)])/(_const_fm.x + _const_fm.x);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.y.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]/(_const_fm.z*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(src.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(src.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(g.z.i)]*Delta/2.;





    if (_const_fm.x && _const_fm.x) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)])/(_const_fm.x + _const_fm.x);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (_const_fm.y && _const_fm.y) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(uf.y.i)])/(_const_fm.y + _const_fm.y);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.z.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
  } } }} } } }
# 59 "/home/e.sharaborin/basilisk/src/bcg.h"
 ; }
if (!((fm.x).i >= 65536) && ((src).i >= 65536)) {
# 79 "/home/e.sharaborin/basilisk/src/bcg.h"
const double _const_src = _constant[src.i -65536];
(void)(_const_src);
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] + (_const_src + _const_src)*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)]*Delta/2.;





    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] + (_const_src + _const_src)*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(g.y.i)]*Delta/2.;





    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.y.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] + (_const_src + _const_src)*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(g.z.i)]*Delta/2.;





    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)]) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)]);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.y.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(fm.y.i)]) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(uf.y.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(fm.y.i)]);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.z.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
  } } }} } } }
# 59 "/home/e.sharaborin/basilisk/src/bcg.h"
 ; }
if (((fm.x).i >= 65536) && ((src).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 81 "/home/e.sharaborin/basilisk/src/bcg.h"
const double _const_src = _constant[src.i -65536];
(void)(_const_src);
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]/(_const_fm.x*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] + (_const_src + _const_src)*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)]*Delta/2.;





    if (_const_fm.y && _const_fm.y) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)])/(_const_fm.y + _const_fm.y);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (_const_fm.z && _const_fm.z) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(_const_fm.z + _const_fm.z);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]/(_const_fm.y*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] + (_const_src + _const_src)*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(g.y.i)]*Delta/2.;





    if (_const_fm.z && _const_fm.z) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(uf.z.i)])/(_const_fm.z + _const_fm.z);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+-1]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (_const_fm.x && _const_fm.x) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(uf.x.i)])/(_const_fm.x + _const_fm.x);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+i] [point.k+0]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.y.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
{
# 28 "/home/e.sharaborin/basilisk/src/bcg.h"
 {







    double un = dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]/(_const_fm.z*Delta + 0.), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    double f2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] + (_const_src + _const_src)*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(g.z.i)]*Delta/2.;





    if (_const_fm.x && _const_fm.x) {
      double vn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.x.i)])/(_const_fm.x + _const_fm.x);
      double fyy = vn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*vn*fyy/(2.*Delta);
    }


    if (_const_fm.y && _const_fm.y) {
      double wn = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(uf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(uf.y.i)])/(_const_fm.y + _const_fm.y);
      double fzz = wn < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+i]) + sizeof(Cell)))[(f.i)];
      f2 -= dt*wn*fzz/(2.*Delta);
    }


    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.z.i)] = f2*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
  } } }} } } }
# 59 "/home/e.sharaborin/basilisk/src/bcg.h"
 ; } }





  boundary_flux (((vector []){{flux.x,flux.y,flux.z},{{-1},{-1},{-1}}}));
 delete (((scalar []){g.x,g.y,g.z,{-1}})); }






struct Advection {
  scalar * tracers;
  vector u;
  double dt;
  scalar * src;
};

void advection (struct Advection p)
{




  scalar * lsrc = p.src;
  if (!lsrc) {
    scalar zero= new_const_scalar("zero", 8, 0.);
    if (p.tracers) for (scalar s = *p.tracers, *_i87 = p.tracers; ((scalar *)&s)->i >= 0; s = *++_i87)
      lsrc = list_append (lsrc, zero);
  }

  
# 93 "/home/e.sharaborin/basilisk/src/bcg.h" 3 4
 ((
# 93 "/home/e.sharaborin/basilisk/src/bcg.h"
 list_len(p.tracers) == list_len(lsrc)
# 93 "/home/e.sharaborin/basilisk/src/bcg.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 93 "/home/e.sharaborin/basilisk/src/bcg.h"
 "list_len(p.tracers) == list_len(lsrc)"
# 93 "/home/e.sharaborin/basilisk/src/bcg.h" 3 4
 , "/home/e.sharaborin/basilisk/src/bcg.h", 93, __extension__ __PRETTY_FUNCTION__))
# 93 "/home/e.sharaborin/basilisk/src/bcg.h"
                                               ;
  scalar f, src;
  scalar * _i2 = p.tracers; scalar * _i3 = lsrc; if (p.tracers) for (f = *p.tracers, src = *lsrc; ((scalar *)&f)->i >= 0; f = *++_i2, src = *++_i3) {
    vector flux= new_face_vector("flux");
    tracer_fluxes (f, p.u, flux, p.dt, src);

     {
if (!((cm).i >= 65536)) {
# 99 "/home/e.sharaborin/basilisk/src/bcg.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 99 "/home/e.sharaborin/basilisk/src/bcg.h"

      {
# 100 "/home/e.sharaborin/basilisk/src/bcg.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] += p.dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)])/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]);
# 100 "/home/e.sharaborin/basilisk/src/bcg.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] += p.dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(flux.y.i)])/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]);
# 100 "/home/e.sharaborin/basilisk/src/bcg.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] += p.dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(flux.z.i)])/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]);}; } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 99 "/home/e.sharaborin/basilisk/src/bcg.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 99 "/home/e.sharaborin/basilisk/src/bcg.h"

      {
# 100 "/home/e.sharaborin/basilisk/src/bcg.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] += p.dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.x.i)])/(Delta*_const_cm);
# 100 "/home/e.sharaborin/basilisk/src/bcg.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] += p.dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(flux.y.i)])/(Delta*_const_cm);
# 100 "/home/e.sharaborin/basilisk/src/bcg.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] += p.dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(flux.z.i)])/(Delta*_const_cm);}; } } } }; } }



   delete (((scalar []){flux.x,flux.y,flux.z,{-1}})); }
  boundary (p.tracers);

  if (!p.src)
    free(lsrc);
}
# 38 "./../src_local/centered-weugene.h"
# 1 "../src_local/viscosity-weugene.h"
# 1 "./../src_local/viscosity-weugene.h"
# 1 "../src_local/penalization.h"
# 1 "./../src_local/penalization.h"
vector zerocf= {{65536 + 9},{65536 + 10},{65536 + 11}};



    extern scalar fs;
    extern vector fs_face;
    double eta_s = 1e-15, nu_s = 1, lambda_slip = 0;
    int m_bp = 0;
     scalar a_br = {(65536 + 6)}, b_br = {(65536 + 6)};
     vector U_solid = {{65536 + 9},{65536 + 10},{65536 + 11}};

         vector target_U = {{65536 + 9},{65536 + 10},{65536 + 11}}, n_sol = {{65536 + 9},{65536 + 10},{65536 + 11}};
# 54 "./../src_local/penalization.h"
        double gradun;
# 68 "./../src_local/penalization.h"
struct Brinkman {
    vector u;
    vector uf;
    scalar rho;
    double dt;
};
# 131 "./../src_local/penalization.h"
void brinkman_correction_u (vector u, double dt){



     {
if (!((target_U.x).i >= 65536)) {
# 135 "./../src_local/penalization.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 135 "./../src_local/penalization.h"
 {
        {
# 136 "./../src_local/penalization.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)])/(1. + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s);
        }
# 136 "./../src_local/penalization.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)])/(1. + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s);
        }
# 136 "./../src_local/penalization.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)])/(1. + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s);
        }}
    } } } } }; }
if (((target_U.x).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 135 "./../src_local/penalization.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 135 "./../src_local/penalization.h"
 {
        {
# 136 "./../src_local/penalization.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s)*_const_target_U.x)/(1. + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s);
        }
# 136 "./../src_local/penalization.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s)*_const_target_U.y)/(1. + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s);
        }
# 136 "./../src_local/penalization.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s)*_const_target_U.z)/(1. + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt/eta_s);
        }}
    } } } } }; } }
    boundary ((scalar *)((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}}));
}
# 155 "./../src_local/penalization.h"
void brinkman_correction (struct Brinkman p){
    vector u = p.u; double dt = p.dt;
    brinkman_correction_u (u, dt);

}
# 2 "./../src_local/viscosity-weugene.h"
# 1 "../src_local/poisson-weugene.h"
# 1 "./../src_local/poisson-weugene.h"
# 35 "./../src_local/poisson-weugene.h"
  scalar residual_of_p= {3}, divutmp= {4}, divutmpAfter= {5};


# 37 "./../src_local/poisson-weugene.h" 3 4
_Bool 
# 37 "./../src_local/poisson-weugene.h"
    relative_residual_poisson = 
# 37 "./../src_local/poisson-weugene.h" 3 4
                                0
# 37 "./../src_local/poisson-weugene.h"
                                     ;
void mg_cycle (scalar * a, scalar * res, scalar * da,
        void (* relax) (scalar * da, scalar * res,
          int depth, void * data),
        void * data,
        int nrelax, int minlevel, int maxlevel)
{




  restriction (res);





  minlevel = ((minlevel) < (maxlevel) ? (minlevel) : (maxlevel));
  for (int l = minlevel; l <= maxlevel; l++) {




    if (l == minlevel)
       { { for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 61 "./../src_local/poisson-weugene.h"

        if (da) for (scalar s = *da, *_i88 = da; ((scalar *)&s)->i >= 0; s = *++_i88)
          ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = 0.; } } } } }; }}; }; }





    else
       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 70 "./../src_local/poisson-weugene.h"

        if (da) for (scalar s = *da, *_i89 = da; ((scalar *)&s)->i >= 0; s = *++_i89)
          ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = bilinear (point, s); } } } }; }}; }





    boundary_level (da, l);
    for (int i = 0; i < nrelax; i++) {
      relax (da, res, l, data);
      boundary_level (da, l);
    }
  }




   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 88 "./../src_local/poisson-weugene.h"
 {
    scalar s, ds;
    scalar * _i4 = a; scalar * _i5 = da; if (a) for (s = *a, ds = *da; ((scalar *)&s)->i >= 0; s = *++_i4, ds = *++_i5)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ds.i)];
  } } } } }; }
  boundary (a);
}
# 106 "./../src_local/poisson-weugene.h"
int NITERMAX = 100, NITERMIN = 1;
double TOLERANCE = 1e-3;
double RELATIVE_RES_TOLERANCE = 0.1;



typedef struct {
  int i;
  double resb, resa;
  double sum;
  int nrelax;
  int minlevel;
} mgstats;
# 129 "./../src_local/poisson-weugene.h"
struct MGSolve {
  scalar * a, * b;
  double (* residual) (scalar * a, scalar * b, scalar * res,
         void * data);
  void (* relax) (scalar * da, scalar * res, int depth,
    void * data);
  void * data;

  int nrelax;
  scalar * res;
  int minlevel;
  double tolerance;
};

mgstats mg_solve (struct MGSolve p)
{





  scalar * da = list_clone (p.a), * res = p.res;
  if (!res)
    if (p.a) for (scalar s = *p.a, *_i90 = p.a; ((scalar *)&s)->i >= 0; s = *++_i90) {
      scalar r = new_scalar("r");
      res = list_append (res, r);
    }






  for (int b = 0; b < nboundary; b++)
    if (da) for (scalar s = *da, *_i91 = da; ((scalar *)&s)->i >= 0; s = *++_i91)
      _attribute[s.i].boundary[b] = _attribute[s.i].boundary_homogeneous[b];




  mgstats s = {0};
  double sum = 0.;
   {


 {
double _sum = sum;
# 171 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 171 "./../src_local/poisson-weugene.h"

    if (p.b) for (scalar s = *p.b, *_i92 = p.b; ((scalar *)&s)->i >= 0; s = *++_i92)
      _sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } }; sum += _sum;
;



}
# 173 "./../src_local/poisson-weugene.h"
 }
  s.sum = sum;
  s.nrelax = p.nrelax > 0 ? p.nrelax : 4;




  double resb;
  resb = s.resb = s.resa = p.residual (p.a, p.b, res, p.data);
# 191 "./../src_local/poisson-weugene.h"
  int patient = 0;
  if (p.tolerance == 0.)
    p.tolerance = TOLERANCE;
  for (s.i = 0;
       s.i < NITERMAX && (s.i < NITERMIN || s.resa > p.tolerance);
       s.i++) {
    mg_cycle (p.a, res, da, p.relax, p.data,
       s.nrelax,
       p.minlevel,
       grid->maxdepth);
    s.resa = p.residual (p.a, p.b, res, p.data);
# 210 "./../src_local/poisson-weugene.h"
    if (s.resa > TOLERANCE) {
      if (resb/s.resa < 1.2 && s.nrelax < 100)
     s.nrelax++;
      else if (resb/s.resa > 10 && s.nrelax > 2)
     s.nrelax--;
    }







    resb = s.resa;
# 244 "./../src_local/poisson-weugene.h"
  }
  s.minlevel = p.minlevel;




  if (s.resa > p.tolerance) {
    scalar v = p.a[0];
    fprintf (
# 252 "./../src_local/poisson-weugene.h" 3 4
            stderr
# 252 "./../src_local/poisson-weugene.h"
                ,
      "WARNING: convergence for %s not reached after %d iterations\n"
      "  res: %g sum: %g nrelax: %d\n", _attribute[v.i].name,
      s.i, s.resa, s.sum, s.nrelax), fflush (
# 255 "./../src_local/poisson-weugene.h" 3 4
                                            stderr
# 255 "./../src_local/poisson-weugene.h"
                                                );
  }




  if (!p.res)
    delete (res), free(res);
  delete (da), free(da);

  return s;
}
# 293 "./../src_local/poisson-weugene.h"
struct Poisson {
  scalar a, b;
   vector alpha;
   scalar lambda;
  double tolerance;
  int nrelax, minlevel;
  scalar * res;



  double maxb;
};
# 357 "./../src_local/poisson-weugene.h"
static void relax (scalar * al, scalar * bl, int l, void * data)
{
  scalar a = al[0], b = bl[0];
  struct Poisson * p = (struct Poisson *) data;
   vector alpha = p->alpha;
   scalar lambda = p->lambda;
# 377 "./../src_local/poisson-weugene.h"
  scalar c= new_scalar("c");
# 386 "./../src_local/poisson-weugene.h"
   {
if (!((lambda).i >= 65536) && !((alpha.x).i >= 65536)) {
# 386 "./../src_local/poisson-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 386 "./../src_local/poisson-weugene.h"
 {
    double n = - ((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)], d = - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(lambda.i)]*((Delta)*(Delta));
    {
# 388 "./../src_local/poisson-weugene.h"
 {
      n += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)];
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(a.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)];
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(alpha.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(a.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(a.i)];
      d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(alpha.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)];
    }}
# 402 "./../src_local/poisson-weugene.h"
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = n/d;
  } } } } } }; }}; }; }
if (((lambda).i >= 65536) && !((alpha.x).i >= 65536)) {
const double _const_lambda = _constant[lambda.i -65536];
(void)(_const_lambda);
# 386 "./../src_local/poisson-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 386 "./../src_local/poisson-weugene.h"
 {
    double n = - ((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)], d = - _const_lambda*((Delta)*(Delta));
    {
# 388 "./../src_local/poisson-weugene.h"
 {
      n += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)];
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(a.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)];
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(alpha.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(a.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(a.i)];
      d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(alpha.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)];
    }}
# 402 "./../src_local/poisson-weugene.h"
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = n/d;
  } } } } } }; }}; }; }
if (!((lambda).i >= 65536) && ((alpha.x).i >= 65536)) {






const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 386 "./../src_local/poisson-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 386 "./../src_local/poisson-weugene.h"
 {
    double n = - ((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)], d = - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(lambda.i)]*((Delta)*(Delta));
    {
# 388 "./../src_local/poisson-weugene.h"
 {
      n += _const_alpha.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] + _const_alpha.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += _const_alpha.x + _const_alpha.x;
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += _const_alpha.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(a.i)] + _const_alpha.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += _const_alpha.y + _const_alpha.y;
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += _const_alpha.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(a.i)] + _const_alpha.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(a.i)];
      d += _const_alpha.z + _const_alpha.z;
    }}
# 402 "./../src_local/poisson-weugene.h"
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = n/d;
  } } } } } }; }}; }; }
if (((lambda).i >= 65536) && ((alpha.x).i >= 65536)) {
const double _const_lambda = _constant[lambda.i -65536];
(void)(_const_lambda);






const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 386 "./../src_local/poisson-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 386 "./../src_local/poisson-weugene.h"
 {
    double n = - ((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)], d = - _const_lambda*((Delta)*(Delta));
    {
# 388 "./../src_local/poisson-weugene.h"
 {
      n += _const_alpha.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] + _const_alpha.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += _const_alpha.x + _const_alpha.x;
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += _const_alpha.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(a.i)] + _const_alpha.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(a.i)];
      d += _const_alpha.y + _const_alpha.y;
    }
# 388 "./../src_local/poisson-weugene.h"
 {
      n += _const_alpha.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(a.i)] + _const_alpha.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(a.i)];
      d += _const_alpha.z + _const_alpha.z;
    }}
# 402 "./../src_local/poisson-weugene.h"
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = n/d;
  } } } } } }; }}; }; } }
# 416 "./../src_local/poisson-weugene.h"
   { { for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 416 "./../src_local/poisson-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)])/3.; } } } } }; }}; }; }
# 428 "./../src_local/poisson-weugene.h"
 delete (((scalar []){c,{-1}})); }






static double residual (scalar * al, scalar * bl, scalar * resl, void * data)
{
  scalar a = al[0], b = bl[0], res = resl[0];
  struct Poisson * p = (struct Poisson *) data;
   vector alpha = p->alpha;
   scalar lambda = p->lambda;
  double maxres = 0., maxb = p->maxb;


  vector g= new_face_vector("g");
   {
if (!((alpha.x).i >= 65536)) {
# 445 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 445 "./../src_local/poisson-weugene.h"
{
# 445 "./../src_local/poisson-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)])/Delta); } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 445 "./../src_local/poisson-weugene.h"
{
# 445 "./../src_local/poisson-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(a.i)])/Delta); } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 445 "./../src_local/poisson-weugene.h"
{
# 445 "./../src_local/poisson-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(a.i)])/Delta); } }} } } }
# 446 "./../src_local/poisson-weugene.h"
 ; }
if (((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 445 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 445 "./../src_local/poisson-weugene.h"
{
# 445 "./../src_local/poisson-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] = _const_alpha.x*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)])/Delta); } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 445 "./../src_local/poisson-weugene.h"
{
# 445 "./../src_local/poisson-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)] = _const_alpha.y*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(a.i)])/Delta); } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 445 "./../src_local/poisson-weugene.h"
{
# 445 "./../src_local/poisson-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)] = _const_alpha.z*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(a.i)])/Delta); } }} } } }
# 446 "./../src_local/poisson-weugene.h"
 ; } }
  boundary_flux (((vector []){{g.x,g.y,g.z},{{-1},{-1},{-1}}}));
   {


 {
double _maxres = maxres;
# 448 "./../src_local/poisson-weugene.h"

if (!((lambda).i >= 65536)) {
# 448 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 448 "./../src_local/poisson-weugene.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(lambda.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)];
    {
# 450 "./../src_local/poisson-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] -= (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)])/Delta;
# 450 "./../src_local/poisson-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] -= (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(g.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)])/Delta;
# 450 "./../src_local/poisson-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] -= (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(g.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)])/Delta;}
# 467 "./../src_local/poisson-weugene.h"
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(residual_of_p.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)];

    if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)]) > _maxres)
      _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)]);
  } } } } }; }
if (((lambda).i >= 65536)) {
const double _const_lambda = _constant[lambda.i -65536];
(void)(_const_lambda);
# 448 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 448 "./../src_local/poisson-weugene.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)] - _const_lambda*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.i)];
    {
# 450 "./../src_local/poisson-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] -= (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)])/Delta;
# 450 "./../src_local/poisson-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] -= (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(g.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)])/Delta;
# 450 "./../src_local/poisson-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)] -= (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(g.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)])/Delta;}
# 467 "./../src_local/poisson-weugene.h"
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(residual_of_p.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)];

    if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)]) > _maxres)
      _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.i)]);
  } } } } }; } if (_maxres > maxres) maxres = _maxres;
;



}
# 471 "./../src_local/poisson-weugene.h"
 }
  boundary (resl);
  fprintf(
# 473 "./../src_local/poisson-weugene.h" 3 4
         stderr
# 473 "./../src_local/poisson-weugene.h"
             , "maxres*dt^2= %g maxres= %g maxb= %g maxres/maxb= %g\n", maxres*((dt)*(dt)), maxres, maxb, maxres/maxb);
  { double _ret = maxres/maxb; delete (((scalar []){g.x,g.y,g.z,{-1}})); return _ret; }
 delete (((scalar []){g.x,g.y,g.z,{-1}})); }
# 486 "./../src_local/poisson-weugene.h"
mgstats poisson (struct Poisson p)
{
 fprintf(
# 488 "./../src_local/poisson-weugene.h" 3 4
        stderr
# 488 "./../src_local/poisson-weugene.h"
            , "**********************\n");





  if (!p.alpha.x.i)
    p.alpha = unityf;
  if (!p.lambda.i)
    p.lambda = zeroc;




  vector alpha = p.alpha;
  scalar lambda = p.lambda;
  restriction (((scalar []){alpha.x,alpha.y,alpha.z,lambda,{-1}}));





  double defaultol = TOLERANCE;
  if (p.tolerance)
    TOLERANCE = p.tolerance;

  scalar a = p.a, b = p.b;
  if (relative_residual_poisson) {
    double maxb = 0;
     {


 {
double _maxb = maxb;
# 517 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 517 "./../src_local/poisson-weugene.h"
{
      if (fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)]) > _maxb) _maxb = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(b.i)]);
    } } } } }; if (_maxb > maxb) maxb = _maxb;
;



}
# 519 "./../src_local/poisson-weugene.h"
 }
    if (maxb < 1e-12) maxb = 1;
    p.maxb = maxb;
  }else{
    p.maxb = 1;
  }




  mgstats s = mg_solve ((struct MGSolve){((scalar []){a,{-1}}), ((scalar []){b,{-1}}), residual, relax,
   &p, p.nrelax, p.res, .minlevel = ((1) > (p.minlevel) ? (1) : (p.minlevel))});




  if (p.tolerance)
    TOLERANCE = defaultol;

  return s;
}
# 558 "./../src_local/poisson-weugene.h"
struct Project {
  vector uf;
  scalar p;
  vector alpha;
  double dt;
  int nrelax;
  scalar fs;
  vector target_U;
  vector u;
};


mgstats project (struct Project q)
{ ;
    vector uf = q.uf;
    scalar p = q.p;
     vector alpha = q.alpha.x.i ? q.alpha : unityf;
    double dt = q.dt ? q.dt : 1., d;
    int nrelax = q.nrelax ? q.nrelax : 4;






    scalar div= new_scalar("div");
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 584 "./../src_local/poisson-weugene.h"
 {
        d = 0.;
        {
# 586 "./../src_local/poisson-weugene.h"
{
            d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
        }
# 586 "./../src_local/poisson-weugene.h"
{
            d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
        }
# 586 "./../src_local/poisson-weugene.h"
{
            d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
        }}
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(div.i)] = d/(dt*Delta);

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divutmp.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(div.i)]*dt;

    } } } } }; }
    boundary((scalar*)((scalar []){div,{-1}}));

    boundary((scalar*)((scalar []){divutmp,{-1}}));
# 608 "./../src_local/poisson-weugene.h"
    mgstats mgp;
    if (relative_residual_poisson)
      mgp = poisson ((struct Poisson){p, div , alpha, .tolerance = TOLERANCE, .nrelax = nrelax});
    else
      mgp = poisson ((struct Poisson){p, div , alpha, .tolerance = TOLERANCE/((dt)*(dt)), .nrelax = nrelax});
# 628 "./../src_local/poisson-weugene.h"
     {
if (!((alpha.x).i >= 65536)) {
# 628 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 628 "./../src_local/poisson-weugene.h"
{
# 628 "./../src_local/poisson-weugene.h"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta); } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 628 "./../src_local/poisson-weugene.h"
{
# 628 "./../src_local/poisson-weugene.h"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta); } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 628 "./../src_local/poisson-weugene.h"
{
# 628 "./../src_local/poisson-weugene.h"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(p.i)])/Delta); } }} } } }
# 628 "./../src_local/poisson-weugene.h"
 ; }
if (((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 628 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 628 "./../src_local/poisson-weugene.h"
{
# 628 "./../src_local/poisson-weugene.h"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] -= dt*_const_alpha.x*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta); } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 628 "./../src_local/poisson-weugene.h"
{
# 628 "./../src_local/poisson-weugene.h"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] -= dt*_const_alpha.y*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta); } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 628 "./../src_local/poisson-weugene.h"
{
# 628 "./../src_local/poisson-weugene.h"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] -= dt*_const_alpha.z*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(p.i)])/Delta); } }} } } }
# 628 "./../src_local/poisson-weugene.h"
 ; } }
    boundary ((scalar *)((vector []){{uf.x,uf.y,uf.z},{{-1},{-1},{-1}}}));


    double divuf, maxdivuf = -1e30;
     {


 {
double _maxdivuf = maxdivuf;
# 633 "./../src_local/poisson-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 633 "./../src_local/poisson-weugene.h"
 {
      divuf = 0;
      {
# 635 "./../src_local/poisson-weugene.h"
 divuf += (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]-((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)])/Delta;
# 635 "./../src_local/poisson-weugene.h"
 divuf += (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]-((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)])/Delta;
# 635 "./../src_local/poisson-weugene.h"
 divuf += (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)]-((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)])/Delta;}
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divutmpAfter.i)] = divuf/dt;
      divuf = fabs(divuf);
      if (_maxdivuf < divuf) _maxdivuf = divuf;
    } } } } }; if (_maxdivuf > maxdivuf) maxdivuf = _maxdivuf;
;



}
# 639 "./../src_local/poisson-weugene.h"
 }
    boundary((scalar*)((scalar []){divutmpAfter,{-1}}));
    fprintf(
# 641 "./../src_local/poisson-weugene.h" 3 4
           stderr
# 641 "./../src_local/poisson-weugene.h"
               , "Projection MAX{div uf} = %g\n", maxdivuf);

    { mgstats _ret = mgp; delete (((scalar []){div,{-1}})); ; return _ret; }
 delete (((scalar []){div,{-1}})); ; }
# 4 "./../src_local/viscosity-weugene.h"




# 7 "./../src_local/viscosity-weugene.h" 3 4
_Bool 
# 7 "./../src_local/viscosity-weugene.h"
    relative_residual_viscous = 
# 7 "./../src_local/viscosity-weugene.h" 3 4
                                0
# 7 "./../src_local/viscosity-weugene.h"
                                     ;
# 38 "./../src_local/viscosity-weugene.h"
struct Viscosity {
    vector u;
    vector mu;
    scalar rho;
    double dt;
    int nrelax;
    scalar * res;
    double maxb;
};



static void relax_viscosity (scalar*a, scalar*b, int l, void*data)
{
    struct Viscosity * p = (struct Viscosity *) data;
     vector mu = p->mu;
     scalar rho = p->rho;
    double dt = p->dt;
    vector u = (*((vector *)&(a[0]))), r = (*((vector *)&(b[0])));
    coord conv;

        vector w= new_vector("w");




     {
if (!((target_U.x).i >= 65536) && !((rho).i >= 65536) && !((mu.x).i >= 65536)) {
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    ));
        }}
    } } } } } }; }}; }; }
if (((target_U.x).i >= 65536) && !((rho).i >= 65536) && !((mu.x).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    ));
        }}
    } } } } } }; }}; }; }
if (!((target_U.x).i >= 65536) && ((rho).i >= 65536) && !((mu.x).i >= 65536)) {
# 125 "./../src_local/viscosity-weugene.h"
const double _const_rho = _constant[rho.i -65536];
(void)(_const_rho);
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    ));
        }}
    } } } } } }; }}; }; }
if (((target_U.x).i >= 65536) && ((rho).i >= 65536) && !((mu.x).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 127 "./../src_local/viscosity-weugene.h"
const double _const_rho = _constant[rho.i -65536];
(void)(_const_rho);
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(mu.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]

                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]


                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(mu.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]

                    ));
        }}
    } } } } } }; }}; }; }
if (!((target_U.x).i >= 65536) && !((rho).i >= 65536) && ((mu.x).i >= 65536)) {
# 131 "./../src_local/viscosity-weugene.h"
const struct { double x, y, z; } _const_mu = {_constant[mu.x.i -65536], _constant[mu.y.i - 65536], _constant[mu.z.i - 65536]};
(void)(_const_mu);
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.x + 2.*_const_mu.x

                    + _const_mu.y + _const_mu.y


                    + _const_mu.z + _const_mu.z

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.y + 2.*_const_mu.y

                    + _const_mu.z + _const_mu.z


                    + _const_mu.x + _const_mu.x

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.z + 2.*_const_mu.z

                    + _const_mu.x + _const_mu.x


                    + _const_mu.y + _const_mu.y

                    ));
        }}
    } } } } } }; }}; }; }
if (((target_U.x).i >= 65536) && !((rho).i >= 65536) && ((mu.x).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 133 "./../src_local/viscosity-weugene.h"
const struct { double x, y, z; } _const_mu = {_constant[mu.x.i -65536], _constant[mu.y.i - 65536], _constant[mu.z.i - 65536]};
(void)(_const_mu);
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.x + 2.*_const_mu.x

                    + _const_mu.y + _const_mu.y


                    + _const_mu.z + _const_mu.z

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.y + 2.*_const_mu.y

                    + _const_mu.z + _const_mu.z


                    + _const_mu.x + _const_mu.x

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)])*(2.*_const_mu.z + 2.*_const_mu.z

                    + _const_mu.x + _const_mu.x


                    + _const_mu.y + _const_mu.y

                    ));
        }}
    } } } } } }; }}; }; }
if (!((target_U.x).i >= 65536) && ((rho).i >= 65536) && ((mu.x).i >= 65536)) {
# 125 "./../src_local/viscosity-weugene.h"
const double _const_rho = _constant[rho.i -65536];
(void)(_const_rho);






const struct { double x, y, z; } _const_mu = {_constant[mu.x.i -65536], _constant[mu.y.i - 65536], _constant[mu.z.i - 65536]};
(void)(_const_mu);
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/_const_rho)*(2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*_const_mu.x + 2.*_const_mu.x

                    + _const_mu.y + _const_mu.y


                    + _const_mu.z + _const_mu.z

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/_const_rho)*(2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*_const_mu.y + 2.*_const_mu.y

                    + _const_mu.z + _const_mu.z


                    + _const_mu.x + _const_mu.x

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/_const_rho)*(2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*_const_mu.z + 2.*_const_mu.z

                    + _const_mu.x + _const_mu.x


                    + _const_mu.y + _const_mu.y

                    ));
        }}
    } } } } } }; }}; }; }
if (((target_U.x).i >= 65536) && ((rho).i >= 65536) && ((mu.x).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 127 "./../src_local/viscosity-weugene.h"
const double _const_rho = _constant[rho.i -65536];
(void)(_const_rho);






const struct { double x, y, z; } _const_mu = {_constant[mu.x.i -65536], _constant[mu.y.i - 65536], _constant[mu.z.i - 65536]};
(void)(_const_mu);
# 64 "./../src_local/viscosity-weugene.h"
{ for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 64 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]));

        conv.y = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]));


        conv.z = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]));


        {
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)] = ((1)*(dt/_const_rho)*(2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*_const_mu.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]

                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)


                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.x
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).x
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*_const_mu.x + 2.*_const_mu.x

                    + _const_mu.y + _const_mu.y


                    + _const_mu.z + _const_mu.z

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)] = ((1)*(dt/_const_rho)*(2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*_const_mu.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]

                    + _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/4.)
                    - _const_mu.z*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)


                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.y
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).y
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*_const_mu.y + 2.*_const_mu.y

                    + _const_mu.z + _const_mu.z


                    + _const_mu.x + _const_mu.x

                    ));
        }
# 74 "./../src_local/viscosity-weugene.h"
{
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)] = ((1)*(dt/_const_rho)*(2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] + 2.*_const_mu.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]

                    + _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                        (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)
                    - _const_mu.x*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)


                    + _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                          (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)
                    - _const_mu.y*(- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                         (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)

                    )
                    + 0.5*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*Delta*conv.z
                    + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)]*((Delta)*(Delta)))/(((Delta)*(Delta))*((coord){1.,1.,1.}).z
                    + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*dt*(((Delta)*(Delta))/eta_s)
                    + (1)*(dt/_const_rho)*(2.*_const_mu.z + 2.*_const_mu.z

                    + _const_mu.x + _const_mu.x


                    + _const_mu.y + _const_mu.y

                    ));
        }}
    } } } } } }; }}; }; } }


         { { for (int _l1 = l; _l1 >= 0; _l1--) { if (_l1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[_l1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = _l1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if (_l1 == l || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {{
# 108 "./../src_local/viscosity-weugene.h"

            {
# 109 "./../src_local/viscosity-weugene.h"

                ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.x.i)])/3.;
# 109 "./../src_local/viscosity-weugene.h"

                ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.y.i)])/3.;
# 109 "./../src_local/viscosity-weugene.h"

                ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(w.z.i)])/3.;}; } } } } }; }}; }; }
# 119 "./../src_local/viscosity-weugene.h"
 delete (((scalar []){w.x,w.y,w.z,{-1}})); }


static double residual_viscosity (scalar * a, scalar * b, scalar * resl, void * data) {
    struct Viscosity * p = (struct Viscosity *) data;
     vector mu = p->mu;
     scalar rho = p->rho;
    double dt = p->dt;
    vector u = (*((vector *)&(a[0]))), r = (*((vector *)&(b[0]))), res = (*((vector *)&(resl[0])));
    vector divtauu= new_vector("divtauu");
    coord conv;
    double maxres = 0, d = 0, maxb = p->maxb;
    coord LU;




    {
# 136 "./../src_local/viscosity-weugene.h"
 {
        vector taux= new_face_vector("taux");
         {
if (!((mu.x).i >= 65536)) {
# 138 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 138 "./../src_local/viscosity-weugene.h"
{
# 138 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] = 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/Delta; } }} } } }
# 139 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.x).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.x.i -65536], _constant[mu.y.i - 65536], _constant[mu.z.i - 65536]};
(void)(_const_mu);
# 138 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 138 "./../src_local/viscosity-weugene.h"
{
# 138 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] = 2.*_const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/Delta; } }} } } }
# 139 "./../src_local/viscosity-weugene.h"
 ; } }

         {
if (!((mu.x).i >= 65536)) {
# 141 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 141 "./../src_local/viscosity-weugene.h"
{
# 141 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)/Delta; } }} } } }
# 144 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.x).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.x.i -65536], _constant[mu.y.i - 65536], _constant[mu.z.i - 65536]};
(void)(_const_mu);
# 141 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 141 "./../src_local/viscosity-weugene.h"
{
# 141 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] = _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/4.)/Delta; } }} } } }
# 144 "./../src_local/viscosity-weugene.h"
 ; } }


         {
if (!((mu.x).i >= 65536)) {
# 147 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 147 "./../src_local/viscosity-weugene.h"
{
# 147 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)/Delta; } }} } } }
# 150 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.x).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.x.i -65536], _constant[mu.y.i - 65536], _constant[mu.z.i - 65536]};
(void)(_const_mu);
# 147 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 147 "./../src_local/viscosity-weugene.h"
{
# 147 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)] = _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)/Delta; } }} } } }
# 150 "./../src_local/viscosity-weugene.h"
 ; } }

        boundary_flux(((vector []){{taux.x,taux.y,taux.z},{{-1},{-1},{-1}}}));

         { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 154 "./../src_local/viscosity-weugene.h"
 {
            d = 0.0;
            {
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)];
            }
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)];
            }
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(taux.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)];
            }}
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.x.i)] = d/Delta;
        } } } } }; }
     delete (((scalar []){taux.x,taux.y,taux.z,{-1}})); }
# 136 "./../src_local/viscosity-weugene.h"
 {
        vector taux= new_face_vector("taux");
         {
if (!((mu.y).i >= 65536)) {
# 138 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 138 "./../src_local/viscosity-weugene.h"
{
# 138 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] = 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/Delta; } }} } } }
# 139 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.y).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.y.i -65536], _constant[mu.z.i - 65536], _constant[mu.x.i - 65536]};
(void)(_const_mu);
# 138 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 138 "./../src_local/viscosity-weugene.h"
{
# 138 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] = 2.*_const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/Delta; } }} } } }
# 139 "./../src_local/viscosity-weugene.h"
 ; } }

         {
if (!((mu.y).i >= 65536)) {
# 141 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 141 "./../src_local/viscosity-weugene.h"
{
# 141 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)/Delta; } }} } } }
# 144 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.y).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.y.i -65536], _constant[mu.z.i - 65536], _constant[mu.x.i - 65536]};
(void)(_const_mu);
# 141 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 141 "./../src_local/viscosity-weugene.h"
{
# 141 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)] = _const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)])/4.)/Delta; } }} } } }
# 144 "./../src_local/viscosity-weugene.h"
 ; } }


         {
if (!((mu.y).i >= 65536)) {
# 147 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 147 "./../src_local/viscosity-weugene.h"
{
# 147 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)/Delta; } }} } } }
# 150 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.y).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.y.i -65536], _constant[mu.z.i - 65536], _constant[mu.x.i - 65536]};
(void)(_const_mu);
# 147 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 147 "./../src_local/viscosity-weugene.h"
{
# 147 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] = _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/4.)/Delta; } }} } } }
# 150 "./../src_local/viscosity-weugene.h"
 ; } }

        boundary_flux(((vector []){{taux.x,taux.y,taux.z},{{-1},{-1},{-1}}}));

         { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 154 "./../src_local/viscosity-weugene.h"
 {
            d = 0.0;
            {
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)];
            }
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(taux.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)];
            }
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)];
            }}
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.y.i)] = d/Delta;
        } } } } }; }
     delete (((scalar []){taux.x,taux.y,taux.z,{-1}})); }
# 136 "./../src_local/viscosity-weugene.h"
 {
        vector taux= new_face_vector("taux");
         {
if (!((mu.z).i >= 65536)) {
# 138 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 138 "./../src_local/viscosity-weugene.h"
{
# 138 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)] = 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)])/Delta; } }} } } }
# 139 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.z).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.z.i -65536], _constant[mu.x.i - 65536], _constant[mu.y.i - 65536]};
(void)(_const_mu);
# 138 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 138 "./../src_local/viscosity-weugene.h"
{
# 138 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)] = 2.*_const_mu.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)])/Delta; } }} } } }
# 139 "./../src_local/viscosity-weugene.h"
 ; } }

         {
if (!((mu.z).i >= 65536)) {
# 141 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 141 "./../src_local/viscosity-weugene.h"
{
# 141 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)/Delta; } }} } } }
# 144 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.z).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.z.i -65536], _constant[mu.x.i - 65536], _constant[mu.y.i - 65536]};
(void)(_const_mu);
# 141 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 141 "./../src_local/viscosity-weugene.h"
{
# 141 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] = _const_mu.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)])/4.)/Delta; } }} } } }
# 144 "./../src_local/viscosity-weugene.h"
 ; } }


         {
if (!((mu.z).i >= 65536)) {
# 147 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 147 "./../src_local/viscosity-weugene.h"
{
# 147 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mu.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)/Delta; } }} } } }
# 150 "./../src_local/viscosity-weugene.h"
 ; }
if (((mu.z).i >= 65536)) {
const struct { double x, y, z; } _const_mu = {_constant[mu.z.i -65536], _constant[mu.x.i - 65536], _constant[mu.y.i - 65536]};
(void)(_const_mu);
# 147 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 147 "./../src_local/viscosity-weugene.h"
{
# 147 "./../src_local/viscosity-weugene.h"

            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] = _const_mu.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] +
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)])/4. -
                     (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)])/4.)/Delta; } }} } } }
# 150 "./../src_local/viscosity-weugene.h"
 ; } }

        boundary_flux(((vector []){{taux.x,taux.y,taux.z},{{-1},{-1},{-1}}}));

         { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 154 "./../src_local/viscosity-weugene.h"
 {
            d = 0.0;
            {
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(taux.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.z.i)];
            }
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.x.i)];
            }
# 156 "./../src_local/viscosity-weugene.h"
 {
                d += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(taux.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(taux.y.i)];
            }}
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.z.i)] = d/Delta;
        } } } } }; }
     delete (((scalar []){taux.x,taux.y,taux.z,{-1}})); }}
    boundary((scalar *)((vector []){{divtauu.x,divtauu.y,divtauu.z},{{-1},{-1},{-1}}}));

     {


 {
double _maxres = maxres;
# 164 "./../src_local/viscosity-weugene.h"

if (!((target_U.x).i >= 65536) && !((rho).i >= 65536)) {
# 164 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 164 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]))/(2.0*Delta);

        conv.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]))/(2.0*Delta);


        conv.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]))/(2.0*Delta);







        {
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.x = ((coord){1.,1.,1.}).x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.x.i)]*dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)]
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]/eta_s + conv.x )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)] - LU.x;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.y = ((coord){1.,1.,1.}).y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.y.i)]*dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)]
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]/eta_s + conv.y )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)] - LU.y;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.z = ((coord){1.,1.,1.}).z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.z.i)]*dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)]
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]/eta_s + conv.z )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)] - LU.z;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]);






        }}
    } } } } }; }
if (((target_U.x).i >= 65536) && !((rho).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 164 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 164 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]))/(2.0*Delta);

        conv.y = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]))/(2.0*Delta);


        conv.z = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]))/(2.0*Delta);







        {
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.x = ((coord){1.,1.,1.}).x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.x.i)]*dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)]
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]/eta_s + conv.x )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)] - LU.x;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.y = ((coord){1.,1.,1.}).y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.y.i)]*dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)]
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]/eta_s + conv.y )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)] - LU.y;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.z = ((coord){1.,1.,1.}).z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.z.i)]*dt/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rho.i)]
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]/eta_s + conv.z )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)] - LU.z;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]);






        }}
    } } } } }; }
if (!((target_U.x).i >= 65536) && ((rho).i >= 65536)) {
# 211 "./../src_local/viscosity-weugene.h"
const double _const_rho = _constant[rho.i -65536];
(void)(_const_rho);
# 164 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 164 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]))/(2.0*Delta);

        conv.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]))/(2.0*Delta);


        conv.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]))/(2.0*Delta);







        {
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.x = ((coord){1.,1.,1.}).x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.x.i)]*dt/_const_rho
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]/eta_s + conv.x )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)] - LU.x;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.y = ((coord){1.,1.,1.}).y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.y.i)]*dt/_const_rho
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]/eta_s + conv.y )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)] - LU.y;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.z = ((coord){1.,1.,1.}).z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.z.i)]*dt/_const_rho
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]/eta_s + conv.z )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)] - LU.z;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]);






        }}
    } } } } }; }
if (((target_U.x).i >= 65536) && ((rho).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 213 "./../src_local/viscosity-weugene.h"
const double _const_rho = _constant[rho.i -65536];
(void)(_const_rho);
# 164 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 164 "./../src_local/viscosity-weugene.h"
 {

        conv.x = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)]))/(2.0*Delta);

        conv.y = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.y.i)]))/(2.0*Delta);


        conv.z = (_const_target_U.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.z.i)]) + _const_target_U.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)]))/(2.0*Delta);







        {
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.x = ((coord){1.,1.,1.}).x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.x.i)]*dt/_const_rho
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]/eta_s + conv.x )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)] - LU.x;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.x.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.y = ((coord){1.,1.,1.}).y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.y.i)]*dt/_const_rho
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]/eta_s + conv.y )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)] - LU.y;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.y.i)]);






        }
# 179 "./../src_local/viscosity-weugene.h"
{
            LU.z = ((coord){1.,1.,1.}).z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] - (1)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(divtauu.z.i)]*dt/_const_rho
                     -(- ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]/eta_s + conv.z )))*dt;
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)] - LU.z;
            if (fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]) > _maxres) _maxres = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(res.z.i)]);






        }}
    } } } } }; } if (_maxres > maxres) maxres = _maxres;
;



}
# 191 "./../src_local/viscosity-weugene.h"
 }
    boundary (resl);
    fprintf(
# 193 "./../src_local/viscosity-weugene.h" 3 4
           stderr
# 193 "./../src_local/viscosity-weugene.h"
               , "visc: maxres=%15.12g maxb=%15.12g maxres/maxb=%15.12g\n", maxres, maxb, maxres/maxb);

    { double _ret = maxres/maxb; delete (((scalar []){divtauu.x,divtauu.y,divtauu.z,{-1}})); return _ret; }

 delete (((scalar []){divtauu.x,divtauu.y,divtauu.z,{-1}})); }




mgstats viscosity (struct Viscosity p){ ;
# 211 "./../src_local/viscosity-weugene.h"
    vector u = p.u, r= new_vector("r");
     {
if (!((target_U.x).i >= 65536)) {
# 212 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 212 "./../src_local/viscosity-weugene.h"
 {
# 212 "./../src_local/viscosity-weugene.h"
{ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + (+ ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.x.i)])/eta_s))*dt;}
# 212 "./../src_local/viscosity-weugene.h"
{ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + (+ ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.y.i)])/eta_s))*dt;}
# 212 "./../src_local/viscosity-weugene.h"
{ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + (+ ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(target_U.z.i)])/eta_s))*dt;}} } } } }; }
if (((target_U.x).i >= 65536)) {
const struct { double x, y, z; } _const_target_U = {_constant[target_U.x.i -65536], _constant[target_U.y.i - 65536], _constant[target_U.z.i - 65536]};
(void)(_const_target_U);
# 212 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 212 "./../src_local/viscosity-weugene.h"
 {
# 212 "./../src_local/viscosity-weugene.h"
{ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + (+ ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(_const_target_U.x)/eta_s))*dt;}
# 212 "./../src_local/viscosity-weugene.h"
{ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + (+ ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(_const_target_U.y)/eta_s))*dt;}
# 212 "./../src_local/viscosity-weugene.h"
{ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + (+ ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(_const_target_U.z)/eta_s))*dt;}} } } } }; } }
    vector mu = p.mu;
    scalar rho = p.rho;
    restriction (((scalar []){mu.x,mu.y,mu.z,rho,{-1}}));
    if (relative_residual_viscous) {
        double maxb = 0;
         {


 {
double _maxb = maxb;
# 218 "./../src_local/viscosity-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 218 "./../src_local/viscosity-weugene.h"
{
            if (fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]) > _maxb) _maxb = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(r.x.i)]);
        } } } } }; if (_maxb > maxb) maxb = _maxb;
;



}
# 220 "./../src_local/viscosity-weugene.h"
 }
        if (maxb < 1e-12) maxb = 1;
        p.maxb = maxb;
    }else{
        p.maxb = 1;
    }
    fprintf(
# 226 "./../src_local/viscosity-weugene.h" 3 4
           stderr
# 226 "./../src_local/viscosity-weugene.h"
               , "maxb = %g\n", p.maxb);
    { mgstats _ret = mg_solve ((struct MGSolve){(scalar *)((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}}), (scalar *)((vector []){{r.x,r.y,r.z},{{-1},{-1},{-1}}}), residual_viscosity, relax_viscosity, &p, p.nrelax, p.res}); delete (((scalar []){r.x,r.y,r.z,{-1}})); ; return _ret; }
 delete (((scalar []){r.x,r.y,r.z,{-1}})); ; }
# 45 "./../src_local/centered-weugene.h"
# 1 "../src_local/utils-weugene.h"
# 1 "./../src_local/utils-weugene.h"
void MinMaxValues(scalar * list, double * arr_eps) {
    double arr[10][2];
    int ilist = 0;
    if (list) for (scalar s = *list, *_i93 = list; ((scalar *)&s)->i >= 0; s = *++_i93) {
        double mina= ((double)1e30), maxa= -((double)1e30);
         {


 {
double _mina = mina; double _maxa = maxa;
# 6 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 6 "./../src_local/utils-weugene.h"
{
            if (fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]) < _mina) _mina = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
            if (fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]) > _maxa) _maxa = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
        } } } } }; if (_mina < mina) mina = _mina;
;
 if (_maxa > maxa) maxa = _maxa;
;



}
# 9 "./../src_local/utils-weugene.h"
 }




        arr[ilist][0] = mina;
        arr[ilist][1] = maxa;
        ilist++;

    }
    int i = 0;
    if (list) for (scalar s = *list, *_i94 = list; ((scalar *)&s)->i >= 0; s = *++_i94){





        arr_eps[i] *= 0.5*(arr[i][0] + arr[i][1]);


        fprintf(
# 29 "./../src_local/utils-weugene.h" 3 4
               stderr
# 29 "./../src_local/utils-weugene.h"
                   , "MinMaxValues: name=%s, min=%g, max=%g, eps=%g\n", _attribute[s.i].name, arr[i][0], arr[i][1], arr_eps[i]);

        i++;
    }
}

int count_cells(double t, int i){
    int tnc = 0, nc = 0;
     {


 {
double _tnc = tnc;
# 37 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 37 "./../src_local/utils-weugene.h"

        _tnc++; } } } }; tnc += _tnc;
;



}
# 38 "./../src_local/utils-weugene.h"
 }
# 48 "./../src_local/utils-weugene.h"
    printf("i %d t %g total num cells %d\n", i, t, tnc);

    fflush(
# 50 "./../src_local/utils-weugene.h" 3 4
          stdout
# 50 "./../src_local/utils-weugene.h"
              );
    return tnc;
}

stats statsf_weugene (scalar f, scalar fs)
{
    double dvr, val, min = 1e100, max = -1e100, sum = 0., sum2 = 0., volume = 0.;
     {


 {
double _sum = sum; double _sum2 = sum2; double _volume = volume; double _max = max; double _min = min;
# 57 "./../src_local/utils-weugene.h"

if (!((cm).i >= 65536)) {
# 57 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 58 "./../src_local/utils-weugene.h"
{
        dvr = (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)])*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        val = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        _volume += dvr;
        _sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]*dvr;
        _sum2 += ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]))*dvr;
        if (val > _max) _max = val;
        if (val < _min) _min = val;
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 57 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 58 "./../src_local/utils-weugene.h"
{
        dvr = (((Delta)*(Delta)*(Delta))*_const_cm)*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        val = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        _volume += dvr;
        _sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]*dvr;
        _sum2 += ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]))*dvr;
        if (val > _max) _max = val;
        if (val < _min) _min = val;
    } } } } }; } sum += _sum;
;
 sum2 += _sum2;
;
 volume += _volume;
;
 if (_max > max) max = _max;
;
 if (_min < min) min = _min;
;



}
# 66 "./../src_local/utils-weugene.h"
 }
 if (volume > 0.){
     sum /= volume; sum2 /= volume;
 }
 sum2 -= ((sum)*(sum));
 fprintf(
# 71 "./../src_local/utils-weugene.h" 3 4
        stderr
# 71 "./../src_local/utils-weugene.h"
            , "***: %g %g\n", sum, sum2);
 stats s;
 s.min = min, s.max = max, s.sum = sum, s.volume = volume;
 s.stddev = sum2 > 0. ? sqrt(sum2) : 0.;
    return s;
}


stats statsf_weugene2 (scalar f, scalar fs)
{
    double dvr, min = 1e100, max = -1e100, sum = 0., sum2 = 0., volume = 0.;
     {


 {
double _sum = sum; double _sum2 = sum2; double _volume = volume; double _max = max; double _min = min;
# 82 "./../src_local/utils-weugene.h"

if (!((cm).i >= 65536)) {
# 82 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 83 "./../src_local/utils-weugene.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)] == 0.) {
        dvr = (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)])*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        _volume += dvr;
        _sum += dvr*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
        _sum2 += dvr*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]));
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] > _max) _max = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < _min) _min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 82 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 83 "./../src_local/utils-weugene.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)] == 0.) {
        dvr = (((Delta)*(Delta)*(Delta))*_const_cm)*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        _volume += dvr;
        _sum += dvr*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
        _sum2 += dvr*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]));
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] > _max) _max = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < _min) _min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
    } } } } }; } sum += _sum;
;
 sum2 += _sum2;
;
 volume += _volume;
;
 if (_max > max) max = _max;
;
 if (_min < min) min = _min;
;



}
# 91 "./../src_local/utils-weugene.h"
 }
 if (volume > 0.){
     sum /= volume; sum2 /= volume;
 }
 sum2 -= ((sum)*(sum));
    fprintf(
# 96 "./../src_local/utils-weugene.h" 3 4
           stderr
# 96 "./../src_local/utils-weugene.h"
               , "sum=%g\n", sum);
    stats s;
    s.min = min, s.max = max, s.sum = sum, s.volume = volume;
    return s;
}

norm normf_weugene (scalar f, scalar fs)
{
    double avg = 0., rms = 0., max = 0., volume = 0.;
     {


 {
double _max = max; double _avg = avg; double _rms = rms; double _volume = volume;
# 105 "./../src_local/utils-weugene.h"

if (!((cm).i >= 65536)) {
# 105 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 106 "./../src_local/utils-weugene.h"
{
        double dvr = (((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)])*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        double v = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        if (v > _max) _max = v;
        _volume += dvr;
        _avg += dvr*v;
        _rms += dvr*((v)*(v));
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 105 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 106 "./../src_local/utils-weugene.h"
{
        double dvr = (((Delta)*(Delta)*(Delta))*_const_cm)*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        double v = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        if (v > _max) _max = v;
        _volume += dvr;
        _avg += dvr*v;
        _rms += dvr*((v)*(v));
    } } } } }; } if (_max > max) max = _max;
;
 avg += _avg;
;
 rms += _rms;
;
 volume += _volume;
;



}
# 113 "./../src_local/utils-weugene.h"
 }
    norm n;
    n.avg = volume ? avg/volume : 0.;
    n.rms = volume ? sqrt(rms/volume) : 0.;
    n.max = max;
    n.volume = volume;
    return n;
}

double change_weugene (scalar s, scalar sn, scalar fs)
{
    double max = 0., ds;
     {


 {
double _max = max;
# 125 "./../src_local/utils-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 125 "./../src_local/utils-weugene.h"
 {
        ds = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sn.i)])*(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
        if (ds > _max)
            _max = ds;
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sn.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)];
    } } } } }; if (_max > max) max = _max;
;



}
# 130 "./../src_local/utils-weugene.h"
 }
    return max;
}
# 46 "./../src_local/centered-weugene.h"
# 57 "./../src_local/centered-weugene.h"
scalar p= {6};
vector u= {{7},{8},{9}}, g= {{10},{11},{12}};
scalar pf= {13};
vector uf= {{14},{15},{16}};
# 83 "./../src_local/centered-weugene.h"
 vector mu = {{65536 + 0},{65536 + 1},{65536 + 2}}, a = {{65536 + 0},{65536 + 1},{65536 + 2}}, alpha = {{65536 + 3},{65536 + 4},{65536 + 5}}, kappa = {{65536 + 0},{65536 + 1},{65536 + 2}};
 scalar rho = {(65536 + 6)};
mgstats mgp, mgpf, mgu;

# 86 "./../src_local/centered-weugene.h" 3 4
_Bool 
# 86 "./../src_local/centered-weugene.h"
    stokes = 
# 86 "./../src_local/centered-weugene.h" 3 4
             0
# 86 "./../src_local/centered-weugene.h"
                  ;
# 104 "./../src_local/centered-weugene.h"
static void _set_boundary0 (void) { _attribute[p.i].boundary[right] = _boundary0; _attribute[p.i].boundary_homogeneous[right] = _boundary0_homogeneous; }
static void _set_boundary1 (void) { _attribute[p.i].boundary[left] = _boundary1; _attribute[p.i].boundary_homogeneous[left] = _boundary1_homogeneous; }
# 114 "./../src_local/centered-weugene.h"
static void _set_boundary2 (void) { _attribute[p.i].boundary[top] = _boundary2; _attribute[p.i].boundary_homogeneous[top] = _boundary2_homogeneous; }
static void _set_boundary3 (void) { _attribute[p.i].boundary[bottom] = _boundary3; _attribute[p.i].boundary_homogeneous[bottom] = _boundary3_homogeneous; }


static void _set_boundary4 (void) { _attribute[p.i].boundary[front] = _boundary4; _attribute[p.i].boundary_homogeneous[front] = _boundary4_homogeneous; }
static void _set_boundary5 (void) { _attribute[p.i].boundary[back] = _boundary5; _attribute[p.i].boundary_homogeneous[back] = _boundary5_homogeneous; }
# 139 "./../src_local/centered-weugene.h"
static int defaults_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i = 0); *ip = i; *tp = t; return ret; } static int defaults_0 (const int i, const double t, Event * _ev) { ;
{

  CFL = 0.8;




  _attribute[p.i].nodump = _attribute[pf.i].nodump = 
# 147 "./../src_local/centered-weugene.h" 3 4
                                                    1
# 147 "./../src_local/centered-weugene.h"
                                                        ;




  if (alpha.x.i == unityf.x.i) {
    alpha = fm;
    rho = cm;
  }
  else if (!((alpha.x).i >= 65536)) {
    vector alphav = alpha;
     {
if (!((fm.x).i >= 65536)) {
# 158 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 158 "./../src_local/centered-weugene.h"
{
# 158 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 158 "./../src_local/centered-weugene.h"
{
# 158 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 158 "./../src_local/centered-weugene.h"
{
# 158 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]; } }} } } }
# 159 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 158 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 158 "./../src_local/centered-weugene.h"
{
# 158 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.x.i)] = _const_fm.x; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 158 "./../src_local/centered-weugene.h"
{
# 158 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.y.i)] = _const_fm.y; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 158 "./../src_local/centered-weugene.h"
{
# 158 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.z.i)] = _const_fm.z; } }} } } }
# 159 "./../src_local/centered-weugene.h"
 ; } }
    boundary ((scalar *)((vector []){{alpha.x,alpha.y,alpha.z},{{-1},{-1},{-1}}}));
  }






  _attribute[uf.x.i].refine = refine_face_solenoidal;
# 186 "./../src_local/centered-weugene.h"
 ; } return 0; }





double dtmax;

static int init_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i = 0); *ip = i; *tp = t; return ret; } static int init (const int i, const double t, Event * _ev) { ;
{
  boundary ((scalar *)((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}}));
  ;
   {
if (!((fm.x).i >= 65536)) {
# 198 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 198 "./../src_local/centered-weugene.h"
{
# 198 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/2.); } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 198 "./../src_local/centered-weugene.h"
{
# 198 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/2.); } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 198 "./../src_local/centered-weugene.h"
{
# 198 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(u.z.i)])/2.); } }} } } }
# 199 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 198 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 198 "./../src_local/centered-weugene.h"
{
# 198 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = _const_fm.x*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/2.); } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 198 "./../src_local/centered-weugene.h"
{
# 198 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = _const_fm.y*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/2.); } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 198 "./../src_local/centered-weugene.h"
{
# 198 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = _const_fm.z*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(u.z.i)])/2.); } }} } } }
# 199 "./../src_local/centered-weugene.h"
 ; } }
  boundary ((scalar *)((vector []){{uf.x,uf.y,uf.z},{{-1},{-1},{-1}}}));




  event ("properties");





  dtmax = DT;
  event ("stability");
 ; } return 0; }
# 222 "./../src_local/centered-weugene.h"
static int set_dtmax_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int set_dtmax (const int i, const double t, Event * _ev) { ; dtmax = DT; ; return 0; }

static int stability_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int stability (const int i, const double t, Event * _ev) { ; {
  dt = dtnext (stokes ? dtmax : timestep (uf, dtmax));

  fprintf(
# 227 "./../src_local/centered-weugene.h" 3 4
         stderr
# 227 "./../src_local/centered-weugene.h"
             , "stability: dt=%g DT=%g dtmax=%g", dt, DT, dtmax );
 ; } return 0; }







static int vof_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int vof (const int i, const double t, Event * _ev) { ; ; ; return 0; }
static int tracer_advection_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int tracer_advection (const int i, const double t, Event * _ev) { ; ; ; return 0; }






static int properties_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int properties (const int i, const double t, Event * _ev) { ; {
  boundary (((scalar []){alpha.x,alpha.y,alpha.z,mu.x,mu.y,mu.z,rho,kappa.x,kappa.y,kappa.z,{-1}}));
 ; } return 0; }

static int tracer_diffusion_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int tracer_diffusion (const int i, const double t, Event * _ev) { ; ; ; return 0; }
# 260 "./../src_local/centered-weugene.h"
void prediction()
{
  vector du;
  {
# 263 "./../src_local/centered-weugene.h"
 {
    scalar s = new_scalar("s");
    du.x = s;
  }
# 263 "./../src_local/centered-weugene.h"
 {
    scalar s = new_scalar("s");
    du.y = s;
  }
# 263 "./../src_local/centered-weugene.h"
 {
    scalar s = new_scalar("s");
    du.z = s;
  }}

  if (_attribute[u.x.i].gradient)
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 269 "./../src_local/centered-weugene.h"

      {
# 270 "./../src_local/centered-weugene.h"
 {





          ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.x.i)] = _attribute[u.x.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/Delta;
      }
# 270 "./../src_local/centered-weugene.h"
 {





          ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.y.i)] = _attribute[u.y.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/Delta;
      }
# 270 "./../src_local/centered-weugene.h"
 {





          ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.z.i)] = _attribute[u.z.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)])/Delta;
      }} } } } }; }
  else
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 279 "./../src_local/centered-weugene.h"

        {
# 280 "./../src_local/centered-weugene.h"
 {
# 291 "./../src_local/centered-weugene.h"
             ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/(2.*Delta);
    }
# 280 "./../src_local/centered-weugene.h"
 {
# 291 "./../src_local/centered-weugene.h"
             ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/(2.*Delta);
    }
# 280 "./../src_local/centered-weugene.h"
 {
# 291 "./../src_local/centered-weugene.h"
             ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)])/(2.*Delta);
    }} } } } }; }
  boundary ((scalar *)((vector []){{du.x,du.y,du.z},{{-1},{-1},{-1}}}));

  ;
   {
if (!((fm.x).i >= 65536)) {
# 296 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 296 "./../src_local/centered-weugene.h"
{
# 296 "./../src_local/centered-weugene.h"
 {
    double un = dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/(2.*Delta), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.x.i)]*Delta/2.;

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]) {
      double fyy = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]) {
      double fzz = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]*fzz/(2.*Delta);
    }

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] *= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)];
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 296 "./../src_local/centered-weugene.h"
{
# 296 "./../src_local/centered-weugene.h"
 {
    double un = dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/(2.*Delta), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(g.y.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(du.y.i)]*Delta/2.;

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(fm.z.i)]) {
      double fyy = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.z.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+-1]) + sizeof(Cell)))[(u.y.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.z.i)]*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]) {
      double fzz = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.x.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.x.i)]*fzz/(2.*Delta);
    }

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] *= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)];
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 296 "./../src_local/centered-weugene.h"
{
# 296 "./../src_local/centered-weugene.h"
 {
    double un = dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)])/(2.*Delta), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(g.z.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(du.z.i)]*Delta/2.;

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.x.i)]) {
      double fyy = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.x.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.x.i)]*fyy/(2.*Delta);
    }


    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(fm.y.i)] && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(fm.y.i)]) {
      double fzz = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.y.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+i]) + sizeof(Cell)))[(u.z.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.y.i)]*fzz/(2.*Delta);
    }

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] *= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)];
  } } }} } } }
# 313 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 296 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 296 "./../src_local/centered-weugene.h"
{
# 296 "./../src_local/centered-weugene.h"
 {
    double un = dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/(2.*Delta), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(du.x.i)]*Delta/2.;

    if (_const_fm.y && _const_fm.y) {
      double fyy = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.x.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]*fyy/(2.*Delta);
    }


    if (_const_fm.z && _const_fm.z) {
      double fzz = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+1]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.x.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]*fzz/(2.*Delta);
    }

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] *= _const_fm.x;
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 296 "./../src_local/centered-weugene.h"
{
# 296 "./../src_local/centered-weugene.h"
 {
    double un = dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/(2.*Delta), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(g.y.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(du.y.i)]*Delta/2.;

    if (_const_fm.z && _const_fm.z) {
      double fyy = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.z.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+1]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+-1]) + sizeof(Cell)))[(u.y.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.z.i)]*fyy/(2.*Delta);
    }


    if (_const_fm.x && _const_fm.x) {
      double fzz = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.x.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.y.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(u.x.i)]*fzz/(2.*Delta);
    }

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] *= _const_fm.y;
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 296 "./../src_local/centered-weugene.h"
{
# 296 "./../src_local/centered-weugene.h"
 {
    double un = dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(u.z.i)])/(2.*Delta), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] + (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(g.z.i)])*dt/4. + s*(1. - s*un)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(du.z.i)]*Delta/2.;

    if (_const_fm.x && _const_fm.x) {
      double fyy = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.x.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.x.i)]*fyy/(2.*Delta);
    }


    if (_const_fm.y && _const_fm.y) {
      double fzz = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.y.i)] < 0. ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+i]) + sizeof(Cell)))[(u.z.i)];
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] -= dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(u.y.i)]*fzz/(2.*Delta);
    }

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] *= _const_fm.z;
  } } }} } } }
# 313 "./../src_local/centered-weugene.h"
 ; } }
  boundary ((scalar *)((vector []){{uf.x,uf.y,uf.z},{{-1},{-1},{-1}}}));

  delete ((scalar *)((vector []){{du.x,du.y,du.z},{{-1},{-1},{-1}}}));
}
# 328 "./../src_local/centered-weugene.h"
static int advection_term_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int advection_term (const int i, const double t, Event * _ev) { ;
{
  if (!stokes) {
    prediction();



    mgpf = project ((struct Project){uf, pf, alpha, dt/2., mgpf.nrelax});

    advection ((struct Advection){(scalar *)((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}}), uf, dt, (scalar *)((vector []){{g.x,g.y,g.z},{{-1},{-1},{-1}}})});

  }
 ; } return 0; }







static void correction (double dt)
{
  { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 350 "./../src_local/centered-weugene.h"

     {
# 351 "./../src_local/centered-weugene.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] += dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)];
# 351 "./../src_local/centered-weugene.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] += dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)];
# 351 "./../src_local/centered-weugene.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] += dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)];}; } } } }; }
 boundary ((scalar *)((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}}));

}
# 364 "./../src_local/centered-weugene.h"
static int viscous_term_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int viscous_term (const int i, const double t, Event * _ev) { ;
{
  if ((((mu.x).i >= 65536) ? _constant[(mu.x).i - 65536] : ((double)1e30)) != 0.) {

    correction (dt);
    mgu = viscosity ((struct Viscosity){u, mu, rho, dt, mgu.nrelax});
    correction (-dt);

  }




  if (!((a.x).i >= 65536)) {
    vector af = a;
    ;
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 380 "./../src_local/centered-weugene.h"
{
# 380 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(af.x.i)] = 0.; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 380 "./../src_local/centered-weugene.h"
{
# 380 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(af.y.i)] = 0.; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 380 "./../src_local/centered-weugene.h"
{
# 380 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(af.z.i)] = 0.; } }} } } }
# 381 "./../src_local/centered-weugene.h"
 ; }
  }
 ; } return 0; }
# 404 "./../src_local/centered-weugene.h"
static int acceleration_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int acceleration (const int i, const double t, Event * _ev) { ;
{
  ;
  vector ia =a;
   {
if (!((fm.x).i >= 65536) && !((a.x).i >= 65536)) {
# 408 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/2.) + dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)]);
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/2.) + dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)]);
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(u.z.i)])/2.) + dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)]);
  } } }} } } }
# 410 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536) && !((a.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 408 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = _const_fm.x*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/2.) + dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)]);
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = _const_fm.y*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/2.) + dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)]);
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = _const_fm.z*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(u.z.i)])/2.) + dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)]);
  } } }} } } }
# 410 "./../src_local/centered-weugene.h"
 ; }
if (!((fm.x).i >= 65536) && ((a.x).i >= 65536)) {
# 430 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 408 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/2.) + dt*_const_a.x);
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/2.) + dt*_const_a.y);
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(u.z.i)])/2.) + dt*_const_a.z);
  } } }} } } }
# 410 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536) && ((a.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 432 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 408 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] = _const_fm.x*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0 -1][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])/2.) + dt*_const_a.x);
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] = _const_fm.y*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0 -1] [point.k+0]) + sizeof(Cell)))[(u.y.i)])/2.) + dt*_const_a.y);
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 408 "./../src_local/centered-weugene.h"
{
# 408 "./../src_local/centered-weugene.h"
{
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)] = _const_fm.z*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0 -1]) + sizeof(Cell)))[(u.z.i)])/2.) + dt*_const_a.z);
  } } }} } } }
# 410 "./../src_local/centered-weugene.h"
 ; } }
  boundary ((scalar *)((vector []){{uf.x,uf.y,uf.z},{a.x,a.y,a.z},{{-1},{-1},{-1}}}));

 ; } return 0; }
# 422 "./../src_local/centered-weugene.h"
void centered_gradient (scalar p, vector g)
{





  vector gf= new_face_vector("gf");
   {
if (!((fm.x).i >= 65536) && !((a.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536) && !((a.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = _const_fm.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = _const_fm.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = _const_fm.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; }
if (!((fm.x).i >= 65536) && ((a.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 451 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*_const_a.x - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*_const_a.y - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*_const_a.z - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536) && ((a.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 453 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = _const_fm.x*_const_a.x - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = _const_fm.y*_const_a.y - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = _const_fm.z*_const_a.z - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; }
if (!((fm.x).i >= 65536) && !((a.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 469 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)] - _const_alpha.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)] - _const_alpha.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)] - _const_alpha.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536) && !((a.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 471 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = _const_fm.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)] - _const_alpha.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = _const_fm.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)] - _const_alpha.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = _const_fm.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)] - _const_alpha.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; }
if (!((fm.x).i >= 65536) && ((a.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 451 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 471 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*_const_a.x - _const_alpha.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*_const_a.y - _const_alpha.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*_const_a.z - _const_alpha.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; }
if (((fm.x).i >= 65536) && ((a.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 453 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 473 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 430 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] = _const_fm.x*_const_a.x - _const_alpha.x*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] = _const_fm.y*_const_a.y - _const_alpha.y*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(p.i)])/Delta; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 430 "./../src_local/centered-weugene.h"
{
# 430 "./../src_local/centered-weugene.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] = _const_fm.z*_const_a.z - _const_alpha.z*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(p.i)])/Delta; } }} } } }
# 431 "./../src_local/centered-weugene.h"
 ; } }
  boundary_flux (((vector []){{gf.x,gf.y,gf.z},{{-1},{-1},{-1}}}));





  ;
   {
if (!((fm.x).i >= 65536)) {
# 439 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 439 "./../src_local/centered-weugene.h"

    {
# 440 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] + 1e-12);
# 440 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(gf.y.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] + 1e-12);
# 440 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(gf.z.i)])/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(fm.z.i)] + 1e-12);}; } } } }; }
if (((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 439 "./../src_local/centered-weugene.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 439 "./../src_local/centered-weugene.h"

    {
# 440 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.x.i)])/(_const_fm.x + _const_fm.x + 1e-12);
# 440 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(gf.y.i)])/(_const_fm.y + _const_fm.y + 1e-12);
# 440 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(gf.z.i)])/(_const_fm.z + _const_fm.z + 1e-12);}; } } } }; } }
  boundary ((scalar *)((vector []){{g.x,g.y,g.z},{{-1},{-1},{-1}}}));
 delete (((scalar []){gf.x,gf.y,gf.z,{-1}})); }






static int projection_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int projection (const int i, const double t, Event * _ev) { ;
{



  mgp = project ((struct Project){uf, p, alpha, dt, mgp.nrelax});

  centered_gradient (p, g);



   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 461 "./../src_local/centered-weugene.h"

    {
# 462 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] += dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.x.i)]*(1 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
# 462 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] += dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.y.i)]*(1 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);
# 462 "./../src_local/centered-weugene.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] += dt*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(g.z.i)]*(1 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]);}; } } } }; }
  boundary ((scalar *)((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}}));

 ; } return 0; }
# 477 "./../src_local/centered-weugene.h"
static int end_timestep_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int end_timestep (const int i, const double t, Event * _ev) { ; ; ; return 0; }




static int vtk_file_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int vtk_file (const int i, const double t, Event * _ev) { ; ; ; return 0; }
# 491 "./../src_local/centered-weugene.h"
static int adapt_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int adapt (const int i, const double t, Event * _ev) { ; {
# 507 "./../src_local/centered-weugene.h"
  event ("properties");
 ; } return 0; }
# 18 "tube_bp.c"
# 1 "two-phase.h"
# 1 "/home/e.sharaborin/basilisk/src/two-phase.h"
# 13 "/home/e.sharaborin/basilisk/src/two-phase.h"
# 1 "vof.h"
# 1 "/home/e.sharaborin/basilisk/src/vof.h"
# 27 "/home/e.sharaborin/basilisk/src/vof.h"
# 1 "fractions.h"
# 1 "/home/e.sharaborin/basilisk/src/fractions.h"
# 12 "/home/e.sharaborin/basilisk/src/fractions.h"
# 1 "geometry.h"
# 1 "/home/e.sharaborin/basilisk/src/geometry.h"
# 28 "/home/e.sharaborin/basilisk/src/geometry.h"
double line_alpha (double c, coord n)
{
  double alpha, n1, n2;

  n1 = fabs (n.x); n2 = fabs (n.y);
  if (n1 > n2)
    { double tmp = n1; n1 = n2; n2 = tmp; };

  c = ((c) < (0.) ? (0.) : (c) > (1.) ? (1.) : (c));
  double v1 = n1/2.;
  if (c <= v1/n2)
    alpha = sqrt (2.*c*n1*n2);
  else if (c <= 1. - v1/n2)
    alpha = c*n2 + v1;
  else
    alpha = n1 + n2 - sqrt (2.*n1*n2*(1. - c));

  if (n.x < 0.)
    alpha += n.x;
  if (n.y < 0.)
    alpha += n.y;

  return alpha - (n.x + n.y)/2.;
}



double plane_alpha (double c, coord n)
{
  double alpha;
  coord n1;

  n1.x = fabs (n.x); n1.y = fabs (n.y); n1.z = fabs (n.z);

  double m1, m2, m3;
  m1 = ((n1.x) < (n1.y) ? (n1.x) : (n1.y));
  m3 = ((n1.x) > (n1.y) ? (n1.x) : (n1.y));
  m2 = n1.z;
  if (m2 < m1) {
    double tmp = m1;
    m1 = m2;
    m2 = tmp;
  }
  else if (m2 > m3) {
    double tmp = m3;
    m3 = m2;
    m2 = tmp;
  }
  double m12 = m1 + m2;
  double pr = ((6.*m1*m2*m3) > (1e-50) ? (6.*m1*m2*m3) : (1e-50));
  double V1 = m1*m1*m1/pr;
  double V2 = V1 + (m2 - m1)/(2.*m3), V3;
  double mm;
  if (m3 < m12) {
    mm = m3;
    V3 = (m3*m3*(3.*m12 - m3) + m1*m1*(m1 - 3.*m3) + m2*m2*(m2 - 3.*m3))/pr;
  }
  else {
    mm = m12;
    V3 = mm/(2.*m3);
  }

  c = ((c) < (0.) ? (0.) : (c) > (1.) ? (1.) : (c));
  double ch = ((c) < (1. - c) ? (c) : (1. - c));
  if (ch < V1)
    alpha = pow (pr*ch, 1./3.);
  else if (ch < V2)
    alpha = (m1 + sqrt(m1*m1 + 8.*m2*m3*(ch - V1)))/2.;
  else if (ch < V3) {
    double p12 = sqrt (2.*m1*m2);
    double q = 3.*(m12 - 2.*m3*ch)/(4.*p12);
    double teta = acos(((q) < (-1.) ? (-1.) : (q) > (1.) ? (1.) : (q)))/3.;
    double cs = cos(teta);
    alpha = p12*(sqrt(3.*(1. - cs*cs)) - cs) + m12;
  }
  else if (m12 < m3)
    alpha = m3*ch + mm/2.;
  else {
    double p = m1*(m2 + m3) + m2*m3 - 1./4., p12 = sqrt(p);
    double q = 3.*m1*m2*m3*(1./2. - ch)/(2.*p*p12);
    double teta = acos(((q) < (-1.) ? (-1.) : (q) > (1.) ? (1.) : (q)))/3.;
    double cs = cos(teta);
    alpha = p12*(sqrt(3.*(1. - cs*cs)) - cs) + 1./2.;
  }
  if (c > 1./2.) alpha = 1. - alpha;

  if (n.x < 0.)
    alpha += n.x;
  if (n.y < 0.)
    alpha += n.y;
  if (n.z < 0.)
    alpha += n.z;

  return alpha - (n.x + n.y + n.z)/2.;;
}
# 133 "/home/e.sharaborin/basilisk/src/geometry.h"
double line_area (double nx, double ny, double alpha)
{
  double a, v, area;

  alpha += (nx + ny)/2.;
  if (nx < 0.) {
    alpha -= nx;
    nx = - nx;
  }
  if (ny < 0.) {
    alpha -= ny;
    ny = - ny;
  }

  if (alpha <= 0.)
    return 0.;

  if (alpha >= nx + ny)
    return 1.;

  if (nx < 1e-10)
    area = alpha/ny;
  else if (ny < 1e-10)
    area = alpha/nx;
  else {
    v = ((alpha)*(alpha));

    a = alpha - nx;
    if (a > 0.)
      v -= a*a;

    a = alpha - ny;
    if (a > 0.)
      v -= a*a;

    area = v/(2.*nx*ny);
  }

  return ((area) < (0.) ? (0.) : (area) > (1.) ? (1.) : (area));
}



double plane_volume (coord n, double alpha)
{
  double al = alpha + (n.x + n.y + n.z)/2. +
    ((0.) > (-n.x) ? (0.) : (-n.x)) + ((0.) > (-n.y) ? (0.) : (-n.y)) + ((0.) > (-n.z) ? (0.) : (-n.z));
  if (al <= 0.)
    return 0.;
  double tmp = fabs(n.x) + fabs(n.y) + fabs(n.z);
  if (al >= tmp)
    return 1.;
  if (tmp < 1e-10)
    return 0.;
  double n1 = fabs(n.x)/tmp;
  double n2 = fabs(n.y)/tmp;
  double n3 = fabs(n.z)/tmp;
  al = ((0.) > (((1.) < (al/tmp) ? (1.) : (al/tmp))) ? (0.) : (((1.) < (al/tmp) ? (1.) : (al/tmp))));
  double al0 = ((al) < (1. - al) ? (al) : (1. - al));
  double b1 = ((n1) < (n2) ? (n1) : (n2));
  double b3 = ((n1) > (n2) ? (n1) : (n2));
  double b2 = n3;
  if (b2 < b1) {
    tmp = b1;
    b1 = b2;
    b2 = tmp;
  }
  else if (b2 > b3) {
    tmp = b3;
    b3 = b2;
    b2 = tmp;
  }
  double b12 = b1 + b2;
  double bm = ((b12) < (b3) ? (b12) : (b3));
  double pr = ((6.*b1*b2*b3) > (1e-50) ? (6.*b1*b2*b3) : (1e-50));
  if (al0 < b1)
    tmp = al0*al0*al0/pr;
  else if (al0 < b2)
    tmp = 0.5*al0*(al0 - b1)/(b2*b3) + b1*b1*b1/pr;
  else if (al0 < bm)
    tmp = (al0*al0*(3.*b12 - al0) + b1*b1*(b1 - 3.*al0) +
    b2*b2*(b2 - 3.*al0))/pr;
  else if (b12 < b3)
    tmp = (al0 - 0.5*bm)/b3;
  else
    tmp = (al0*al0*(3. - 2.*al0) + b1*b1*(b1 - 3.*al0) +
    b2*b2*(b2 - 3.*al0) + b3*b3*(b3 - 3.*al0))/pr;

  double volume = al <= 0.5 ? tmp : 1. - tmp;
  return ((volume) < (0.) ? (0.) : (volume) > (1.) ? (1.) : (volume));
}
# 237 "/home/e.sharaborin/basilisk/src/geometry.h"
double rectangle_fraction (coord n, double alpha, coord a, coord b)
{
  coord n1;
  {
# 240 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    alpha -= n.x*(b.x + a.x)/2.;
    n1.x = n.x*(b.x - a.x);
  }
# 240 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    alpha -= n.y*(b.y + a.y)/2.;
    n1.y = n.y*(b.y - a.y);
  }
# 240 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    alpha -= n.z*(b.z + a.z)/2.;
    n1.z = n.z*(b.z - a.z);
  }}
  return plane_volume (n1, alpha);
}
# 277 "/home/e.sharaborin/basilisk/src/geometry.h"
static coord cube_edge[12][2] = {
  {{0.,0.,0.},{1.,0.,0.}},{{0.,0.,1.},{1.,0.,1.}},
  {{0.,1.,1.},{1.,1.,1.}},{{0.,1.,0.},{1.,1.,0.}},
  {{0.,0.,0.},{0.,1.,0.}},{{0.,0.,1.},{0.,1.,1.}},
  {{1.,0.,1.},{1.,1.,1.}},{{1.,0.,0.},{1.,1.,0.}},
  {{0.,0.,0.},{0.,0.,1.}},{{1.,0.,0.},{1.,0.,1.}},
  {{1.,1.,0.},{1.,1.,1.}},{{0.,1.,0.},{0.,1.,1.}}
};




static int cube_connect[12][2][4] = {
  {{9, 1, 8}, {4, 3, 7}},
  {{6, 2, 5}, {8, 0, 9}},
  {{10, 3, 11}, {5, 1, 6}},
  {{7, 0, 4}, {11, 2, 10}},
  {{3, 7, 0}, {8, 5, 11}},
  {{11, 4, 8}, {1, 6, 2}},
  {{2, 5, 1}, {9, 7, 10}},
  {{10, 6, 9}, {0, 4, 3}},
  {{5, 11, 4}, {0, 9, 1}},
  {{1, 8, 0}, {7, 10, 6}},
  {{6, 9, 7}, {3, 11, 2}},
  {{2, 10, 3}, {4, 8, 5}}
};

int facets (coord n, double alpha, coord v[12], double h)
{
  coord a[12];
  int orient[12];

  for (int i = 0; i < 12; i++) {
    coord e, d;
    double den = 0., t = alpha;
    {
# 312 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
      d.x = h*(cube_edge[i][0].x - 0.5);
      e.x = h*(cube_edge[i][1].x - 0.5);
      den += n.x*(e.x - d.x);
      t -= n.x*d.x;
    }
# 312 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
      d.y = h*(cube_edge[i][0].y - 0.5);
      e.y = h*(cube_edge[i][1].y - 0.5);
      den += n.y*(e.y - d.y);
      t -= n.y*d.y;
    }
# 312 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
      d.z = h*(cube_edge[i][0].z - 0.5);
      e.z = h*(cube_edge[i][1].z - 0.5);
      den += n.z*(e.z - d.z);
      t -= n.z*d.z;
    }}
    orient[i] = -1;
    if (fabs (den) > 1e-10) {
      t /= den;
      if (t >= 0. && t < 1.) {
 double s = - alpha;
 {
# 323 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
   a[i].x = d.x + t*(e.x - d.x);
   s += n.x*e.x;
 }
# 323 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
   a[i].y = d.y + t*(e.y - d.y);
   s += n.y*e.y;
 }
# 323 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
   a[i].z = d.z + t*(e.z - d.z);
   s += n.z*e.z;
 }}
 orient[i] = (s > 0.);
      }
    }
  }

  for (int i = 0; i < 12; i++) {
    int nv = 0, e = i;
    while (orient[e] >= 0) {
      int m = 0, * ne = cube_connect[e][orient[e]];
      v[nv++] = a[e];
      orient[e] = -1;
      while (m < 3 && orient[e] < 0)
 e = ne[m++];
    }
    if (nv > 2)
      return nv;
  }
  return 0;
}






double line_length_center (coord m, double alpha, coord * p)
{
  alpha += (m.x + m.y)/2.;

  coord n = m;
  {
# 357 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.x < 0.) {
      alpha -= n.x;
      n.x = - n.x;
    }
# 357 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.y < 0.) {
      alpha -= n.y;
      n.y = - n.y;
    }}

  p->x = p->y = p->z = 0.;

  if (alpha <= 0. || alpha >= n.x + n.y)
    return 0.;

  {
# 368 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.x < 1e-4) {
      p->x = 0.;
      p->y = (m.y < 0. ? 1. - alpha : alpha) - 0.5;
      return 1.;
    }
# 368 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.y < 1e-4) {
      p->y = 0.;
      p->x = (m.x < 0. ? 1. - alpha : alpha) - 0.5;
      return 1.;
    }}

  if (alpha >= n.x) {
    p->x += 1.;
    p->y += (alpha - n.x)/n.y;
  }
  else
    p->x += alpha/n.x;

  double ax = p->x, ay = p->y;
  if (alpha >= n.y) {
    p->y += 1.;
    ay -= 1.;
    p->x += (alpha - n.y)/n.x;
    ax -= (alpha - n.y)/n.x;
  }
  else {
    p->y += alpha/n.y;
    ay -= alpha/n.y;
  }

  {
# 394 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    p->x /= 2.;
    p->x = ((p->x) < (0.) ? (0.) : (p->x) > (1.) ? (1.) : (p->x));
    if (m.x < 0.)
      p->x = 1. - p->x;
    p->x -= 0.5;
  }
# 394 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    p->y /= 2.;
    p->y = ((p->y) < (0.) ? (0.) : (p->y) > (1.) ? (1.) : (p->y));
    if (m.y < 0.)
      p->y = 1. - p->y;
    p->y -= 0.5;
  }}

  return sqrt (ax*ax + ay*ay);
}




double plane_area_center (coord m, double alpha, coord * p)
{
  {
# 410 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (fabs (m.x) < 1e-4) {
      coord n, q;
      ((double *)&n)[0] = m.y;
      ((double *)&n)[1] = m.z;
      double length = line_length_center (n, alpha, &q);
      p->x = 0.;
      p->y = ((double *)&q)[0];
      p->z = ((double *)&q)[1];
      return length;
    }
# 410 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (fabs (m.y) < 1e-4) {
      coord n, q;
      ((double *)&n)[0] = m.z;
      ((double *)&n)[1] = m.x;
      double length = line_length_center (n, alpha, &q);
      p->y = 0.;
      p->z = ((double *)&q)[0];
      p->x = ((double *)&q)[1];
      return length;
    }
# 410 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (fabs (m.z) < 1e-4) {
      coord n, q;
      ((double *)&n)[0] = m.x;
      ((double *)&n)[1] = m.y;
      double length = line_length_center (n, alpha, &q);
      p->z = 0.;
      p->x = ((double *)&q)[0];
      p->y = ((double *)&q)[1];
      return length;
    }}

  alpha += (m.x + m.y + m.z)/2.;
  coord n = m;
  {
# 424 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.x < 0.) {
      alpha -= n.x;
      n.x = - n.x;
    }
# 424 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.y < 0.) {
      alpha -= n.y;
      n.y = - n.y;
    }
# 424 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.z < 0.) {
      alpha -= n.z;
      n.z = - n.z;
    }}

  double amax = n.x + n.y + n.z;
  if (alpha < 0. || alpha > amax) {
    p->x = p->y = p->z = 0.;
    return 0.;
  }

  double area = ((alpha)*(alpha));
  p->x = p->y = p->z = area*alpha;

  {
# 439 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.x;
    if (b > 0.) {
      area -= b*b;
      p->x -= b*b*(2.*n.x + alpha);
      p->y -= b*b*b;
      p->z -= b*b*b;
    }
  }
# 439 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.y;
    if (b > 0.) {
      area -= b*b;
      p->y -= b*b*(2.*n.y + alpha);
      p->z -= b*b*b;
      p->x -= b*b*b;
    }
  }
# 439 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.z;
    if (b > 0.) {
      area -= b*b;
      p->z -= b*b*(2.*n.z + alpha);
      p->x -= b*b*b;
      p->y -= b*b*b;
    }
  }}

  amax = alpha - amax;
  {
# 450 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = amax + n.x;
    if (b > 0.) {
      area += b*b;
      p->y += b*b*(2.*n.y + alpha - n.z);
      p->z += b*b*(2.*n.z + alpha - n.y);
      p->x += b*b*b;
    }
  }
# 450 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = amax + n.y;
    if (b > 0.) {
      area += b*b;
      p->z += b*b*(2.*n.z + alpha - n.x);
      p->x += b*b*(2.*n.x + alpha - n.z);
      p->y += b*b*b;
    }
  }
# 450 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = amax + n.z;
    if (b > 0.) {
      area += b*b;
      p->x += b*b*(2.*n.x + alpha - n.y);
      p->y += b*b*(2.*n.y + alpha - n.x);
      p->z += b*b*b;
    }
  }}

  area *= 3.;
  {
# 461 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    if (area) {
      p->x /= area*n.x;
      p->x = ((p->x) < (0.) ? (0.) : (p->x) > (1.) ? (1.) : (p->x));
    }
    else
      p->x = 0.;
    if (m.x < 0.) p->x = 1. - p->x;
    p->x -= 0.5;
  }
# 461 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    if (area) {
      p->y /= area*n.y;
      p->y = ((p->y) < (0.) ? (0.) : (p->y) > (1.) ? (1.) : (p->y));
    }
    else
      p->y = 0.;
    if (m.y < 0.) p->y = 1. - p->y;
    p->y -= 0.5;
  }
# 461 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    if (area) {
      p->z /= area*n.z;
      p->z = ((p->z) < (0.) ? (0.) : (p->z) > (1.) ? (1.) : (p->z));
    }
    else
      p->z = 0.;
    if (m.z < 0.) p->z = 1. - p->z;
    p->z -= 0.5;
  }}

  return area*sqrt (1./(((n.x)*(n.x))*((n.y)*(n.y))) +
      1./(((n.x)*(n.x))*((n.z)*(n.z))) +
      1./(((n.z)*(n.z))*((n.y)*(n.y))))/6.;
}






void line_center (coord m, double alpha, double a, coord * p)
{
  alpha += (m.x + m.y)/2.;

  coord n = m;
  {
# 487 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.x < 0.) {
      alpha -= n.x;
      n.x = - n.x;
    }
# 487 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.y < 0.) {
      alpha -= n.y;
      n.y = - n.y;
    }}

  p->z = 0.;
  if (alpha <= 0.) {
    p->x = p->y = -0.5;
    return;
  }

  if (alpha >= n.x + n.y) {
    p->x = p->y = 0.;
    return;
  }

  {
# 504 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.x < 1e-4) {
      p->x = 0.;
      p->y = ((m.y) > 0 ? 1 : -1)*(a/2. - 0.5);
      return;
    }
# 504 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.y < 1e-4) {
      p->y = 0.;
      p->x = ((m.x) > 0 ? 1 : -1)*(a/2. - 0.5);
      return;
    }}

  p->x = p->y = ((alpha)*(alpha)*(alpha));

  {
# 513 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.x;
    if (b > 0.) {
      p->x -= ((b)*(b))*(alpha + 2.*n.x);
      p->y -= ((b)*(b)*(b));
    }
  }
# 513 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.y;
    if (b > 0.) {
      p->y -= ((b)*(b))*(alpha + 2.*n.y);
      p->x -= ((b)*(b)*(b));
    }
  }}

  {
# 521 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    p->x /= 6.*((n.x)*(n.x))*n.y*a;
    p->x = ((m.x) > 0 ? 1 : -1)*(p->x - 0.5);
  }
# 521 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    p->y /= 6.*((n.y)*(n.y))*n.x*a;
    p->y = ((m.y) > 0 ? 1 : -1)*(p->y - 0.5);
  }}
}
# 534 "/home/e.sharaborin/basilisk/src/geometry.h"
void plane_center (coord m, double alpha, double a, coord * p)
{
  {
# 536 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (fabs (m.x) < 1e-4) {
      coord n, q;
      ((double *)&n)[0] = m.y;
      ((double *)&n)[1] = m.z;
      line_center (n, alpha, a, &q);
      p->x = 0.;
      p->y = ((double *)&q)[0];
      p->z = ((double *)&q)[1];
      return;
    }
# 536 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (fabs (m.y) < 1e-4) {
      coord n, q;
      ((double *)&n)[0] = m.z;
      ((double *)&n)[1] = m.x;
      line_center (n, alpha, a, &q);
      p->y = 0.;
      p->z = ((double *)&q)[0];
      p->x = ((double *)&q)[1];
      return;
    }
# 536 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (fabs (m.z) < 1e-4) {
      coord n, q;
      ((double *)&n)[0] = m.x;
      ((double *)&n)[1] = m.y;
      line_center (n, alpha, a, &q);
      p->z = 0.;
      p->x = ((double *)&q)[0];
      p->y = ((double *)&q)[1];
      return;
    }}

  alpha += (m.x + m.y + m.z)/2.;
  coord n = m;
  {
# 550 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.x < 0.) {
      alpha -= n.x;
      n.x = - n.x;
    }
# 550 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.y < 0.) {
      alpha -= n.y;
      n.y = - n.y;
    }
# 550 "/home/e.sharaborin/basilisk/src/geometry.h"

    if (n.z < 0.) {
      alpha -= n.z;
      n.z = - n.z;
    }}

  if (alpha <= 0. || a == 0.) {
    p->x = p->y = p->z = -0.5;
    return;
  }

  if (alpha >= n.x + n.y + n.z || a == 1.) {
    p->x = p->y = p->z = 0.;
    return;
  }

  p->x = p->y = p->z = ((((alpha)*(alpha)))*(((alpha)*(alpha))));
  {
# 567 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.x;
    if (b > 0.) {
      p->x -= ((b)*(b)*(b))*(3.*n.x + alpha);
      p->y -= ((((b)*(b)))*(((b)*(b))));
      p->z -= ((((b)*(b)))*(((b)*(b))));
    }
  }
# 567 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.y;
    if (b > 0.) {
      p->y -= ((b)*(b)*(b))*(3.*n.y + alpha);
      p->z -= ((((b)*(b)))*(((b)*(b))));
      p->x -= ((((b)*(b)))*(((b)*(b))));
    }
  }
# 567 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = alpha - n.z;
    if (b > 0.) {
      p->z -= ((b)*(b)*(b))*(3.*n.z + alpha);
      p->x -= ((((b)*(b)))*(((b)*(b))));
      p->y -= ((((b)*(b)))*(((b)*(b))));
    }
  }}

  double amax = alpha - (n.x + n.y + n.z);
  {
# 577 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = amax + n.z;
    if (b > 0.) {
      p->x += ((b)*(b)*(b))*(3.*n.x + alpha - n.y);
      p->y += ((b)*(b)*(b))*(3.*n.y + alpha - n.x);
      p->z += ((((b)*(b)))*(((b)*(b))));
    }
  }
# 577 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = amax + n.x;
    if (b > 0.) {
      p->y += ((b)*(b)*(b))*(3.*n.y + alpha - n.z);
      p->z += ((b)*(b)*(b))*(3.*n.z + alpha - n.y);
      p->x += ((((b)*(b)))*(((b)*(b))));
    }
  }
# 577 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    double b = amax + n.y;
    if (b > 0.) {
      p->z += ((b)*(b)*(b))*(3.*n.z + alpha - n.x);
      p->x += ((b)*(b)*(b))*(3.*n.x + alpha - n.z);
      p->y += ((((b)*(b)))*(((b)*(b))));
    }
  }}

  double b = 24.*n.x*n.y*n.z*a;
  {
# 587 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    p->x /= b*n.x;
    p->x = ((m.x) > 0 ? 1 : -1)*(p->x - 0.5);
  }
# 587 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    p->y /= b*n.y;
    p->y = ((m.y) > 0 ? 1 : -1)*(p->y - 0.5);
  }
# 587 "/home/e.sharaborin/basilisk/src/geometry.h"
 {
    p->z /= b*n.z;
    p->z = ((m.z) > 0 ? 1 : -1)*(p->z - 0.5);
  }}
}
# 13 "/home/e.sharaborin/basilisk/src/fractions.h"
# 21 "/home/e.sharaborin/basilisk/src/fractions.h"
# 1 "myc.h"
# 1 "/home/e.sharaborin/basilisk/src/myc.h"
# 16 "/home/e.sharaborin/basilisk/src/myc.h"
coord mycs (Point point, scalar c)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 17 "/home/e.sharaborin/basilisk/src/myc.h"

  double m1,m2,m[4][3],t0,t1,t2;
  int cn;



  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] +
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] +
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[0][0] = m1 > m2 ? 1. : -1.;

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[0][1] = 0.5*(m1-m2);

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)];
  m[0][2] = 0.5*(m1-m2);



  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[1][0] = 0.5*(m1-m2);

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] +
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] +
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[1][1] = m1 > m2 ? 1. : -1.;

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)];
  m[1][2] = 0.5*(m1-m2);




  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[2][0] = 0.5*(m1-m2);

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)]+ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[2][1] = 0.5*(m1-m2);

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] +
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] +
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)];
  m[2][2] = m1 > m2 ? 1. : -1.;


  t0 = fabs(m[0][0]) + fabs(m[0][1]) + fabs(m[0][2]);
  m[0][0] /= t0;
  m[0][1] /= t0;
  m[0][2] /= t0;

  t0 = fabs(m[1][0]) + fabs(m[1][1]) + fabs(m[1][2]);
  m[1][0] /= t0;
  m[1][1] /= t0;
  m[1][2] /= t0;

  t0 = fabs(m[2][0]) + fabs(m[2][1]) + fabs(m[2][2]);
  m[2][0] /= t0;
  m[2][1] /= t0;
  m[2][2] /= t0;


  t0 = fabs(m[0][0]);
  t1 = fabs(m[1][1]);
  t2 = fabs(m[2][2]);

  cn = 0;
  if (t1 > t0) {
    t0 = t1;
    cn = 1;
  }
  if (t2 > t0)
    cn = 2;


  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] +
       2.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)]) +
       4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] +
       2.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)]) +
       4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[3][0] = m1 - m2;

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] +
       2.*( ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)]) +
       4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] +
       2.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)]) +
       4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  m[3][1] = m1 - m2;

  m1 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)] +
       2.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(c.i)]) +
       4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)];
  m2 = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)] +
       2.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(c.i)]) +
       4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)];
  m[3][2] = m1 - m2;


  t0 = fabs(m[3][0]) + fabs(m[3][1]) + fabs(m[3][2]);
  if (t0 < 1e-30) {
    coord mxyz = {1., 0., 0.};
    return mxyz;
  }

  m[3][0] /= t0;
  m[3][1] /= t0;
  m[3][2] /= t0;


  t0 = fabs (m[3][0]);
  t1 = fabs (m[3][1]);
  t2 = fabs (m[3][2]);
  if (t1 > t0)
    t0 = t1;
  if (t2 > t0)
    t0 = t2;

  if (fabs(m[cn][cn]) > t0)
    cn = 3;


  coord mxyz = {m[cn][0], m[cn][1], m[cn][2]};
  return mxyz;
}
# 22 "/home/e.sharaborin/basilisk/src/fractions.h"
# 41 "/home/e.sharaborin/basilisk/src/fractions.h"
void fraction_refine (Point point, scalar c)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 42 "/home/e.sharaborin/basilisk/src/fractions.h"






  double cc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  if (cc <= 0. || cc >= 1.)
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = cc; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  else {




    coord n = mycs (point, c);
    double alpha = plane_alpha (cc, n);






     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
      static const coord a = {0.,0.,0.}, b = {.5,.5,.5};
      coord nc;
      {
# 68 "/home/e.sharaborin/basilisk/src/fractions.h"

 nc.x = child.x*n.x;
# 68 "/home/e.sharaborin/basilisk/src/fractions.h"

 nc.y = child.y*n.y;
# 68 "/home/e.sharaborin/basilisk/src/fractions.h"

 nc.z = child.z*n.z;}
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = rectangle_fraction (nc, alpha, a, b);
    } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  }
}
# 85 "/home/e.sharaborin/basilisk/src/fractions.h"
static void alpha_refine (Point point, scalar alpha)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 86 "/home/e.sharaborin/basilisk/src/fractions.h"

  vector n = _attribute[alpha.i].n;
  double alphac = 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)];
  coord m;
  {
# 90 "/home/e.sharaborin/basilisk/src/fractions.h"

    m.x = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.x.i)];
# 90 "/home/e.sharaborin/basilisk/src/fractions.h"

    m.y = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.y.i)];
# 90 "/home/e.sharaborin/basilisk/src/fractions.h"

    m.z = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.z.i)];}
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)] = alphac;
    {
# 94 "/home/e.sharaborin/basilisk/src/fractions.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)] -= child.x*m.x/2.;
# 94 "/home/e.sharaborin/basilisk/src/fractions.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)] -= child.y*m.y/2.;
# 94 "/home/e.sharaborin/basilisk/src/fractions.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)] -= child.z*m.z/2.;}
  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}
# 121 "/home/e.sharaborin/basilisk/src/fractions.h"
struct Fractions {
  scalar Phi;
  scalar c;
  vector s;
  double val;
};


void fractions (struct Fractions a)
{ ;
  scalar Phi = a.Phi;
  scalar c = a.c;
  vector s = (a.s).x.i ? (a.s) : new_face_vector("s");
  double val = a.val;
# 143 "/home/e.sharaborin/basilisk/src/fractions.h"
  vector p= new_vector("p");
# 155 "/home/e.sharaborin/basilisk/src/fractions.h"
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 155 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
# 155 "/home/e.sharaborin/basilisk/src/fractions.h"
 if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & vertex)) {





    if ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val) < 0.) {






      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val)/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)]);
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] < val)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)] = 1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)];
    }
# 180 "/home/e.sharaborin/basilisk/src/fractions.h"
    else
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] > val || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] > val);
  }
# 155 "/home/e.sharaborin/basilisk/src/fractions.h"
 if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & vertex)) {





    if ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val) < 0.) {






      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val)/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(Phi.i)]);
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] < val)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] = 1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)];
    }
# 180 "/home/e.sharaborin/basilisk/src/fractions.h"
    else
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] > val || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(Phi.i)] > val);
  }
# 155 "/home/e.sharaborin/basilisk/src/fractions.h"
 if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & vertex)) {





    if ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(Phi.i)] - val) < 0.) {






      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val)/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(Phi.i)]);
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] < val)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] = 1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)];
    }
# 180 "/home/e.sharaborin/basilisk/src/fractions.h"
    else
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] > val || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(Phi.i)] > val);
  }} } } } } }; }
# 194 "/home/e.sharaborin/basilisk/src/fractions.h"
  scalar s_x = s.x, s_y = s.y, s_z = s.z;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 195 "/home/e.sharaborin/basilisk/src/fractions.h"
{
# 195 "/home/e.sharaborin/basilisk/src/fractions.h"






  {
# 233 "/home/e.sharaborin/basilisk/src/fractions.h"
    coord n;
    double nn = 0.;
    {
# 235 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.x = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)];
      nn += fabs(n.x);
    }
# 235 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.y = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(p.x.i)];
      nn += fabs(n.y);
    }}





    if (nn == 0.)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)];
    else {





      {
# 252 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.x /= nn;
# 252 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.y /= nn;}






      double alpha = 0., ni = 0.;
      for (int i = 0; i <= 1; i++)
 {
# 262 "/home/e.sharaborin/basilisk/src/fractions.h"

   if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(p.x.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(p.x.i)] < 1.) {
     double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(p.x.i)] - 0.5);
     alpha += n.x*a + n.y*(i - 0.5);
     ni++;
   }
# 262 "/home/e.sharaborin/basilisk/src/fractions.h"

   if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] < 1.) {
     double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] - 0.5);
     alpha += n.y*a + n.x*(i - 0.5);
     ni++;
   }}
# 276 "/home/e.sharaborin/basilisk/src/fractions.h"
      if (ni == 0)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_z.i)] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)]) > (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)]) ? (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)]) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)]));
      else if (ni != 4)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_z.i)] = line_area (n.x, n.y, alpha/ni);
      else {

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_z.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(p.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] > 2.);



      }
    }
  } } }} { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 195 "/home/e.sharaborin/basilisk/src/fractions.h"
{
# 195 "/home/e.sharaborin/basilisk/src/fractions.h"






  {
# 233 "/home/e.sharaborin/basilisk/src/fractions.h"
    coord n;
    double nn = 0.;
    {
# 235 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.y = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(p.z.i)];
      nn += fabs(n.y);
    }
# 235 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.z = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(p.y.i)];
      nn += fabs(n.z);
    }}





    if (nn == 0.)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)];
    else {





      {
# 252 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.y /= nn;
# 252 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.z /= nn;}






      double alpha = 0., ni = 0.;
      for (int i = 0; i <= 1; i++)
 {
# 262 "/home/e.sharaborin/basilisk/src/fractions.h"

   if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.y.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.y.i)] < 1.) {
     double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.y.i)] - 0.5);
     alpha += n.y*a + n.z*(i - 0.5);
     ni++;
   }
# 262 "/home/e.sharaborin/basilisk/src/fractions.h"

   if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(p.z.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(p.z.i)] < 1.) {
     double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(p.z.i)] - 0.5);
     alpha += n.z*a + n.y*(i - 0.5);
     ni++;
   }}
# 276 "/home/e.sharaborin/basilisk/src/fractions.h"
      if (ni == 0)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_x.i)] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)]) > (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)]) ? (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)]) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)]));
      else if (ni != 4)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_x.i)] = line_area (n.y, n.z, alpha/ni);
      else {

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_x.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(p.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(p.z.i)] > 2.);



      }
    }
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 195 "/home/e.sharaborin/basilisk/src/fractions.h"
{
# 195 "/home/e.sharaborin/basilisk/src/fractions.h"






  {
# 233 "/home/e.sharaborin/basilisk/src/fractions.h"
    coord n;
    double nn = 0.;
    {
# 235 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.z = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(p.x.i)];
      nn += fabs(n.z);
    }
# 235 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.x = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)];
      nn += fabs(n.x);
    }}





    if (nn == 0.)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)];
    else {





      {
# 252 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.z /= nn;
# 252 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.x /= nn;}






      double alpha = 0., ni = 0.;
      for (int i = 0; i <= 1; i++)
 {
# 262 "/home/e.sharaborin/basilisk/src/fractions.h"

   if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] < 1.) {
     double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] - 0.5);
     alpha += n.z*a + n.x*(i - 0.5);
     ni++;
   }
# 262 "/home/e.sharaborin/basilisk/src/fractions.h"

   if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.x.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.x.i)] < 1.) {
     double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.x.i)] - 0.5);
     alpha += n.x*a + n.z*(i - 0.5);
     ni++;
   }}
# 276 "/home/e.sharaborin/basilisk/src/fractions.h"
      if (ni == 0)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_y.i)] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)]) > (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)]) ? (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)]) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)]));
      else if (ni != 4)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_y.i)] = line_area (n.z, n.x, alpha/ni);
      else {

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s_y.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(p.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(p.x.i)] > 2.);



      }
    }
  } } }} } } }
# 288 "/home/e.sharaborin/basilisk/src/fractions.h"
 ; }







  boundary_flux (((vector []){{s.x,s.y,s.z},{{-1},{-1},{-1}}}));
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 297 "/home/e.sharaborin/basilisk/src/fractions.h"
 {




    coord n;
    double nn = 0.;
    {
# 304 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.x = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.x.i)];
      nn += fabs(n.x);
    }
# 304 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.y = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.y.i)];
      nn += fabs(n.y);
    }
# 304 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.z = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.z.i)];
      nn += fabs(n.z);
    }}
    if (nn == 0.)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.x.i)];
    else {
      {
# 311 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.x /= nn;
# 311 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.y /= nn;
# 311 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.z /= nn;}






      double alpha = 0., ni = 0.;
      for (int i = 0; i <= 1; i++)
 for (int j = 0; j <= 1; j++)
   {
# 322 "/home/e.sharaborin/basilisk/src/fractions.h"

     if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(p.x.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(p.x.i)] < 1.) {
       double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(p.x.i)] - 0.5);
       alpha += n.x*a + n.y*(i - 0.5) + n.z*(j - 0.5);
       ni++;
     }
# 322 "/home/e.sharaborin/basilisk/src/fractions.h"

     if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.y.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.y.i)] < 1.) {
       double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(p.y.i)] - 0.5);
       alpha += n.y*a + n.z*(i - 0.5) + n.x*(j - 0.5);
       ni++;
     }
# 322 "/home/e.sharaborin/basilisk/src/fractions.h"

     if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(p.z.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(p.z.i)] < 1.) {
       double a = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(Phi.i)] - val) > 0 ? 1 : -1)*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(p.z.i)] - 0.5);
       alpha += n.z*a + n.x*(i - 0.5) + n.y*(j - 0.5);
       ni++;
     }}




      if (ni == 0)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.x.i)];
      else if (ni < 3 || ni > 6)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = 0.;
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] = plane_volume (n, alpha/ni);
    }
  } } } } }; }





  boundary (((scalar []){c,{-1}}));
 delete (((scalar []){p.x,p.y,p.z,{-1}})); { if (!(a.s).x.i) delete (((scalar []){s.x,s.y,s.z,{-1}})); } ; }
# 384 "/home/e.sharaborin/basilisk/src/fractions.h"
coord youngs_normal (Point point, scalar c)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 385 "/home/e.sharaborin/basilisk/src/fractions.h"

  coord n;
  double nn = 0.;
  
# 388 "/home/e.sharaborin/basilisk/src/fractions.h" 3 4
 ((
# 388 "/home/e.sharaborin/basilisk/src/fractions.h"
 3 == 2
# 388 "/home/e.sharaborin/basilisk/src/fractions.h" 3 4
 ) ? (void) (0) : __assert_fail (
# 388 "/home/e.sharaborin/basilisk/src/fractions.h"
 "3 == 2"
# 388 "/home/e.sharaborin/basilisk/src/fractions.h" 3 4
 , "/home/e.sharaborin/basilisk/src/fractions.h", 388, __extension__ __PRETTY_FUNCTION__))
# 388 "/home/e.sharaborin/basilisk/src/fractions.h"
                ;
  {
# 389 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
    n.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] -
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)]);
    nn += fabs(n.x);
  }
# 389 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
    n.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(c.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(c.i)] -
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+1]) + sizeof(Cell)))[(c.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+0]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1] [point.k+-1]) + sizeof(Cell)))[(c.i)]);
    nn += fabs(n.y);
  }
# 389 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
    n.z = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)] -
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(c.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+ +1]) + sizeof(Cell)))[(c.i)]);
    nn += fabs(n.z);
  }}

  if (nn > 0.)
    {
# 396 "/home/e.sharaborin/basilisk/src/fractions.h"

      n.x /= nn;
# 396 "/home/e.sharaborin/basilisk/src/fractions.h"

      n.y /= nn;
# 396 "/home/e.sharaborin/basilisk/src/fractions.h"

      n.z /= nn;}
  else
    n.x = 1.;
  return n;
}





coord facet_normal (Point point, scalar c, vector s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 408 "/home/e.sharaborin/basilisk/src/fractions.h"

  if (s.x.i >= 0) {
    coord n;
    double nn = 0.;
    {
# 412 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.x = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.x.i)];
      nn += fabs(n.x);
    }
# 412 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.y = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.y.i)];
      nn += fabs(n.y);
    }
# 412 "/home/e.sharaborin/basilisk/src/fractions.h"
 {
      n.z = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.z.i)];
      nn += fabs(n.z);
    }}
    if (nn > 0.)
      {
# 417 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.x /= nn;
# 417 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.y /= nn;
# 417 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.z /= nn;}
    else
      {
# 420 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.x = 1./3;
# 420 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.y = 1./3;
# 420 "/home/e.sharaborin/basilisk/src/fractions.h"

 n.z = 1./3;}
    return n;
  }
  return mycs (point, c);
}
# 434 "/home/e.sharaborin/basilisk/src/fractions.h"

void reconstruction (const scalar c, vector n, scalar alpha)
{ ;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 437 "/home/e.sharaborin/basilisk/src/fractions.h"
 {





    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) {
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)] = 0.;
      {
# 445 "/home/e.sharaborin/basilisk/src/fractions.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.x.i)] = 0.;
# 445 "/home/e.sharaborin/basilisk/src/fractions.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.y.i)] = 0.;
# 445 "/home/e.sharaborin/basilisk/src/fractions.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.z.i)] = 0.;}
    }
    else {






      coord m = mycs (point, c);
      {
# 456 "/home/e.sharaborin/basilisk/src/fractions.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.x.i)] = m.x;
# 456 "/home/e.sharaborin/basilisk/src/fractions.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.y.i)] = m.y;
# 456 "/home/e.sharaborin/basilisk/src/fractions.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.z.i)] = m.z;}
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)] = plane_alpha (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], m);
    }
  } } } } }; }
# 469 "/home/e.sharaborin/basilisk/src/fractions.h"
  {
# 469 "/home/e.sharaborin/basilisk/src/fractions.h"

    _attribute[n.x.i].refine = _attribute[n.x.i].prolongation = refine_injection;
# 469 "/home/e.sharaborin/basilisk/src/fractions.h"

    _attribute[n.y.i].refine = _attribute[n.y.i].prolongation = refine_injection;
# 469 "/home/e.sharaborin/basilisk/src/fractions.h"

    _attribute[n.z.i].refine = _attribute[n.z.i].prolongation = refine_injection;}




  _attribute[alpha.i].n = n;
  _attribute[alpha.i].refine = _attribute[alpha.i].prolongation = alpha_refine;







  boundary (((scalar []){n.x,n.y,n.z,alpha,{-1}}));
 ; }
# 505 "/home/e.sharaborin/basilisk/src/fractions.h"
struct OutputFacets {
  scalar c;
  FILE * fp;
  vector s;
};


void output_facets (struct OutputFacets p)
{ ;
  scalar c = p.c;
  vector s = p.s;
  if (!p.fp) p.fp = 
# 516 "/home/e.sharaborin/basilisk/src/fractions.h" 3 4
                   stdout
# 516 "/home/e.sharaborin/basilisk/src/fractions.h"
                       ;
  if (!s.x.i) s.x.i = -1;

   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 519 "/home/e.sharaborin/basilisk/src/fractions.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] > 1e-6 && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] < 1. - 1e-6) {
      coord n = facet_normal (point, c, s);
      double alpha = plane_alpha (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], n);







      coord v[12];
      int m = facets (n, alpha, v, 1.);
      for (int i = 0; i < m; i++)
 fprintf (p.fp, "%g %g %g\n",
   x + v[i].x*Delta, y + v[i].y*Delta, z + v[i].z*Delta);
      if (m > 0)
 fputc ('\n', p.fp);

    } } } } }; }

  fflush (p.fp);
 ; }
# 550 "/home/e.sharaborin/basilisk/src/fractions.h"
double interface_area (scalar c)
{ ;
  double area = 0.;
   {


 {
double _area = area;
# 553 "/home/e.sharaborin/basilisk/src/fractions.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 553 "/home/e.sharaborin/basilisk/src/fractions.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] > 1e-6 && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] < 1. - 1e-6) {
      coord n = mycs (point, c), p;
      double alpha = plane_alpha (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], n);
      _area += pow(Delta, 3 - 1)*plane_area_center (n, alpha, &p);
    } } } } }; area += _area;
;



}
# 558 "/home/e.sharaborin/basilisk/src/fractions.h"
 }
  { double _ret = area; ; return _ret; }
 ; }
# 36 "/home/e.sharaborin/basilisk/src/vof.h"
# 44 "/home/e.sharaborin/basilisk/src/vof.h"
extern scalar * interfaces;
extern vector uf;
extern double dt;
# 54 "/home/e.sharaborin/basilisk/src/vof.h"

static double vof_concentration_gradient_x (Point point, scalar c, scalar t)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 56 "/home/e.sharaborin/basilisk/src/vof.h"

  static const double cmin = 0.5;
  double cl = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], cc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], cr = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
  if (_attribute[t.i].inverse)
    cl = 1. - cl, cc = 1. - cc, cr = 1. - cr;
  if (cc >= cmin && _attribute[t.i].gradient != zero) {
    if (cr >= cmin) {
      if (cl >= cmin) {
 if (_attribute[t.i].gradient)
   return _attribute[t.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cl, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cr)/Delta;
 else
   return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cr - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cl)/(2.*Delta);
      }
      else
 return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cr - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc)/Delta;
    }
    else if (cl >= cmin)
      return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cl)/Delta;
  }
  return 0.;
}
# 54 "/home/e.sharaborin/basilisk/src/vof.h"

static double vof_concentration_gradient_y (Point point, scalar c, scalar t)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 56 "/home/e.sharaborin/basilisk/src/vof.h"

  static const double cmin = 0.5;
  double cl = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)], cc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], cr = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)];
  if (_attribute[t.i].inverse)
    cl = 1. - cl, cc = 1. - cc, cr = 1. - cr;
  if (cc >= cmin && _attribute[t.i].gradient != zero) {
    if (cr >= cmin) {
      if (cl >= cmin) {
 if (_attribute[t.i].gradient)
   return _attribute[t.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(t.i)]/cl, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(t.i)]/cr)/Delta;
 else
   return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(t.i)]/cr - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(t.i)]/cl)/(2.*Delta);
      }
      else
 return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(t.i)]/cr - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc)/Delta;
    }
    else if (cl >= cmin)
      return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(t.i)]/cl)/Delta;
  }
  return 0.;
}
# 54 "/home/e.sharaborin/basilisk/src/vof.h"

static double vof_concentration_gradient_z (Point point, scalar c, scalar t)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 56 "/home/e.sharaborin/basilisk/src/vof.h"

  static const double cmin = 0.5;
  double cl = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)], cc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], cr = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)];
  if (_attribute[t.i].inverse)
    cl = 1. - cl, cc = 1. - cc, cr = 1. - cr;
  if (cc >= cmin && _attribute[t.i].gradient != zero) {
    if (cr >= cmin) {
      if (cl >= cmin) {
 if (_attribute[t.i].gradient)
   return _attribute[t.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(t.i)]/cl, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(t.i)]/cr)/Delta;
 else
   return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(t.i)]/cr - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(t.i)]/cl)/(2.*Delta);
      }
      else
 return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(t.i)]/cr - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc)/Delta;
    }
    else if (cl >= cmin)
      return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/cc - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(t.i)]/cl)/Delta;
  }
  return 0.;
}






static void vof_concentration_refine (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 84 "/home/e.sharaborin/basilisk/src/vof.h"

if (!((cm).i >= 65536)) {
# 84 "/home/e.sharaborin/basilisk/src/vof.h"

  scalar f = _attribute[s.i].c;
  if ((!_attribute[s.i].inverse && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] <= 0.) || (_attribute[s.i].inverse && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] >= 1.))
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = 0.; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  else {
    coord g;
    {
# 91 "/home/e.sharaborin/basilisk/src/vof.h"

      g.x = Delta*vof_concentration_gradient_x (point, f, s);
# 91 "/home/e.sharaborin/basilisk/src/vof.h"

      g.y = Delta*vof_concentration_gradient_y (point, f, s);
# 91 "/home/e.sharaborin/basilisk/src/vof.h"

      g.z = Delta*vof_concentration_gradient_z (point, f, s);}
    double sc = _attribute[s.i].inverse ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]/(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)], cmc = 4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)];
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sc;
      {
# 96 "/home/e.sharaborin/basilisk/src/vof.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.x*g.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-child.x][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]/cmc;
# 96 "/home/e.sharaborin/basilisk/src/vof.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.y*g.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-child.y] [point.k+0]) + sizeof(Cell)))[(cm.i)]/cmc;
# 96 "/home/e.sharaborin/basilisk/src/vof.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.z*g.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-child.z]) + sizeof(Cell)))[(cm.i)]/cmc;}
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] *= _attribute[s.i].inverse ? 1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
    } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  }
 }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 84 "/home/e.sharaborin/basilisk/src/vof.h"

  scalar f = _attribute[s.i].c;
  if ((!_attribute[s.i].inverse && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] <= 0.) || (_attribute[s.i].inverse && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] >= 1.))
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = 0.; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  else {
    coord g;
    {
# 91 "/home/e.sharaborin/basilisk/src/vof.h"

      g.x = Delta*vof_concentration_gradient_x (point, f, s);
# 91 "/home/e.sharaborin/basilisk/src/vof.h"

      g.y = Delta*vof_concentration_gradient_y (point, f, s);
# 91 "/home/e.sharaborin/basilisk/src/vof.h"

      g.z = Delta*vof_concentration_gradient_z (point, f, s);}
    double sc = _attribute[s.i].inverse ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]/(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)], cmc = 4.*_const_cm;
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sc;
      {
# 96 "/home/e.sharaborin/basilisk/src/vof.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.x*g.x*_const_cm/cmc;
# 96 "/home/e.sharaborin/basilisk/src/vof.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.y*g.y*_const_cm/cmc;
# 96 "/home/e.sharaborin/basilisk/src/vof.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] += child.z*g.z*_const_cm/cmc;}
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] *= _attribute[s.i].inverse ? 1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
    } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  }
 }}





static int defaults_1_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i = 0); *ip = i; *tp = t; return ret; } static int defaults_1 (const int i, const double t, Event * _ev) { ;
{
  if (interfaces) for (scalar c = *interfaces, *_i95 = interfaces; ((scalar *)&c)->i >= 0; c = *++_i95) {
    _attribute[c.i].refine = _attribute[c.i].prolongation = fraction_refine;
    scalar * tracers = _attribute[c.i].tracers;
    if (tracers) for (scalar t = *tracers, *_i96 = tracers; ((scalar *)&t)->i >= 0; t = *++_i96) {
      _attribute[t.i].restriction = restriction_volume_average;
      _attribute[t.i].refine = _attribute[t.i].prolongation = vof_concentration_refine;
      _attribute[t.i].c = c;
    }
  }
 ; } return 0; }






static int stability_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int stability_0 (const int i, const double t, Event * _ev) { ; {
  if (CFL > 0.5)
    CFL = 0.5;
 ; } return 0; }
# 142 "/home/e.sharaborin/basilisk/src/vof.h"
# 142 "/home/e.sharaborin/basilisk/src/vof.h"

static void sweep_x (scalar c, scalar cc, scalar * tcl)
{
  vector n= new_vector("n");
  scalar alpha= new_scalar("alpha"), flux= new_scalar("flux");
  double cfl = 0.;
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
  scalar * tracers = _attribute[c.i].tracers, * gfl = 
# 156 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                                                     ((void *)0)
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
                                                         , * tfluxl = 
# 156 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                                                                      ((void *)0)
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
                                                                          ;
  if (tracers) {
    if (tracers) for (scalar t = *tracers, *_i97 = tracers; ((scalar *)&t)->i >= 0; t = *++_i97) {
      scalar gf = new_scalar("gf"), flux = new_scalar("flux");
      gfl = list_append (gfl, gf);
      tfluxl = list_append (tfluxl, flux);
    }




     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 167 "/home/e.sharaborin/basilisk/src/vof.h"
 {
      scalar t, gf;
      scalar * _i6 = tracers; scalar * _i7 = gfl; if (tracers) for (t = *tracers, gf = *gfl; ((scalar *)&t)->i >= 0; t = *++_i6, gf = *++_i7)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.i)] = vof_concentration_gradient_x (point, c, t);
    } } } } }; }
    boundary (gfl);
  }






  reconstruction (c, n, alpha);

   {


 {
double _cfl = cfl;
# 182 "/home/e.sharaborin/basilisk/src/vof.h"

if (!((fm.x).i >= 65536) && !((cm).i >= 65536)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]*dt/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12) > _cfl)
      _cfl = un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.z.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (((fm.x).i >= 65536) && !((cm).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]*dt/(Delta*_const_fm.x + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*_const_fm.x*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12) > _cfl)
      _cfl = un*_const_fm.x*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.z.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (!((fm.x).i >= 65536) && ((cm).i >= 65536)) {
# 257 "/home/e.sharaborin/basilisk/src/vof.h"
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]*dt/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*s/(_const_cm + 1e-12) > _cfl)
      _cfl = un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*s/(_const_cm + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.z.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (((fm.x).i >= 65536) && ((cm).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 259 "/home/e.sharaborin/basilisk/src/vof.h"
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]*dt/(Delta*_const_fm.x + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*_const_fm.x*s/(_const_cm + 1e-12) > _cfl)
      _cfl = un*_const_fm.x*s/(_const_cm + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(n.z.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; } if (_cfl > cfl) cfl = _cfl;
;



}
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 }
  delete (gfl); free(gfl);
# 248 "/home/e.sharaborin/basilisk/src/vof.h"
  scalar * fluxl = list_concat (
# 248 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                               ((void *)0)
# 248 "/home/e.sharaborin/basilisk/src/vof.h"
                                   , tfluxl);
  fluxl = list_append (fluxl, flux);
  for (int l = (grid->depth) - 1; l >= 0; l--)
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; point.k = _cache.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 251 "/home/e.sharaborin/basilisk/src/vof.h"
 {
# 267 "/home/e.sharaborin/basilisk/src/vof.h"
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0])))).pid >= 0))
 if (fluxl) for (scalar fl = *fluxl, *_i98 = fluxl; ((scalar *)&fl)->i >= 0; fl = *++_i98)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fl.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] +
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)])/4.;
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0])))).pid >= 0))
 if (fluxl) for (scalar fl = *fluxl, *_i99 = fluxl; ((scalar *)&fl)->i >= 0; fl = *++_i99)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(fl.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] +
     ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)])/4.;

    } } } } }; }}; }
  free(fluxl);





  if (cfl > 0.5 + 1e-6)
    fprintf (
# 284 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
            stderr
# 284 "/home/e.sharaborin/basilisk/src/vof.h"
                ,
      "WARNING: CFL must be <= 0.5 for VOF (cfl - 0.5 = %g)\n",
      cfl - 0.5), fflush (
# 286 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                         stderr
# 286 "/home/e.sharaborin/basilisk/src/vof.h"
                             );
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
   {
if (!((cm).i >= 65536)) {
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]))/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*Delta + 1e-12);
    scalar t, tc, tflux;
    scalar * _i11 = tracers; scalar * _i12 = tcl; scalar * _i13 = tfluxl; if (tracers) for (t = *tracers, tc = *tcl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i11, tc = *++_i12, tflux = *++_i13)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]))/
 (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*Delta + 1e-12);
  } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]))/(_const_cm*Delta + 1e-12);
    scalar t, tc, tflux;
    scalar * _i11 = tracers; scalar * _i12 = tcl; scalar * _i13 = tfluxl; if (tracers) for (t = *tracers, tc = *tcl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i11, tc = *++_i12, tflux = *++_i13)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.x.i)]))/
 (_const_cm*Delta + 1e-12);
  } } } } }; } }
  boundary (((scalar []){c,{-1}}));
  boundary (tracers);

  delete (tfluxl); free(tfluxl);
 delete (((scalar []){flux,alpha,n.x,n.y,n.z,{-1}})); }
# 142 "/home/e.sharaborin/basilisk/src/vof.h"

static void sweep_y (scalar c, scalar cc, scalar * tcl)
{
  vector n= new_vector("n");
  scalar alpha= new_scalar("alpha"), flux= new_scalar("flux");
  double cfl = 0.;
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
  scalar * tracers = _attribute[c.i].tracers, * gfl = 
# 156 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                                                     ((void *)0)
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
                                                         , * tfluxl = 
# 156 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                                                                      ((void *)0)
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
                                                                          ;
  if (tracers) {
    if (tracers) for (scalar t = *tracers, *_i97 = tracers; ((scalar *)&t)->i >= 0; t = *++_i97) {
      scalar gf = new_scalar("gf"), flux = new_scalar("flux");
      gfl = list_append (gfl, gf);
      tfluxl = list_append (tfluxl, flux);
    }




     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 167 "/home/e.sharaborin/basilisk/src/vof.h"
 {
      scalar t, gf;
      scalar * _i6 = tracers; scalar * _i7 = gfl; if (tracers) for (t = *tracers, gf = *gfl; ((scalar *)&t)->i >= 0; t = *++_i6, gf = *++_i7)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.i)] = vof_concentration_gradient_y (point, c, t);
    } } } } }; }
    boundary (gfl);
  }






  reconstruction (c, n, alpha);

   {


 {
double _cfl = cfl;
# 182 "/home/e.sharaborin/basilisk/src/vof.h"

if (!((fm.y).i >= 65536) && !((cm).i >= 65536)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]*dt/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12) > _cfl)
      _cfl = un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.x.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (((fm.y).i >= 65536) && !((cm).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.y.i -65536], _constant[fm.z.i - 65536], _constant[fm.x.i - 65536]};
(void)(_const_fm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]*dt/(Delta*_const_fm.y + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*_const_fm.y*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12) > _cfl)
      _cfl = un*_const_fm.y*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.x.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (!((fm.y).i >= 65536) && ((cm).i >= 65536)) {
# 257 "/home/e.sharaborin/basilisk/src/vof.h"
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]*dt/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*s/(_const_cm + 1e-12) > _cfl)
      _cfl = un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*s/(_const_cm + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.x.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (((fm.y).i >= 65536) && ((cm).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.y.i -65536], _constant[fm.z.i - 65536], _constant[fm.x.i - 65536]};
(void)(_const_fm);
# 259 "/home/e.sharaborin/basilisk/src/vof.h"
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]*dt/(Delta*_const_fm.y + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*_const_fm.y*s/(_const_cm + 1e-12) > _cfl)
      _cfl = un*_const_fm.y*s/(_const_cm + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(n.x.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; } if (_cfl > cfl) cfl = _cfl;
;



}
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 }
  delete (gfl); free(gfl);
# 248 "/home/e.sharaborin/basilisk/src/vof.h"
  scalar * fluxl = list_concat (
# 248 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                               ((void *)0)
# 248 "/home/e.sharaborin/basilisk/src/vof.h"
                                   , tfluxl);
  fluxl = list_append (fluxl, flux);
  for (int l = (grid->depth) - 1; l >= 0; l--)
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; point.k = _cache.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 251 "/home/e.sharaborin/basilisk/src/vof.h"
 {
# 267 "/home/e.sharaborin/basilisk/src/vof.h"
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0])))).pid >= 0))
 if (fluxl) for (scalar fl = *fluxl, *_i98 = fluxl; ((scalar *)&fl)->i >= 0; fl = *++_i98)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fl.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)] +
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)])/4.;
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0])))).pid >= 0))
 if (fluxl) for (scalar fl = *fluxl, *_i99 = fluxl; ((scalar *)&fl)->i >= 0; fl = *++_i99)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(fl.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)] +
     ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2][2*point.k-2 +1]) + sizeof(Cell)))[(fl.i)])/4.;

    } } } } }; }}; }
  free(fluxl);





  if (cfl > 0.5 + 1e-6)
    fprintf (
# 284 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
            stderr
# 284 "/home/e.sharaborin/basilisk/src/vof.h"
                ,
      "WARNING: CFL must be <= 0.5 for VOF (cfl - 0.5 = %g)\n",
      cfl - 0.5), fflush (
# 286 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                         stderr
# 286 "/home/e.sharaborin/basilisk/src/vof.h"
                             );
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
   {
if (!((cm).i >= 65536)) {
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(flux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]))/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*Delta + 1e-12);
    scalar t, tc, tflux;
    scalar * _i11 = tracers; scalar * _i12 = tcl; scalar * _i13 = tfluxl; if (tracers) for (t = *tracers, tc = *tcl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i11, tc = *++_i12, tflux = *++_i13)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(tflux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]))/
 (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*Delta + 1e-12);
  } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(flux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]))/(_const_cm*Delta + 1e-12);
    scalar t, tc, tflux;
    scalar * _i11 = tracers; scalar * _i12 = tcl; scalar * _i13 = tfluxl; if (tracers) for (t = *tracers, tc = *tcl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i11, tc = *++_i12, tflux = *++_i13)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(tflux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(uf.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.y.i)]))/
 (_const_cm*Delta + 1e-12);
  } } } } }; } }
  boundary (((scalar []){c,{-1}}));
  boundary (tracers);

  delete (tfluxl); free(tfluxl);
 delete (((scalar []){flux,alpha,n.x,n.y,n.z,{-1}})); }
# 142 "/home/e.sharaborin/basilisk/src/vof.h"

static void sweep_z (scalar c, scalar cc, scalar * tcl)
{
  vector n= new_vector("n");
  scalar alpha= new_scalar("alpha"), flux= new_scalar("flux");
  double cfl = 0.;
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
  scalar * tracers = _attribute[c.i].tracers, * gfl = 
# 156 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                                                     ((void *)0)
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
                                                         , * tfluxl = 
# 156 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                                                                      ((void *)0)
# 156 "/home/e.sharaborin/basilisk/src/vof.h"
                                                                          ;
  if (tracers) {
    if (tracers) for (scalar t = *tracers, *_i97 = tracers; ((scalar *)&t)->i >= 0; t = *++_i97) {
      scalar gf = new_scalar("gf"), flux = new_scalar("flux");
      gfl = list_append (gfl, gf);
      tfluxl = list_append (tfluxl, flux);
    }




     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 167 "/home/e.sharaborin/basilisk/src/vof.h"
 {
      scalar t, gf;
      scalar * _i6 = tracers; scalar * _i7 = gfl; if (tracers) for (t = *tracers, gf = *gfl; ((scalar *)&t)->i >= 0; t = *++_i6, gf = *++_i7)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(gf.i)] = vof_concentration_gradient_z (point, c, t);
    } } } } }; }
    boundary (gfl);
  }






  reconstruction (c, n, alpha);

   {


 {
double _cfl = cfl;
# 182 "/home/e.sharaborin/basilisk/src/vof.h"

if (!((fm.z).i >= 65536) && !((cm).i >= 65536)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]*dt/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12) > _cfl)
      _cfl = un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.y.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (((fm.z).i >= 65536) && !((cm).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.z.i -65536], _constant[fm.x.i - 65536], _constant[fm.y.i - 65536]};
(void)(_const_fm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]*dt/(Delta*_const_fm.z + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*_const_fm.z*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12) > _cfl)
      _cfl = un*_const_fm.z*s/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)] + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.y.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (!((fm.z).i >= 65536) && ((cm).i >= 65536)) {
# 257 "/home/e.sharaborin/basilisk/src/vof.h"
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]*dt/(Delta*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*s/(_const_cm + 1e-12) > _cfl)
      _cfl = un*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*s/(_const_cm + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.y.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; }
if (((fm.z).i >= 65536) && ((cm).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.z.i -65536], _constant[fm.x.i - 65536], _constant[fm.y.i - 65536]};
(void)(_const_fm);
# 259 "/home/e.sharaborin/basilisk/src/vof.h"
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
{
# 182 "/home/e.sharaborin/basilisk/src/vof.h"
 {






    double un = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]*dt/(Delta*_const_fm.z + 1e-12), s = ((un) > 0 ? 1 : -1);
    int i = -(s + 1.)/2.;




    if (un*_const_fm.z*s/(_const_cm + 1e-12) > _cfl)
      _cfl = un*_const_fm.z*s/(_const_cm + 1e-12);
# 209 "/home/e.sharaborin/basilisk/src/vof.h"
    double cf = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] >= 1.) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] :
      rectangle_fraction ((coord){-s*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.z.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(n.y.i)]}, ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(alpha.i)],
     (coord){-0.5, -0.5, -0.5},
     (coord){s*un - 0.5, 0.5, 0.5});





    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] = cf*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];






    scalar t, gf, tflux;
    scalar * _i8 = tracers; scalar * _i9 = gfl; scalar * _i10 = tfluxl; if (tracers) for (t = *tracers, gf = *gfl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i8, gf = *++_i9, tflux = *++_i10) {
      double cf1 = cf, ci = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)];
      if (_attribute[t.i].inverse)
 cf1 = 1. - cf1, ci = 1. - ci;
      if (ci > 1e-10) {
 double ff = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(t.i)]/ci + s*((1.) < (1. - s*un) ? (1.) : (1. - s*un))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(gf.i)]*Delta/2.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = ff*cf1*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)];
      }
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] = 0.;
    }
  } } }} } } }
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 ; } if (_cfl > cfl) cfl = _cfl;
;



}
# 237 "/home/e.sharaborin/basilisk/src/vof.h"
 }
  delete (gfl); free(gfl);
# 248 "/home/e.sharaborin/basilisk/src/vof.h"
  scalar * fluxl = list_concat (
# 248 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                               ((void *)0)
# 248 "/home/e.sharaborin/basilisk/src/vof.h"
                                   , tfluxl);
  fluxl = list_append (fluxl, flux);
  for (int l = (grid->depth) - 1; l >= 0; l--)
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; point.k = _cache.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 251 "/home/e.sharaborin/basilisk/src/vof.h"
 {
# 267 "/home/e.sharaborin/basilisk/src/vof.h"
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1])))).pid >= 0))
 if (fluxl) for (scalar fl = *fluxl, *_i98 = fluxl; ((scalar *)&fl)->i >= 0; fl = *++_i98)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fl.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] +
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +0]) + sizeof(Cell)))[(fl.i)])/4.;
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1])))).pid >= 0))
 if (fluxl) for (scalar fl = *fluxl, *_i99 = fluxl; ((scalar *)&fl)->i >= 0; fl = *++_i99)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(fl.i)] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0][2*point.k-2 +2]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0][2*point.k-2 +2]) + sizeof(Cell)))[(fl.i)] +
     ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1][2*point.k-2 +2]) + sizeof(Cell)))[(fl.i)] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1][2*point.k-2 +2]) + sizeof(Cell)))[(fl.i)])/4.;

    } } } } }; }}; }
  free(fluxl);





  if (cfl > 0.5 + 1e-6)
    fprintf (
# 284 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
            stderr
# 284 "/home/e.sharaborin/basilisk/src/vof.h"
                ,
      "WARNING: CFL must be <= 0.5 for VOF (cfl - 0.5 = %g)\n",
      cfl - 0.5), fflush (
# 286 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                         stderr
# 286 "/home/e.sharaborin/basilisk/src/vof.h"
                             );
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
   {
if (!((cm).i >= 65536)) {
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(flux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]))/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*Delta + 1e-12);
    scalar t, tc, tflux;
    scalar * _i11 = tracers; scalar * _i12 = tcl; scalar * _i13 = tfluxl; if (tracers) for (t = *tracers, tc = *tcl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i11, tc = *++_i12, tflux = *++_i13)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(tflux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]))/
 (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*Delta + 1e-12);
  } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 305 "/home/e.sharaborin/basilisk/src/vof.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(flux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(flux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]))/(_const_cm*Delta + 1e-12);
    scalar t, tc, tflux;
    scalar * _i11 = tracers; scalar * _i12 = tcl; scalar * _i13 = tfluxl; if (tracers) for (t = *tracers, tc = *tcl, tflux = *tfluxl; ((scalar *)&t)->i >= 0; t = *++_i11, tc = *++_i12, tflux = *++_i13)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)] += dt*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tflux.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(tflux.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)]*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(uf.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(uf.z.i)]))/
 (_const_cm*Delta + 1e-12);
  } } } } }; } }
  boundary (((scalar []){c,{-1}}));
  boundary (tracers);

  delete (tfluxl); free(tfluxl);
 delete (((scalar []){flux,alpha,n.x,n.y,n.z,{-1}})); }






void vof_advection (scalar * interfaces, int i)
{
  if (interfaces) for (scalar c = *interfaces, *_i100 = interfaces; ((scalar *)&c)->i >= 0; c = *++_i100) {
# 335 "/home/e.sharaborin/basilisk/src/vof.h"
    scalar cc= new_scalar("cc"), * tcl = 
# 335 "/home/e.sharaborin/basilisk/src/vof.h" 3 4
                                        ((void *)0)
# 335 "/home/e.sharaborin/basilisk/src/vof.h"
                                            , * tracers = _attribute[c.i].tracers;
    if (tracers) for (scalar t = *tracers, *_i101 = tracers; ((scalar *)&t)->i >= 0; t = *++_i101) {
      scalar tc = new_scalar("tc");
      tcl = list_append (tcl, tc);

      _attribute[t.i].restriction = restriction_volume_average;
      _attribute[t.i].refine = _attribute[t.i].prolongation = vof_concentration_refine;
      _attribute[t.i].c = c;

    }
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 345 "/home/e.sharaborin/basilisk/src/vof.h"
 {
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cc.i)] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] > 0.5);
      scalar t, tc;
      scalar * _i14 = tracers; scalar * _i15 = tcl; if (tracers) for (t = *tracers, tc = *tcl; ((scalar *)&t)->i >= 0; t = *++_i14, tc = *++_i15) {
 if (_attribute[t.i].inverse)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] < 0.5 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/(1. - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)]) : 0.;
 else
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(tc.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] > 0.5 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(t.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] : 0.;
      }
    } } } } }; }






    void (* sweep[3]) (scalar, scalar, scalar *);
    int d = 0;
    {
# 363 "/home/e.sharaborin/basilisk/src/vof.h"

      sweep[d++] = sweep_x;
# 363 "/home/e.sharaborin/basilisk/src/vof.h"

      sweep[d++] = sweep_y;
# 363 "/home/e.sharaborin/basilisk/src/vof.h"

      sweep[d++] = sweep_z;}
    for (d = 0; d < 3; d++)
      sweep[(i + d) % 3] (c, cc, tcl);
    delete (tcl), free(tcl);
   delete (((scalar []){cc,{-1}})); }
}

static int vof_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int vof_0 (const int i, const double t, Event * _ev) { ;
  vof_advection (interfaces, i); ; return 0; }
# 14 "/home/e.sharaborin/basilisk/src/two-phase.h"

scalar f= {17}, * interfaces = ((scalar []){{17},{-1}});
double rho1 = 1., mu1 = 0., rho2 = 1., mu2 = 0.;





vector alphav= {{18},{19},{20}};
scalar rhov= {21};

static int defaults_2_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i = 0); *ip = i; *tp = t; return ret; } static int defaults_2 (const int i, const double t, Event * _ev) { ; {
  alpha = alphav;
  rho = rhov;





  if (mu1 || mu2)
    mu = new_face_vector("mu");




  display ((struct _display){"draw_vof (c = 'f');"});
 ; } return 0; }
# 59 "/home/e.sharaborin/basilisk/src/two-phase.h"
scalar sf= {22};




static int properties_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int properties_0 (const int i, const double t, Event * _ev) { ; {
# 77 "/home/e.sharaborin/basilisk/src/two-phase.h"
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 77 "/home/e.sharaborin/basilisk/src/two-phase.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)] = (8.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] +
     4.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)]) +
     2.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)] +
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(f.i)] +
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)]) +
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+1]) + sizeof(Cell)))[(f.i)] +
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+-1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(f.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+1]) + sizeof(Cell)))[(f.i)])/64.; } } } }; }




  _attribute[sf.i].prolongation = refine_bilinear;
  boundary (((scalar []){sf,{-1}}));


   {
if (!((fm.x).i >= 65536)) {
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
 {
    double ff = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)])/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]/(((ff) < (0.) ? (0.) : (ff) > (1.) ? (1.) : (ff))*(rho1 - rho2) + rho2);
    if (mu1 || mu2) {
      vector muv = mu;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(muv.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*(1./(((ff) < (0) ? (0) : (ff) > (1) ? (1) : (ff))*(1./mu1 - 1./mu2) + 1./mu2));
    }
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
 {
    double ff = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(sf.i)])/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]/(((ff) < (0.) ? (0.) : (ff) > (1.) ? (1.) : (ff))*(rho1 - rho2) + rho2);
    if (mu1 || mu2) {
      vector muv = mu;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(muv.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*(1./(((ff) < (0) ? (0) : (ff) > (1) ? (1) : (ff))*(1./mu1 - 1./mu2) + 1./mu2));
    }
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
 {
    double ff = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(sf.i)])/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]/(((ff) < (0.) ? (0.) : (ff) > (1.) ? (1.) : (ff))*(rho1 - rho2) + rho2);
    if (mu1 || mu2) {
      vector muv = mu;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(muv.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*(1./(((ff) < (0) ? (0) : (ff) > (1) ? (1) : (ff))*(1./mu1 - 1./mu2) + 1./mu2));
    }
  } } }} } } }
# 100 "/home/e.sharaborin/basilisk/src/two-phase.h"
 ; }
if (((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
 {
    double ff = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)])/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.x.i)] = _const_fm.x/(((ff) < (0.) ? (0.) : (ff) > (1.) ? (1.) : (ff))*(rho1 - rho2) + rho2);
    if (mu1 || mu2) {
      vector muv = mu;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(muv.x.i)] = _const_fm.x*(1./(((ff) < (0) ? (0) : (ff) > (1) ? (1) : (ff))*(1./mu1 - 1./mu2) + 1./mu2));
    }
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
 {
    double ff = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(sf.i)])/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.y.i)] = _const_fm.y/(((ff) < (0.) ? (0.) : (ff) > (1.) ? (1.) : (ff))*(rho1 - rho2) + rho2);
    if (mu1 || mu2) {
      vector muv = mu;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(muv.y.i)] = _const_fm.y*(1./(((ff) < (0) ? (0) : (ff) > (1) ? (1) : (ff))*(1./mu1 - 1./mu2) + 1./mu2));
    }
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
{
# 93 "/home/e.sharaborin/basilisk/src/two-phase.h"
 {
    double ff = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(sf.i)])/2.;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alphav.z.i)] = _const_fm.z/(((ff) < (0.) ? (0.) : (ff) > (1.) ? (1.) : (ff))*(rho1 - rho2) + rho2);
    if (mu1 || mu2) {
      vector muv = mu;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(muv.z.i)] = _const_fm.z*(1./(((ff) < (0) ? (0) : (ff) > (1) ? (1) : (ff))*(1./mu1 - 1./mu2) + 1./mu2));
    }
  } } }} } } }
# 100 "/home/e.sharaborin/basilisk/src/two-phase.h"
 ; } }
   {
if (!((cm).i >= 65536)) {
# 101 "/home/e.sharaborin/basilisk/src/two-phase.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 101 "/home/e.sharaborin/basilisk/src/two-phase.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rhov.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)]) < (0.) ? (0.) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)]) > (1.) ? (1.) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)]))*(rho1 - rho2) + rho2); } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 101 "/home/e.sharaborin/basilisk/src/two-phase.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 101 "/home/e.sharaborin/basilisk/src/two-phase.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(rhov.i)] = _const_cm*(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)]) < (0.) ? (0.) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)]) > (1.) ? (1.) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(sf.i)]))*(rho1 - rho2) + rho2); } } } }; } }


  _attribute[sf.i].prolongation = fraction_refine;
  boundary (((scalar []){sf,{-1}}));

 ; } return 0; }
# 19 "tube_bp.c"
# 1 "tension.h"
# 1 "/home/e.sharaborin/basilisk/src/tension.h"
# 14 "/home/e.sharaborin/basilisk/src/tension.h"
# 1 "curvature.h"
# 1 "/home/e.sharaborin/basilisk/src/curvature.h"
# 12 "/home/e.sharaborin/basilisk/src/curvature.h"
static void curvature_restriction (Point point, scalar kappa)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 13 "/home/e.sharaborin/basilisk/src/curvature.h"

  double k = 0., s = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(kappa.i)] != ((double)1e30))
      k += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(kappa.i)], s++; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(kappa.i)] = s ? k/s : ((double)1e30);
}







static void curvature_prolongation (Point point, scalar kappa)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 28 "/home/e.sharaborin/basilisk/src/curvature.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    double sk = 0., s = 0.;
    for (int i = 0; i <= 1; i++)

      for (int j = 0; j <= 1; j++)


 for (int k = 0; k <= 1; k++)

   if (((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x*i] [(point.j+2)/2+child.y*j][(point.k+2)/2+child.z*k]) + sizeof(Cell)))[(kappa.i)] != ((double)1e30))
     sk += ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x*i] [(point.j+2)/2+child.y*j][(point.k+2)/2+child.z*k]) + sizeof(Cell)))[(kappa.i)], s++;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(kappa.i)] = s ? sk/s : ((double)1e30);
  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
}
# 66 "/home/e.sharaborin/basilisk/src/curvature.h"
# 1 "heights.h"
# 1 "/home/e.sharaborin/basilisk/src/heights.h"
# 29 "/home/e.sharaborin/basilisk/src/heights.h"
static inline double height (double H) {
  return H > 20./2. ? H - 20. : H < -20./2. ? H + 20. : H;
}

static inline int orientation (double H) {
  return fabs(H) > 20./2.;
}
# 49 "/home/e.sharaborin/basilisk/src/heights.h"
static void half_column (Point point, scalar c, vector h, vector cs, int j)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 50 "/home/e.sharaborin/basilisk/src/heights.h"







  const int complete = -1;

  {
# 59 "/home/e.sharaborin/basilisk/src/heights.h"
 {







    double S = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], H = S, ci, a;







    typedef struct { int s; double h; } HState;
    HState state = {0, 0};
    if (j == 1) {




      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] == 300.)
 state.s = complete, state.h = ((double)1e30);




      else {
 int s = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] + 20./2.)/100.;
 state.h = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] - 100.*s;
 state.s = s - 1;
      }





      if (state.s != complete)
 S = state.s, H = state.h;
    }
# 109 "/home/e.sharaborin/basilisk/src/heights.h"
    for (int i = 1; i <= 4; i++) {
      ci = i <= 2 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i*j][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(i - 2)*j][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.x.i)];
      H += ci;




      if (S > 0. && S < 1.) {
 S = ci;
 if (ci <= 0. || ci >= 1.) {







   H -= i*ci;
   break;
 }
      }
# 138 "/home/e.sharaborin/basilisk/src/heights.h"
      else if (S >= 1. && ci <= 0.) {
 H = (H - 0.5)*j + (j == -1)*20.;
 S = complete;
 break;
      }
      else if (S <= 0. && ci >= 1.) {
 H = (i + 0.5 - H)*j + (j == 1)*20.;
 S = complete;
 break;
      }
# 156 "/home/e.sharaborin/basilisk/src/heights.h"
      else if (S == ci && modf(H, &a))
 break;
    }





    if (j == -1) {







      if (S != complete && ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ||
       (S > 0. && S < 1.)))
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] = 300.;
      else if (S == complete)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] = H;
      else





 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] = H + 100.*(1. + (S >= 1.));
    }
    else {
# 195 "/home/e.sharaborin/basilisk/src/heights.h"
      if (state.s != complete ||
   (S == complete && fabs(height(H)) < fabs(height(state.h))))
 state.s = S, state.h = H;





      if (state.s != complete)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] = ((double)1e30);
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] = (state.h > 1e10 ? ((double)1e30) : state.h);
    }
  }
# 59 "/home/e.sharaborin/basilisk/src/heights.h"
 {







    double S = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], H = S, ci, a;







    typedef struct { int s; double h; } HState;
    HState state = {0, 0};
    if (j == 1) {




      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] == 300.)
 state.s = complete, state.h = ((double)1e30);




      else {
 int s = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] + 20./2.)/100.;
 state.h = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] - 100.*s;
 state.s = s - 1;
      }





      if (state.s != complete)
 S = state.s, H = state.h;
    }
# 109 "/home/e.sharaborin/basilisk/src/heights.h"
    for (int i = 1; i <= 4; i++) {
      ci = i <= 2 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i*j] [point.k+0]) + sizeof(Cell)))[(c.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+(i - 2)*j] [point.k+0]) + sizeof(Cell)))[(cs.y.i)];
      H += ci;




      if (S > 0. && S < 1.) {
 S = ci;
 if (ci <= 0. || ci >= 1.) {







   H -= i*ci;
   break;
 }
      }
# 138 "/home/e.sharaborin/basilisk/src/heights.h"
      else if (S >= 1. && ci <= 0.) {
 H = (H - 0.5)*j + (j == -1)*20.;
 S = complete;
 break;
      }
      else if (S <= 0. && ci >= 1.) {
 H = (i + 0.5 - H)*j + (j == 1)*20.;
 S = complete;
 break;
      }
# 156 "/home/e.sharaborin/basilisk/src/heights.h"
      else if (S == ci && modf(H, &a))
 break;
    }





    if (j == -1) {







      if (S != complete && ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ||
       (S > 0. && S < 1.)))
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] = 300.;
      else if (S == complete)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] = H;
      else





 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] = H + 100.*(1. + (S >= 1.));
    }
    else {
# 195 "/home/e.sharaborin/basilisk/src/heights.h"
      if (state.s != complete ||
   (S == complete && fabs(height(H)) < fabs(height(state.h))))
 state.s = S, state.h = H;





      if (state.s != complete)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] = ((double)1e30);
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] = (state.h > 1e10 ? ((double)1e30) : state.h);
    }
  }
# 59 "/home/e.sharaborin/basilisk/src/heights.h"
 {







    double S = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], H = S, ci, a;







    typedef struct { int s; double h; } HState;
    HState state = {0, 0};
    if (j == 1) {




      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] == 300.)
 state.s = complete, state.h = ((double)1e30);




      else {
 int s = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + 20./2.)/100.;
 state.h = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - 100.*s;
 state.s = s - 1;
      }





      if (state.s != complete)
 S = state.s, H = state.h;
    }
# 109 "/home/e.sharaborin/basilisk/src/heights.h"
    for (int i = 1; i <= 4; i++) {
      ci = i <= 2 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i*j]) + sizeof(Cell)))[(c.i)] : ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+(i - 2)*j]) + sizeof(Cell)))[(cs.z.i)];
      H += ci;




      if (S > 0. && S < 1.) {
 S = ci;
 if (ci <= 0. || ci >= 1.) {







   H -= i*ci;
   break;
 }
      }
# 138 "/home/e.sharaborin/basilisk/src/heights.h"
      else if (S >= 1. && ci <= 0.) {
 H = (H - 0.5)*j + (j == -1)*20.;
 S = complete;
 break;
      }
      else if (S <= 0. && ci >= 1.) {
 H = (i + 0.5 - H)*j + (j == 1)*20.;
 S = complete;
 break;
      }
# 156 "/home/e.sharaborin/basilisk/src/heights.h"
      else if (S == ci && modf(H, &a))
 break;
    }





    if (j == -1) {







      if (S != complete && ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0. || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) ||
       (S > 0. && S < 1.)))
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] = 300.;
      else if (S == complete)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] = H;
      else





 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] = H + 100.*(1. + (S >= 1.));
    }
    else {
# 195 "/home/e.sharaborin/basilisk/src/heights.h"
      if (state.s != complete ||
   (S == complete && fabs(height(H)) < fabs(height(state.h))))
 state.s = S, state.h = H;





      if (state.s != complete)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] = ((double)1e30);
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] = (state.h > 1e10 ? ((double)1e30) : state.h);
    }
  }}
}
# 222 "/home/e.sharaborin/basilisk/src/heights.h"
static void column_propagation (vector h)
{
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) { if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0)) {{
# 224 "/home/e.sharaborin/basilisk/src/heights.h"

    for (int i = -2; i <= 2; i++)
      {
# 226 "/home/e.sharaborin/basilisk/src/heights.h"

 if (fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)])) <= 3.5 &&
     fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)]) + i) < fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)])))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] + i;
# 226 "/home/e.sharaborin/basilisk/src/heights.h"

 if (fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(h.y.i)])) <= 3.5 &&
     fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(h.y.i)]) + i) < fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)])))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(h.y.i)] + i;
# 226 "/home/e.sharaborin/basilisk/src/heights.h"

 if (fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.z.i)])) <= 3.5 &&
     fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.z.i)]) + i) < fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)])))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.z.i)] + i;}; } } continue; } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  boundary ((scalar *)((vector []){{h.x,h.y,h.z},{{-1},{-1},{-1}}}));
}
# 291 "/home/e.sharaborin/basilisk/src/heights.h"
# 291 "/home/e.sharaborin/basilisk/src/heights.h"

static void refine_h_x (Point point, scalar h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 293 "/home/e.sharaborin/basilisk/src/heights.h"





  
# 298 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
 _Bool 
# 298 "/home/e.sharaborin/basilisk/src/heights.h"
      complete = 
# 298 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
                 1
# 298 "/home/e.sharaborin/basilisk/src/heights.h"
                     ;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    for (int i = -2; i <= 2; i++)
      if ((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) &&
   !(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).pid >= 0) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0])))).pid < 0) &&
   fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)])) <= 3.5 &&
   fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)]) + i) < fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)])))
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] + i;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] == ((double)1e30))
      complete = 
# 307 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
                0
# 307 "/home/e.sharaborin/basilisk/src/heights.h"
                     ;
  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  if (complete)
    return;
# 319 "/home/e.sharaborin/basilisk/src/heights.h"
  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)]);
# 332 "/home/e.sharaborin/basilisk/src/heights.h"
  double H[3][3], H0 = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)]);
  for (int i = -1; i <= 1; i++)
    for (int j = -1; j <= 1; j++)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.i)] == ((double)1e30) || orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.i)]) != ori)
 return;
      else
 H[i+1][j+1] = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.i)]) - H0;

  double h0 =
    2.*H0 + (H[2][2] + H[2][0] + H[0][0] + H[0][2] +
      30.*(H[2][1] + H[0][1] + H[1][0] + H[1][2]))/512.
    + 20.*ori;
  double h1 = (H[2][2] + H[2][0] - H[0][0] - H[0][2] +
        30.*(H[2][1] - H[0][1]))/128.;
  double h2 = (H[2][2] - H[2][0] - H[0][0] + H[0][2] +
        30.*(H[1][2] - H[1][0]))/128.;
  double h3 = (H[0][0] + H[2][2] - H[0][2] - H[2][0])/32.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] == ((double)1e30))
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] = h0 + h1*child.y + h2*child.z + h3*child.y*child.z - child.x/2.; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }

}
# 291 "/home/e.sharaborin/basilisk/src/heights.h"

static void refine_h_y (Point point, scalar h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 293 "/home/e.sharaborin/basilisk/src/heights.h"





  
# 298 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
 _Bool 
# 298 "/home/e.sharaborin/basilisk/src/heights.h"
      complete = 
# 298 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
                 1
# 298 "/home/e.sharaborin/basilisk/src/heights.h"
                     ;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    for (int i = -2; i <= 2; i++)
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) &&
   !(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).pid >= 0) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0])))).pid < 0) &&
   fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(h.i)])) <= 3.5 &&
   fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(h.i)]) + i) < fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)])))
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(h.i)] + i;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] == ((double)1e30))
      complete = 
# 307 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
                0
# 307 "/home/e.sharaborin/basilisk/src/heights.h"
                     ;
  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  if (complete)
    return;
# 319 "/home/e.sharaborin/basilisk/src/heights.h"
  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)]);
# 332 "/home/e.sharaborin/basilisk/src/heights.h"
  double H[3][3], H0 = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)]);
  for (int i = -1; i <= 1; i++)
    for (int j = -1; j <= 1; j++)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.i)] == ((double)1e30) || orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.i)]) != ori)
 return;
      else
 H[i+1][j+1] = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.i)]) - H0;

  double h0 =
    2.*H0 + (H[2][2] + H[2][0] + H[0][0] + H[0][2] +
      30.*(H[2][1] + H[0][1] + H[1][0] + H[1][2]))/512.
    + 20.*ori;
  double h1 = (H[2][2] + H[2][0] - H[0][0] - H[0][2] +
        30.*(H[2][1] - H[0][1]))/128.;
  double h2 = (H[2][2] - H[2][0] - H[0][0] + H[0][2] +
        30.*(H[1][2] - H[1][0]))/128.;
  double h3 = (H[0][0] + H[2][2] - H[0][2] - H[2][0])/32.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] == ((double)1e30))
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] = h0 + h1*child.z + h2*child.x + h3*child.z*child.x - child.y/2.; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }

}
# 291 "/home/e.sharaborin/basilisk/src/heights.h"

static void refine_h_z (Point point, scalar h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 293 "/home/e.sharaborin/basilisk/src/heights.h"





  
# 298 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
 _Bool 
# 298 "/home/e.sharaborin/basilisk/src/heights.h"
      complete = 
# 298 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
                 1
# 298 "/home/e.sharaborin/basilisk/src/heights.h"
                     ;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
    for (int i = -2; i <= 2; i++)
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+i >= 0 && point.k+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) &&
   !(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).pid >= 0) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i])))).pid < 0) &&
   fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.i)])) <= 3.5 &&
   fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.i)]) + i) < fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)])))
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.i)] + i;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] == ((double)1e30))
      complete = 
# 307 "/home/e.sharaborin/basilisk/src/heights.h" 3 4
                0
# 307 "/home/e.sharaborin/basilisk/src/heights.h"
                     ;
  } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
  if (complete)
    return;
# 319 "/home/e.sharaborin/basilisk/src/heights.h"
  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)]);
# 332 "/home/e.sharaborin/basilisk/src/heights.h"
  double H[3][3], H0 = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)]);
  for (int i = -1; i <= 1; i++)
    for (int j = -1; j <= 1; j++)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.i)] == ((double)1e30) || orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.i)]) != ori)
 return;
      else
 H[i+1][j+1] = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.i)]) - H0;

  double h0 =
    2.*H0 + (H[2][2] + H[2][0] + H[0][0] + H[0][2] +
      30.*(H[2][1] + H[0][1] + H[1][0] + H[1][2]))/512.
    + 20.*ori;
  double h1 = (H[2][2] + H[2][0] - H[0][0] - H[0][2] +
        30.*(H[2][1] - H[0][1]))/128.;
  double h2 = (H[2][2] - H[2][0] - H[0][0] + H[0][2] +
        30.*(H[1][2] - H[1][0]))/128.;
  double h3 = (H[0][0] + H[2][2] - H[0][2] - H[2][0])/32.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] == ((double)1e30))
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.i)] = h0 + h1*child.x + h2*child.y + h3*child.x*child.y - child.z/2.; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }

}







void heights (scalar c, vector h)
{ ;
  vector cs= new_vector("cs");
  {
# 364 "/home/e.sharaborin/basilisk/src/heights.h"

    for (int i = 0; i < nboundary; i++)
      _attribute[cs.x.i].boundary[i] = _attribute[c.i].boundary[i];
# 364 "/home/e.sharaborin/basilisk/src/heights.h"

    for (int i = 0; i < nboundary; i++)
      _attribute[cs.y.i].boundary[i] = _attribute[c.i].boundary[i];
# 364 "/home/e.sharaborin/basilisk/src/heights.h"

    for (int i = 0; i < nboundary; i++)
      _attribute[cs.z.i].boundary[i] = _attribute[c.i].boundary[i];}





  restriction (((scalar []){c,{-1}}));
  for (int j = -1; j <= 1; j += 2) {





     { { if (0 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[0]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = 0; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 379 "/home/e.sharaborin/basilisk/src/heights.h"

      {
# 380 "/home/e.sharaborin/basilisk/src/heights.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)] = ((double)1e30);
# 380 "/home/e.sharaborin/basilisk/src/heights.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] = ((double)1e30);
# 380 "/home/e.sharaborin/basilisk/src/heights.h"

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] = ((double)1e30);}; } } } }; }}; }

    for (int l = 1; l <= (grid->depth); l++) {




       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 388 "/home/e.sharaborin/basilisk/src/heights.h"

 {
# 389 "/home/e.sharaborin/basilisk/src/heights.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+2*j][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
# 389 "/home/e.sharaborin/basilisk/src/heights.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+2*j] [point.k+0]) + sizeof(Cell)))[(c.i)];
# 389 "/home/e.sharaborin/basilisk/src/heights.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+2*j]) + sizeof(Cell)))[(c.i)];}; } } } }; }}; }
# 400 "/home/e.sharaborin/basilisk/src/heights.h"
       { { if (l - 1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l - 1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l - 1; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 400 "/home/e.sharaborin/basilisk/src/heights.h"

 {
# 401 "/home/e.sharaborin/basilisk/src/heights.h"
 {
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+2*j][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)];
        }
# 401 "/home/e.sharaborin/basilisk/src/heights.h"
 {
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0]) + sizeof(Cell)))[(c.i)];
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j] [point.k+0]) + sizeof(Cell)))[(cs.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+2*j] [point.k+0]) + sizeof(Cell)))[(c.i)];
        }
# 401 "/home/e.sharaborin/basilisk/src/heights.h"
 {
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cs.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j]) + sizeof(Cell)))[(c.i)];
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+j]) + sizeof(Cell)))[(cs.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+2*j]) + sizeof(Cell)))[(c.i)];
        }} } } } }; }}; }






       { { if (l - 1 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[l - 1]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l - 1; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; point.k = _cache.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 411 "/home/e.sharaborin/basilisk/src/heights.h"

 {
# 412 "/home/e.sharaborin/basilisk/src/heights.h"

   _attribute[c.i].prolongation (point, cs.x);
# 412 "/home/e.sharaborin/basilisk/src/heights.h"

   _attribute[c.i].prolongation (point, cs.y);
# 412 "/home/e.sharaborin/basilisk/src/heights.h"

   _attribute[c.i].prolongation (point, cs.z);}; } } } }; }}; }
      { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, (scalar *)((vector []){{cs.x,cs.y,cs.z},{{-1},{-1},{-1}}}), l); };





       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; point.k = _active.p[_k].k; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 420 "/home/e.sharaborin/basilisk/src/heights.h"

        half_column (point, c, h, cs, j); } } } }; }}; }
    }
  }






  {
# 430 "/home/e.sharaborin/basilisk/src/heights.h"
 {
    _attribute[h.x.i].prolongation = no_data;
    _attribute[h.x.i].restriction = no_restriction;
  }
# 430 "/home/e.sharaborin/basilisk/src/heights.h"
 {
    _attribute[h.y.i].prolongation = no_data;
    _attribute[h.y.i].restriction = no_restriction;
  }
# 430 "/home/e.sharaborin/basilisk/src/heights.h"
 {
    _attribute[h.z.i].prolongation = no_data;
    _attribute[h.z.i].restriction = no_restriction;
  }}
  boundary ((scalar *)((vector []){{h.x,h.y,h.z},{{-1},{-1},{-1}}}));






  {
# 441 "/home/e.sharaborin/basilisk/src/heights.h"

    _attribute[h.x.i].prolongation = refine_h_x;
# 441 "/home/e.sharaborin/basilisk/src/heights.h"

    _attribute[h.y.i].prolongation = refine_h_y;
# 441 "/home/e.sharaborin/basilisk/src/heights.h"

    _attribute[h.z.i].prolongation = refine_h_z;}




  column_propagation (h);
 delete (((scalar []){cs.x,cs.y,cs.z,{-1}})); ; }
# 67 "/home/e.sharaborin/basilisk/src/curvature.h"
# 104 "/home/e.sharaborin/basilisk/src/curvature.h"
# 104 "/home/e.sharaborin/basilisk/src/curvature.h"

static double kappa_z (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 106 "/home/e.sharaborin/basilisk/src/curvature.h"

  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)]);
  for (int i = -1; i <= 1; i++)
    for (int j = -1; j <= 1; j++)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.z.i)] == ((double)1e30) || orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.z.i)]) != ori)
 return ((double)1e30);
  double hx = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)])/2.;
  double hy = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)])/2.;







  double filter = 0.2;
  double hxx = (filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)]) +
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)]) +
  filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)]))/
    ((1. + 2.*filter)*Delta);
  double hyy = (filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)]) +
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)]) +
  filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)]))/
    ((1. + 2.*filter)*Delta);
  double hxy = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.z.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.z.i)])/(4.*Delta);
  return (hxx*(1. + ((hy)*(hy))) + hyy*(1. + ((hx)*(hx))) - 2.*hxy*hx*hy)/
    pow(1. + ((hx)*(hx)) + ((hy)*(hy)), 3/2.);
}
# 104 "/home/e.sharaborin/basilisk/src/curvature.h"

static double kappa_x (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 106 "/home/e.sharaborin/basilisk/src/curvature.h"

  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)]);
  for (int i = -1; i <= 1; i++)
    for (int j = -1; j <= 1; j++)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.x.i)] == ((double)1e30) || orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.x.i)]) != ori)
 return ((double)1e30);
  double hx = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.x.i)])/2.;
  double hy = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.x.i)])/2.;







  double filter = 0.2;
  double hxx = (filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(h.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(h.x.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.x.i)]) +
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.x.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)]) +
  filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(h.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(h.x.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.x.i)]))/
    ((1. + 2.*filter)*Delta);
  double hyy = (filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(h.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(h.x.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(h.x.i)]) +
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.x.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)]) +
  filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(h.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(h.x.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(h.x.i)]))/
    ((1. + 2.*filter)*Delta);
  double hxy = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(h.x.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+-1]) + sizeof(Cell)))[(h.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+-1]) + sizeof(Cell)))[(h.x.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+1]) + sizeof(Cell)))[(h.x.i)])/(4.*Delta);
  return (hxx*(1. + ((hy)*(hy))) + hyy*(1. + ((hx)*(hx))) - 2.*hxy*hx*hy)/
    pow(1. + ((hx)*(hx)) + ((hy)*(hy)), 3/2.);
}
# 104 "/home/e.sharaborin/basilisk/src/curvature.h"

static double kappa_y (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 106 "/home/e.sharaborin/basilisk/src/curvature.h"

  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)]);
  for (int i = -1; i <= 1; i++)
    for (int j = -1; j <= 1; j++)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.y.i)] == ((double)1e30) || orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.y.i)]) != ori)
 return ((double)1e30);
  double hx = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)])/2.;
  double hy = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)])/2.;







  double filter = 0.2;
  double hxx = (filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)]) +
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)]) +
  filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)]))/
    ((1. + 2.*filter)*Delta);
  double hyy = (filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)]) +
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)]) +
  filter*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)] - 2.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)]))/
    ((1. + 2.*filter)*Delta);
  double hxy = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+1]) + sizeof(Cell)))[(h.y.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+-1]) + sizeof(Cell)))[(h.y.i)])/(4.*Delta);
  return (hxx*(1. + ((hy)*(hy))) + hyy*(1. + ((hx)*(hx))) - 2.*hxy*hx*hy)/
    pow(1. + ((hx)*(hx)) + ((hy)*(hy)), 3/2.);
}
# 135 "/home/e.sharaborin/basilisk/src/curvature.h"

static coord normal2_z (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 137 "/home/e.sharaborin/basilisk/src/curvature.h"

  scalar hz = h.z;
  if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] == ((double)1e30))
    return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
  double a = ori ? -1. : 1.;
  coord n;
  n.z = a;
  {
# 145 "/home/e.sharaborin/basilisk/src/curvature.h"
 {
    if ((point.i+-1 >= 0 && point.i+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori) {
      if ((point.i+1 >= 0 && point.i+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
 n.x = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)])/2.;
      else
 n.x = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    }
    else if ((point.i+1 >= 0 && point.i+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
      n.x = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    else
      n.x = ((double)1e30);
  }
# 145 "/home/e.sharaborin/basilisk/src/curvature.h"
 {
    if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+-1 >= 0 && point.j+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori) {
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+1 >= 0 && point.j+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
 n.y = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)])/2.;
      else
 n.y = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    }
    else if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+1 >= 0 && point.j+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
      n.y = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    else
      n.y = ((double)1e30);
  }}
  return n;
}
# 135 "/home/e.sharaborin/basilisk/src/curvature.h"

static coord normal2_x (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 137 "/home/e.sharaborin/basilisk/src/curvature.h"

  scalar hz = h.x;
  if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] == ((double)1e30))
    return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
  double a = ori ? -1. : 1.;
  coord n;
  n.x = a;
  {
# 145 "/home/e.sharaborin/basilisk/src/curvature.h"
 {
    if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+-1 >= 0 && point.j+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori) {
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+1 >= 0 && point.j+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
 n.y = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)])/2.;
      else
 n.y = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    }
    else if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+1 >= 0 && point.j+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
      n.y = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    else
      n.y = ((double)1e30);
  }
# 145 "/home/e.sharaborin/basilisk/src/curvature.h"
 {
    if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+-1 >= 0 && point.k+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)]) == ori) {
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+1 >= 0 && point.k+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)]) == ori)
 n.z = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)])/2.;
      else
 n.z = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    }
    else if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+1 >= 0 && point.k+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)]) == ori)
      n.z = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)]);
    else
      n.z = ((double)1e30);
  }}
  return n;
}
# 135 "/home/e.sharaborin/basilisk/src/curvature.h"

static coord normal2_y (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 137 "/home/e.sharaborin/basilisk/src/curvature.h"

  scalar hz = h.y;
  if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] == ((double)1e30))
    return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
  int ori = orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
  double a = ori ? -1. : 1.;
  coord n;
  n.y = a;
  {
# 145 "/home/e.sharaborin/basilisk/src/curvature.h"
 {
    if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+-1 >= 0 && point.k+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)]) == ori) {
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+1 >= 0 && point.k+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)]) == ori)
 n.z = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)])/2.;
      else
 n.z = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    }
    else if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+1 >= 0 && point.k+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)]) == ori)
      n.z = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(hz.i)]);
    else
      n.z = ((double)1e30);
  }
# 145 "/home/e.sharaborin/basilisk/src/curvature.h"
 {
    if ((point.i+-1 >= 0 && point.i+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori) {
      if ((point.i+1 >= 0 && point.i+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
 n.x = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)])/2.;
      else
 n.x = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    }
    else if ((point.i+1 >= 0 && point.i+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]) == ori)
      n.x = a*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(hz.i)]);
    else
      n.x = ((double)1e30);
  }}
  return n;
}
# 160 "/home/e.sharaborin/basilisk/src/curvature.h"

static coord normal_z (Point point, vector h) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 161 "/home/e.sharaborin/basilisk/src/curvature.h"

  coord n = normal2_z (point, h);
  double nn = fabs(n.x) + fabs(n.y) + fabs(n.z);
  if (nn < ((double)1e30)) {
    {
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.x /= nn;
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.y /= nn;
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.z /= nn;}
    return n;
  }
  return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
}
# 160 "/home/e.sharaborin/basilisk/src/curvature.h"

static coord normal_x (Point point, vector h) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 161 "/home/e.sharaborin/basilisk/src/curvature.h"

  coord n = normal2_x (point, h);
  double nn = fabs(n.y) + fabs(n.z) + fabs(n.x);
  if (nn < ((double)1e30)) {
    {
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.y /= nn;
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.z /= nn;
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.x /= nn;}
    return n;
  }
  return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
}
# 160 "/home/e.sharaborin/basilisk/src/curvature.h"

static coord normal_y (Point point, vector h) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 161 "/home/e.sharaborin/basilisk/src/curvature.h"

  coord n = normal2_y (point, h);
  double nn = fabs(n.z) + fabs(n.x) + fabs(n.y);
  if (nn < ((double)1e30)) {
    {
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.z /= nn;
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.x /= nn;
# 165 "/home/e.sharaborin/basilisk/src/curvature.h"

      n.y /= nn;}
    return n;
  }
  return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
}
# 179 "/home/e.sharaborin/basilisk/src/curvature.h"
static double height_curvature (Point point, scalar c, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 180 "/home/e.sharaborin/basilisk/src/curvature.h"







  typedef struct {
    double n;
    double (* kappa) (Point, vector);
  } NormKappa;
  struct { NormKappa x, y, z; } n;
  {
# 192 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.x.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], n.x.kappa = kappa_x;
# 192 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.y.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)], n.y.kappa = kappa_y;
# 192 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.z.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)], n.z.kappa = kappa_z;}
  double (* kappaf) (Point, vector) = 
# 194 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
                                     ((void *)0)
# 194 "/home/e.sharaborin/basilisk/src/curvature.h"
                                         ; (void)(kappaf);




  if (fabs(n.x.n) < fabs(n.y.n))
    { NormKappa tmp = n.x; n.x = n.y; n.y = tmp; };

  if (fabs(n.x.n) < fabs(n.z.n))
    { NormKappa tmp = n.x; n.x = n.z; n.z = tmp; };
  if (fabs(n.y.n) < fabs(n.z.n))
    { NormKappa tmp = n.y; n.y = n.z; n.z = tmp; };





  double kappa = ((double)1e30);
  {
# 212 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (kappa == ((double)1e30)) {
      kappa = n.x.kappa (point, h);
      if (kappa != ((double)1e30)) {
 kappaf = n.x.kappa;
 if (n.x.n < 0.)
   kappa = - kappa;
      }
    }
# 212 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (kappa == ((double)1e30)) {
      kappa = n.y.kappa (point, h);
      if (kappa != ((double)1e30)) {
 kappaf = n.y.kappa;
 if (n.y.n < 0.)
   kappa = - kappa;
      }
    }
# 212 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (kappa == ((double)1e30)) {
      kappa = n.z.kappa (point, h);
      if (kappa != ((double)1e30)) {
 kappaf = n.z.kappa;
 if (n.z.n < 0.)
   kappa = - kappa;
      }
    }}

  if (kappa != ((double)1e30)) {




    if (fabs(kappa) > 1./Delta)
      kappa = ((kappa) > 0 ? 1 : -1)/Delta;
# 247 "/home/e.sharaborin/basilisk/src/curvature.h"
  }

  return kappa;
}






coord height_normal (Point point, scalar c, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 258 "/home/e.sharaborin/basilisk/src/curvature.h"







  typedef struct {
    double n;
    coord (* normal) (Point, vector);
  } NormNormal;
  struct { NormNormal x, y, z; } n;
  {
# 270 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.x.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], n.x.normal = normal_x;
# 270 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.y.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(c.i)], n.y.normal = normal_y;
# 270 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.z.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(c.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(c.i)], n.z.normal = normal_z;}




  if (fabs(n.x.n) < fabs(n.y.n))
    { NormNormal tmp = n.x; n.x = n.y; n.y = tmp; };

  if (fabs(n.x.n) < fabs(n.z.n))
    { NormNormal tmp = n.x; n.x = n.z; n.z = tmp; };
  if (fabs(n.y.n) < fabs(n.z.n))
    { NormNormal tmp = n.y; n.y = n.z; n.z = tmp; };





  coord normal = {((double)1e30), ((double)1e30), ((double)1e30)};
  {
# 289 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (normal.x == ((double)1e30))
      normal = n.x.normal (point, h);
# 289 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (normal.y == ((double)1e30))
      normal = n.y.normal (point, h);
# 289 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (normal.z == ((double)1e30))
      normal = n.z.normal (point, h);}

  return normal;
}
# 301 "/home/e.sharaborin/basilisk/src/curvature.h"

coord height_normal_z (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 303 "/home/e.sharaborin/basilisk/src/curvature.h"

  coord nx = normal2_x (point, h);
  coord ny = normal2_y (point, h);
  if (fabs(nx.y) < fabs(ny.x)) {
    normalize (&nx);
    return nx;
  }
  else if (ny.x != ((double)1e30)) {
    normalize (&ny);
    return ny;
  }
  return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
}
# 301 "/home/e.sharaborin/basilisk/src/curvature.h"

coord height_normal_x (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 303 "/home/e.sharaborin/basilisk/src/curvature.h"

  coord nx = normal2_y (point, h);
  coord ny = normal2_z (point, h);
  if (fabs(nx.z) < fabs(ny.y)) {
    normalize (&nx);
    return nx;
  }
  else if (ny.y != ((double)1e30)) {
    normalize (&ny);
    return ny;
  }
  return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
}
# 301 "/home/e.sharaborin/basilisk/src/curvature.h"

coord height_normal_y (Point point, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 303 "/home/e.sharaborin/basilisk/src/curvature.h"

  coord nx = normal2_z (point, h);
  coord ny = normal2_x (point, h);
  if (fabs(nx.x) < fabs(ny.z)) {
    normalize (&nx);
    return nx;
  }
  else if (ny.z != ((double)1e30)) {
    normalize (&ny);
    return ny;
  }
  return (coord){((double)1e30), ((double)1e30), ((double)1e30)};
}
# 330 "/home/e.sharaborin/basilisk/src/curvature.h"
# 1 "parabola.h"
# 1 "/home/e.sharaborin/basilisk/src/parabola.h"
# 1 "utils.h"
# 2 "/home/e.sharaborin/basilisk/src/parabola.h"






typedef struct {
  coord o;




  double t[3][3];



  double ** M, rhs[6], a[6];


} ParabolaFit;

static void parabola_fit_init (ParabolaFit * p, coord o, coord m)
{
  {
# 25 "/home/e.sharaborin/basilisk/src/parabola.h"

    p->o.x = o.x;
# 25 "/home/e.sharaborin/basilisk/src/parabola.h"

    p->o.y = o.y;
# 25 "/home/e.sharaborin/basilisk/src/parabola.h"

    p->o.z = o.z;}






  double max;
  coord nx = {0., 0., 0.}, ny, nz;
  int d = 0;

  {
# 37 "/home/e.sharaborin/basilisk/src/parabola.h"

    nz.x = m.x;
# 37 "/home/e.sharaborin/basilisk/src/parabola.h"

    nz.y = m.y;
# 37 "/home/e.sharaborin/basilisk/src/parabola.h"

    nz.z = m.z;}
  normalize (&nz);
  max = ((nz.x)*(nz.x));

  if (((nz.y)*(nz.y)) > max) { max = ((nz.y)*(nz.y)); d = 1; }
  if (((nz.z)*(nz.z)) > max) d = 2;
  switch (d) {
  case 0: nx.x = - nz.z/nz.x; nx.z = 1.0; break;
  case 1: nx.y = - nz.z/nz.y; nx.z = 1.0; break;
  case 2: nx.z = - nz.x/nz.z; nx.x = 1.0; break;
  }
  normalize (&nx);


  {
# 52 "/home/e.sharaborin/basilisk/src/parabola.h"

    ny.x = nz.y*nx.z - nz.z*nx.y;
# 52 "/home/e.sharaborin/basilisk/src/parabola.h"

    ny.y = nz.z*nx.x - nz.x*nx.z;
# 52 "/home/e.sharaborin/basilisk/src/parabola.h"

    ny.z = nz.x*nx.y - nz.y*nx.x;}


  p->t[0][0] = nx.x; p->t[0][1] = nx.y; p->t[0][2] = nx.z;
  p->t[1][0] = ny.x; p->t[1][1] = ny.y; p->t[1][2] = ny.z;
  p->t[2][0] = nz.x; p->t[2][1] = nz.y; p->t[2][2] = nz.z;



  int n = 6;


  p->M = (double **) matrix_new (n, n, sizeof(double));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++)
      p->M[i][j] = 0.;
    p->rhs[i] = 0.;
  }
}

static void parabola_fit_add (ParabolaFit * p, coord m, double w)
{
# 85 "/home/e.sharaborin/basilisk/src/parabola.h"
  double x1 = m.x - p->o.x, y1 = m.y - p->o.y, z1 = m.z - p->o.z;
  double x = p->t[0][0]*x1 + p->t[0][1]*y1 + p->t[0][2]*z1;
  double y = p->t[1][0]*x1 + p->t[1][1]*y1 + p->t[1][2]*z1;
  double z = p->t[2][0]*x1 + p->t[2][1]*y1 + p->t[2][2]*z1;
# 98 "/home/e.sharaborin/basilisk/src/parabola.h"
  double x2 = x*x, x3 = x2*x, x4 = x3*x;
  double y2 = y*y, y3 = y2*y, y4 = y3*y;
  p->M[0][0] += w*x4; p->M[1][1] += w*y4; p->M[2][2] += w*x2*y2;
  p->M[3][3] += w*x2; p->M[4][4] += w*y2; p->M[5][5] += w;
  p->M[0][2] += w*x3*y; p->M[0][3] += w*x3; p->M[0][4] += w*x2*y;
  p->M[1][2] += w*x*y3; p->M[1][3] += w*x*y2; p->M[1][4] += w*y3;
  p->M[2][5] += w*x*y;
  p->M[3][5] += w*x;
  p->M[4][5] += w*y;
  p->rhs[0] += w*x2*z; p->rhs[1] += w*y2*z; p->rhs[2] += w*x*y*z;
  p->rhs[3] += w*x*z; p->rhs[4] += w*y*z; p->rhs[5] += w*z;


}

static double parabola_fit_solve (ParabolaFit * p)
{
# 139 "/home/e.sharaborin/basilisk/src/parabola.h"
  p->M[0][1] = p->M[2][2]; p->M[0][5] = p->M[3][3];
  p->M[1][5] = p->M[4][4];
  p->M[2][3] = p->M[0][4]; p->M[2][4] = p->M[1][3];
  p->M[3][4] = p->M[2][5];
  for (int i = 1; i < 6; i++)
    for (int j = 0; j < i; j++)
      p->M[i][j] = p->M[j][i];
  double pivmin = matrix_inverse (p->M, 6, 1e-10);
  if (pivmin)
    for (int i = 0; i < 6; i++) {
      p->a[i] = 0.;
      for (int j = 0; j < 6; j++)
 p->a[i] += p->M[i][j]*p->rhs[j];
    }
  else
    for (int i = 0; i < 6; i++)
      p->a[i] = 0.;


  matrix_free (p->M);
  return pivmin;
}

static double parabola_fit_curvature (ParabolaFit * p,
          double kappamax, double * kmax)
{
  double kappa;
# 176 "/home/e.sharaborin/basilisk/src/parabola.h"
  double hxx = 2.*p->a[0], hyy = 2.*p->a[1], hxy = p->a[2];
  double hx = p->a[3], hy = p->a[4];

  double dnm = 1. + ((hx)*(hx)) + ((hy)*(hy));
  kappa = - (hxx*(1. + ((hy)*(hy))) + hyy*(1. + ((hx)*(hx))) - 2.*hxy*hx*hy)
    /sqrt (dnm*dnm*dnm);
  if (kmax) {
    double kg = (hxx*hyy - hxy*hxy)/(dnm*dnm);
    double a = kappa*kappa/4. - kg;
    *kmax = fabs (kappa/2.);
    if (a >= 0.)
      *kmax += sqrt (a);
  }

  if (fabs (kappa) > kappamax) {
    if (kmax)
      *kmax = kappamax;
    return kappa > 0. ? kappamax : - kappamax;
  }
  return kappa;
}
# 331 "/home/e.sharaborin/basilisk/src/curvature.h"






static int independents (coord * p, int n)
{
  if (n < 2)
    return n;
  int ni = 1;
  for (int j = 1; j < n; j++) {
    
# 343 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
   _Bool 
# 343 "/home/e.sharaborin/basilisk/src/curvature.h"
        depends = 
# 343 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
                  0
# 343 "/home/e.sharaborin/basilisk/src/curvature.h"
                       ;
    for (int i = 0; i < j && !depends; i++) {
      double d2 = 0.;
      {
# 346 "/home/e.sharaborin/basilisk/src/curvature.h"

 d2 += ((p[i].x - p[j].x)*(p[i].x - p[j].x));
# 346 "/home/e.sharaborin/basilisk/src/curvature.h"

 d2 += ((p[i].y - p[j].y)*(p[i].y - p[j].y));
# 346 "/home/e.sharaborin/basilisk/src/curvature.h"

 d2 += ((p[i].z - p[j].z)*(p[i].z - p[j].z));}
      depends = (d2 < ((0.5)*(0.5)));
    }
    ni += !depends;
  }
  return ni;
}






static double height_curvature_fit (Point point, scalar c, vector h)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 361 "/home/e.sharaborin/basilisk/src/curvature.h"






  coord ip[3 == 2 ? 6 : 27];
  int n = 0;




  {
# 373 "/home/e.sharaborin/basilisk/src/curvature.h"
 {





    int n1 = 0, n2 = 0;






    for (int i = -1; i <= 1; i++)
      for (int j = -1; j <= 1; j++)
 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.z.i)] != ((double)1e30)) {
   if (orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.z.i)])) n1++; else n2++;
 }

    int ori = (n1 > n2);
# 404 "/home/e.sharaborin/basilisk/src/curvature.h"
    for (int i = -1; i <= 1; i++)
      for (int j = -1; j <= 1; j++)
 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.z.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.z.i)]) == ori)
   ip[n].x = i, ip[n].y = j, ip[n++].z = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j] [point.k+0]) + sizeof(Cell)))[(h.z.i)]);

  }
# 373 "/home/e.sharaborin/basilisk/src/curvature.h"
 {





    int n1 = 0, n2 = 0;






    for (int i = -1; i <= 1; i++)
      for (int j = -1; j <= 1; j++)
 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.x.i)] != ((double)1e30)) {
   if (orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.x.i)])) n1++; else n2++;
 }

    int ori = (n1 > n2);
# 404 "/home/e.sharaborin/basilisk/src/curvature.h"
    for (int i = -1; i <= 1; i++)
      for (int j = -1; j <= 1; j++)
 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.x.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.x.i)]) == ori)
   ip[n].y = i, ip[n].z = j, ip[n++].x = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+j]) + sizeof(Cell)))[(h.x.i)]);

  }
# 373 "/home/e.sharaborin/basilisk/src/curvature.h"
 {





    int n1 = 0, n2 = 0;






    for (int i = -1; i <= 1; i++)
      for (int j = -1; j <= 1; j++)
 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.y.i)] != ((double)1e30)) {
   if (orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.y.i)])) n1++; else n2++;
 }

    int ori = (n1 > n2);
# 404 "/home/e.sharaborin/basilisk/src/curvature.h"
    for (int i = -1; i <= 1; i++)
      for (int j = -1; j <= 1; j++)
 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.y.i)] != ((double)1e30) && orientation(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.y.i)]) == ori)
   ip[n].z = i, ip[n].x = j, ip[n++].y = height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0] [point.k+i]) + sizeof(Cell)))[(h.y.i)]);

  }}





  if (independents (ip, n) < (3 == 2 ? 3 : 9))
    return ((double)1e30);





  coord m = mycs (point, c), fc;
  double alpha = plane_alpha (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], m);
  double area = plane_area_center (m, alpha, &fc);
  ParabolaFit fit;
  parabola_fit_init (&fit, fc, m);




  parabola_fit_add (&fit, fc, area*100.);






  for (int i = 0; i < n; i++)
    parabola_fit_add (&fit, ip[i], 1.);
  parabola_fit_solve (&fit);
  double kappa = parabola_fit_curvature (&fit, 2., 
# 441 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
                                                  ((void *)0)
# 441 "/home/e.sharaborin/basilisk/src/curvature.h"
                                                      )/Delta;



  return kappa;
}






static double centroids_curvature_fit (Point point, scalar c)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 454 "/home/e.sharaborin/basilisk/src/curvature.h"






  coord m = mycs (point, c), fc;
  double alpha = plane_alpha (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], m);
  plane_area_center (m, alpha, &fc);
  ParabolaFit fit;
  parabola_fit_init (&fit, fc, m);





  coord r = {x,y,z};
   { { int _nn = 1 + 0 ? 1 + 0 : 2; int _i = point.i, _j = point.j, _k = point.k; for (int _l = - _nn; _l <= _nn; _l++) { point.i = _i + _l; for (int _m = - _nn; _m <= _nn; _m++) { point.j = _j + _m; for (int _n = - _nn; _n <= _nn; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] < 1.) {
      coord m = mycs (point, c), fc;
      double alpha = plane_alpha (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)], m);
      double area = plane_area_center (m, alpha, &fc);
      coord rn = {x,y,z};
      {
# 477 "/home/e.sharaborin/basilisk/src/curvature.h"

 fc.x += (rn.x - r.x)/Delta;
# 477 "/home/e.sharaborin/basilisk/src/curvature.h"

 fc.y += (rn.y - r.y)/Delta;
# 477 "/home/e.sharaborin/basilisk/src/curvature.h"

 fc.z += (rn.z - r.z)/Delta;}
      parabola_fit_add (&fit, fc, area);
    } } } } point.i = _i; point.j = _j; point.k = _k;}; }
  parabola_fit_solve (&fit);
  double kappa = parabola_fit_curvature (&fit, 2., 
# 482 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
                                                  ((void *)0)
# 482 "/home/e.sharaborin/basilisk/src/curvature.h"
                                                      )/Delta;



  return kappa;
}
# 500 "/home/e.sharaborin/basilisk/src/curvature.h"
static inline 
# 500 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
             _Bool 
# 500 "/home/e.sharaborin/basilisk/src/curvature.h"
                  interfacial (Point point, scalar c)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 501 "/home/e.sharaborin/basilisk/src/curvature.h"

  if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.) {
    for (int i = -1; i <= 1; i += 2)
      {
# 504 "/home/e.sharaborin/basilisk/src/curvature.h"

 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0.)
   return 
# 506 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
         1
# 506 "/home/e.sharaborin/basilisk/src/curvature.h"
             ;
# 504 "/home/e.sharaborin/basilisk/src/curvature.h"

 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0.)
   return 
# 506 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
         1
# 506 "/home/e.sharaborin/basilisk/src/curvature.h"
             ;
# 504 "/home/e.sharaborin/basilisk/src/curvature.h"

 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] <= 0.)
   return 
# 506 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
         1
# 506 "/home/e.sharaborin/basilisk/src/curvature.h"
             ;}
  }
  else if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] <= 0.) {
    for (int i = -1; i <= 1; i += 2)
      {
# 510 "/home/e.sharaborin/basilisk/src/curvature.h"

 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.)
   return 
# 512 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
         1
# 512 "/home/e.sharaborin/basilisk/src/curvature.h"
             ;
# 510 "/home/e.sharaborin/basilisk/src/curvature.h"

 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i] [point.k+0]) + sizeof(Cell)))[(c.i)] >= 1.)
   return 
# 512 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
         1
# 512 "/home/e.sharaborin/basilisk/src/curvature.h"
             ;
# 510 "/home/e.sharaborin/basilisk/src/curvature.h"

 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+i]) + sizeof(Cell)))[(c.i)] >= 1.)
   return 
# 512 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
         1
# 512 "/home/e.sharaborin/basilisk/src/curvature.h"
             ;}
  }
  else
    return 
# 515 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
          1
# 515 "/home/e.sharaborin/basilisk/src/curvature.h"
              ;
  return 
# 516 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
        0
# 516 "/home/e.sharaborin/basilisk/src/curvature.h"
             ;
}
# 530 "/home/e.sharaborin/basilisk/src/curvature.h"
typedef struct {
  int h;
  int f;
  int a;
  int c;
} cstats;

struct Curvature {
  scalar c, kappa;
  double sigma;
  
# 540 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
 _Bool 
# 540 "/home/e.sharaborin/basilisk/src/curvature.h"
      add;
};


cstats curvature (struct Curvature p)
{ ;
  scalar c = p.c, kappa = p.kappa;
  double sigma = p.sigma ? p.sigma : 1.;
  int sh = 0, sf = 0, sa = 0, sc = 0;
  vector ch = _attribute[c.i].height, h = (ch).x.i ? (ch) : new_vector("h");
  if (!ch.x.i)
    heights (c, h);






  _attribute[kappa.i].refine = _attribute[kappa.i].prolongation = curvature_prolongation;
  _attribute[kappa.i].restriction = curvature_restriction;






  scalar k= new_scalar("k");
  scalar_clone (k, kappa);

   {


 {
double _sh = sh; double _sf = sf;
# 569 "/home/e.sharaborin/basilisk/src/curvature.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 569 "/home/e.sharaborin/basilisk/src/curvature.h"
 {




    if (!interfacial (point, c))
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(k.i)] = ((double)1e30);





    else if ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(k.i)] = height_curvature (point, c, h)) != ((double)1e30))
      _sh++;
    else if ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(k.i)] = height_curvature_fit (point, c, h)) != ((double)1e30))
      _sf++;
  } } } } }; sh += _sh;
;
 sf += _sf;
;



}
# 585 "/home/e.sharaborin/basilisk/src/curvature.h"
 }
  boundary (((scalar []){k,{-1}}));

   {


 {
double _sa = sa; double _sc = sc;
# 588 "/home/e.sharaborin/basilisk/src/curvature.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 588 "/home/e.sharaborin/basilisk/src/curvature.h"
 {





    double kf;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(k.i)] < ((double)1e30))
      kf = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(k.i)];
    else if (interfacial (point, c)) {





      double sk = 0., a = 0.;
       { { int _nn = 1 + 0 ? 1 + 0 : 2; int _i = point.i, _j = point.j, _k = point.k; for (int _l = - _nn; _l <= _nn; _l++) { point.i = _i + _l; for (int _m = - _nn; _m <= _nn; _m++) { point.j = _j + _m; for (int _n = - _nn; _n <= _nn; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
 if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(k.i)] < ((double)1e30))
   sk += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(k.i)], a++; } } } point.i = _i; point.j = _j; point.k = _k;}; }
      if (a > 0.)
 kf = sk/a, _sa++;
      else




 kf = centroids_curvature_fit (point, c), _sc++;
    }
    else
      kf = ((double)1e30);




    if (kf == ((double)1e30))
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(kappa.i)] = ((double)1e30);
    else if (p.add)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(kappa.i)] += sigma*kf;
    else
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(kappa.i)] = sigma*kf;
  } } } } }; sa += _sa;
;
 sc += _sc;
;



}
# 628 "/home/e.sharaborin/basilisk/src/curvature.h"
 }
  boundary (((scalar []){kappa,{-1}}));

  { cstats _ret = (cstats){sh, sf, sa, sc}; delete (((scalar []){k,{-1}})); { if (!(ch).x.i) delete (((scalar []){h.x,h.y,h.z,{-1}})); } ; return _ret; }
 delete (((scalar []){k,{-1}})); { if (!(ch).x.i) delete (((scalar []){h.x,h.y,h.z,{-1}})); } ; }
# 651 "/home/e.sharaborin/basilisk/src/curvature.h"
# 651 "/home/e.sharaborin/basilisk/src/curvature.h"

static double pos_x (Point point, vector h, coord * G, coord * Z)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 653 "/home/e.sharaborin/basilisk/src/curvature.h"

  if (fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)])) > 1.)
    return ((double)1e30);
  coord o = {x, y, z};
  o.x += height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.x.i)])*Delta;
  double pos = 0.;
  {
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.x - Z->x)*G->x;
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.y - Z->y)*G->y;
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.z - Z->z)*G->z;}
  return pos;
}
# 651 "/home/e.sharaborin/basilisk/src/curvature.h"

static double pos_y (Point point, vector h, coord * G, coord * Z)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 653 "/home/e.sharaborin/basilisk/src/curvature.h"

  if (fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)])) > 1.)
    return ((double)1e30);
  coord o = {x, y, z};
  o.y += height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.y.i)])*Delta;
  double pos = 0.;
  {
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.y - Z->y)*G->y;
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.z - Z->z)*G->z;
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.x - Z->x)*G->x;}
  return pos;
}
# 651 "/home/e.sharaborin/basilisk/src/curvature.h"

static double pos_z (Point point, vector h, coord * G, coord * Z)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 653 "/home/e.sharaborin/basilisk/src/curvature.h"

  if (fabs(height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)])) > 1.)
    return ((double)1e30);
  coord o = {x, y, z};
  o.z += height(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(h.z.i)])*Delta;
  double pos = 0.;
  {
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.z - Z->z)*G->z;
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.x - Z->x)*G->x;
# 659 "/home/e.sharaborin/basilisk/src/curvature.h"

    pos += (o.y - Z->y)*G->y;}
  return pos;
}







static double height_position (Point point, scalar f, vector h,
          coord * G, coord * Z)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); int kg = 0; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 672 "/home/e.sharaborin/basilisk/src/curvature.h"







  typedef struct {
    double n;
    double (* pos) (Point, vector, coord *, coord *);
  } NormPos;
  struct { NormPos x, y, z; } n;
  {
# 684 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.x.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)], n.x.pos = pos_x;
# 684 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.y.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)], n.y.pos = pos_y;
# 684 "/home/e.sharaborin/basilisk/src/curvature.h"

    n.z.n = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)], n.z.pos = pos_z;}




  if (fabs(n.x.n) < fabs(n.y.n))
    { NormPos tmp = n.x; n.x = n.y; n.y = tmp; };

  if (fabs(n.x.n) < fabs(n.z.n))
    { NormPos tmp = n.x; n.x = n.z; n.z = tmp; };
  if (fabs(n.y.n) < fabs(n.z.n))
    { NormPos tmp = n.y; n.y = n.z; n.z = tmp; };





  double pos = ((double)1e30);
  {
# 703 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (pos == ((double)1e30))
      pos = n.x.pos (point, h, G, Z);
# 703 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (pos == ((double)1e30))
      pos = n.y.pos (point, h, G, Z);
# 703 "/home/e.sharaborin/basilisk/src/curvature.h"

    if (pos == ((double)1e30))
      pos = n.z.pos (point, h, G, Z);}

  return pos;
}
# 719 "/home/e.sharaborin/basilisk/src/curvature.h"
struct Position {
  scalar f, pos;
  coord G, Z;
  
# 722 "/home/e.sharaborin/basilisk/src/curvature.h" 3 4
 _Bool 
# 722 "/home/e.sharaborin/basilisk/src/curvature.h"
      add;
};

void position (struct Position p)
{
  scalar f = p.f, pos = p.pos;
  coord * G = &p.G, * Z = &p.Z;






  _attribute[pos.i].refine = _attribute[pos.i].prolongation = curvature_prolongation;
  _attribute[pos.i].restriction = curvature_restriction;


  vector fh = _attribute[f.i].height, h = (fh).x.i ? (fh) : new_vector("h");
  if (!fh.x.i)
    heights (f, h);
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 742 "/home/e.sharaborin/basilisk/src/curvature.h"
 {
    if (interfacial (point, f)) {
      double hp = height_position (point, f, h, G, Z);
      if (hp == ((double)1e30)) {





 coord n = mycs (point, f), o = {x,y,z}, c;
 double alpha = plane_alpha (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)], n);
 plane_area_center (n, alpha, &c);
 hp = 0.;
 {
# 755 "/home/e.sharaborin/basilisk/src/curvature.h"

   hp += (o.x + Delta*c.x - Z->x)*G->x;
# 755 "/home/e.sharaborin/basilisk/src/curvature.h"

   hp += (o.y + Delta*c.y - Z->y)*G->y;
# 755 "/home/e.sharaborin/basilisk/src/curvature.h"

   hp += (o.z + Delta*c.z - Z->z)*G->z;}
      }
      if (p.add)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(pos.i)] += hp;
      else
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(pos.i)] = hp;
    }
    else
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(pos.i)] = ((double)1e30);
  } } } } }; }
  boundary (((scalar []){pos,{-1}}));
 { if (!(fh).x.i) delete (((scalar []){h.x,h.y,h.z,{-1}})); } }
# 15 "/home/e.sharaborin/basilisk/src/tension.h"
# 1 "iforce.h"
# 1 "/home/e.sharaborin/basilisk/src/iforce.h"
# 20 "/home/e.sharaborin/basilisk/src/iforce.h"
# 30 "/home/e.sharaborin/basilisk/src/iforce.h"
static int defaults_3_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i = 0); *ip = i; *tp = t; return ret; } static int defaults_3 (const int i, const double t, Event * _ev) { ; {
  if (((a.x).i >= 65536)) {
    a = new_face_vector("a");
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 33 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 33 "/home/e.sharaborin/basilisk/src/iforce.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)] = 0.; } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 33 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 33 "/home/e.sharaborin/basilisk/src/iforce.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)] = 0.; } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 33 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 33 "/home/e.sharaborin/basilisk/src/iforce.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)] = 0.; } }} } } }
# 34 "/home/e.sharaborin/basilisk/src/iforce.h"
 ; }
    boundary ((scalar *)((vector []){{a.x,a.y,a.z},{{-1},{-1},{-1}}}));
  }
 ; } return 0; }






static int acceleration_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int acceleration_0 (const int i, const double t, Event * _ev) { ;
{





  scalar * list = 
# 51 "/home/e.sharaborin/basilisk/src/iforce.h" 3 4
                 ((void *)0)
# 51 "/home/e.sharaborin/basilisk/src/iforce.h"
                     ;
  if (interfaces) for (scalar f = *interfaces, *_i102 = interfaces; ((scalar *)&f)->i >= 0; f = *++_i102)
    if (_attribute[f.i].phi.i) {
      list = list_add (list, f);






       { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 61 "/home/e.sharaborin/basilisk/src/iforce.h"

 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) < (0.) ? (0.) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) > (1.) ? (1.) : (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])); } } } }; }
      boundary (((scalar []){f,{-1}}));
    }
# 74 "/home/e.sharaborin/basilisk/src/iforce.h"
  if (list) for (scalar f = *list, *_i103 = list; ((scalar *)&f)->i >= 0; f = *++_i103)
    _attribute[f.i].prolongation = _attribute[p.i].prolongation;
  boundary (list);
# 87 "/home/e.sharaborin/basilisk/src/iforce.h"
  vector ia = a;
   {
if (!((alpha.x).i >= 65536) && !((fm.x).i >= 65536)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.x.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.y.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.z.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} } } }
# 108 "/home/e.sharaborin/basilisk/src/iforce.h"
 ; }
if (((alpha.x).i >= 65536) && !((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.x.i)] += _const_alpha.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.y.i)] += _const_alpha.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.z.i)] += _const_alpha.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} } } }
# 108 "/home/e.sharaborin/basilisk/src/iforce.h"
 ; }
if (!((alpha.x).i >= 65536) && ((fm.x).i >= 65536)) {
# 128 "/home/e.sharaborin/basilisk/src/iforce.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.x.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/_const_fm.x*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.y.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/_const_fm.y*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.z.i)] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/_const_fm.z*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} } } }
# 108 "/home/e.sharaborin/basilisk/src/iforce.h"
 ; }
if (((alpha.x).i >= 65536) && ((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 130 "/home/e.sharaborin/basilisk/src/iforce.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.x.i)] += _const_alpha.x/_const_fm.x*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.y.i)] += _const_alpha.y/_const_fm.y*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"
{
# 88 "/home/e.sharaborin/basilisk/src/iforce.h"

    if (list) for (scalar f = *list, *_i104 = list; ((scalar *)&f)->i >= 0; f = *++_i104)
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] != ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)]) {
# 100 "/home/e.sharaborin/basilisk/src/iforce.h"
 scalar phi = _attribute[f.i].phi;
 double phif =
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30)) ?
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)])/2. :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] :
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] < ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(phi.i)] :
   0.;
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ia.z.i)] += _const_alpha.z/_const_fm.z*phif*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(f.i)])/Delta;
      } } }} } } }
# 108 "/home/e.sharaborin/basilisk/src/iforce.h"
 ; } }






  if (list) for (scalar f = *list, *_i105 = list; ((scalar *)&f)->i >= 0; f = *++_i105)
    _attribute[f.i].prolongation = fraction_refine;
  boundary (list);






  if (list) for (scalar f = *list, *_i106 = list; ((scalar *)&f)->i >= 0; f = *++_i106) {
    scalar phi = _attribute[f.i].phi;
    delete (((scalar []){phi,{-1}}));
    _attribute[f.i].phi.i = 0;
  }
  free(list);
 ; } return 0; }
# 16 "/home/e.sharaborin/basilisk/src/tension.h"
# 36 "/home/e.sharaborin/basilisk/src/tension.h"
double CFL_SIGMA=0.3;
static int stability_1_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int stability_1 (const int i, const double t, Event * _ev) { ; {





  double amin = ((double)1e30), amax = -((double)1e30), dmin = ((double)1e30);
   {


 {
double _amin = amin; double _amax = amax; double _dmin = dmin;
# 44 "/home/e.sharaborin/basilisk/src/tension.h"

if (!((alpha.x).i >= 65536) && !((fm.x).i >= 65536)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] > _amax) _amax = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)];
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] < _amin) _amin = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)];
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] > _amax) _amax = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)];
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] < _amin) _amin = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)];
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] > _amax) _amax = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)];
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] < _amin) _amin = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)];
    if (Delta < _dmin) _dmin = Delta;
  } } }} } } }
# 48 "/home/e.sharaborin/basilisk/src/tension.h"
 ; }
if (((alpha.x).i >= 65536) && !((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (_const_alpha.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] > _amax) _amax = _const_alpha.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)];
    if (_const_alpha.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)] < _amin) _amin = _const_alpha.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)];
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (_const_alpha.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] > _amax) _amax = _const_alpha.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)];
    if (_const_alpha.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)] < _amin) _amin = _const_alpha.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)];
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (_const_alpha.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] > _amax) _amax = _const_alpha.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)];
    if (_const_alpha.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)] < _amin) _amin = _const_alpha.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)];
    if (Delta < _dmin) _dmin = Delta;
  } } }} } } }
# 48 "/home/e.sharaborin/basilisk/src/tension.h"
 ; }
if (!((alpha.x).i >= 65536) && ((fm.x).i >= 65536)) {
# 68 "/home/e.sharaborin/basilisk/src/tension.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/_const_fm.x > _amax) _amax = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/_const_fm.x;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/_const_fm.x < _amin) _amin = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)]/_const_fm.x;
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/_const_fm.y > _amax) _amax = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/_const_fm.y;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/_const_fm.y < _amin) _amin = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)]/_const_fm.y;
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/_const_fm.z > _amax) _amax = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/_const_fm.z;
    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/_const_fm.z < _amin) _amin = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)]/_const_fm.z;
    if (Delta < _dmin) _dmin = Delta;
  } } }} } } }
# 48 "/home/e.sharaborin/basilisk/src/tension.h"
 ; }
if (((alpha.x).i >= 65536) && ((fm.x).i >= 65536)) {
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 70 "/home/e.sharaborin/basilisk/src/tension.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->faces.n; _k++) { point.i = ((Tree *)grid)->faces.p[_k].i; point.j = ((Tree *)grid)->faces.p[_k].j; point.k = ((Tree *)grid)->faces.p[_k].k; point.level = ((Tree *)grid)->faces.p[_k].level; _flags = ((Tree *)grid)->faces.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { int ig = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_x)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (_const_alpha.x/_const_fm.x > _amax) _amax = _const_alpha.x/_const_fm.x;
    if (_const_alpha.x/_const_fm.x < _amin) _amin = _const_alpha.x/_const_fm.x;
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int jg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_y)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (_const_alpha.y/_const_fm.y > _amax) _amax = _const_alpha.y/_const_fm.y;
    if (_const_alpha.y/_const_fm.y < _amin) _amin = _const_alpha.y/_const_fm.y;
    if (Delta < _dmin) _dmin = Delta;
  } } }} { int kg = -1; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ;; if ((_flags & face_z)) {
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
{
# 44 "/home/e.sharaborin/basilisk/src/tension.h"
 {
    if (_const_alpha.z/_const_fm.z > _amax) _amax = _const_alpha.z/_const_fm.z;
    if (_const_alpha.z/_const_fm.z < _amin) _amin = _const_alpha.z/_const_fm.z;
    if (Delta < _dmin) _dmin = Delta;
  } } }} } } }
# 48 "/home/e.sharaborin/basilisk/src/tension.h"
 ; } if (_amin < amin) amin = _amin;
;
 if (_amax > amax) amax = _amax;
;
 if (_dmin < dmin) dmin = _dmin;
;



}
# 48 "/home/e.sharaborin/basilisk/src/tension.h"
 }
  double rhom = (1./amin + 1./amax)/2.;





  double sigma = 0.;
  if (interfaces) for (scalar c = *interfaces, *_i107 = interfaces; ((scalar *)&c)->i >= 0; c = *++_i107)
    sigma += _attribute[c.i].sigma;
  if (sigma) {
    double dt_ = CFL_SIGMA*sqrt (rhom*((dmin)*(dmin)*(dmin))/(3.14159265358979*sigma));
 fprintf(
# 60 "/home/e.sharaborin/basilisk/src/tension.h" 3 4
        stderr
# 60 "/home/e.sharaborin/basilisk/src/tension.h"
            , "tension stability:%g curr_dt:%g DT:%g\n", dt_, dt, DT);
    if (dt_ < dtmax)
      dtmax = dt_;
  }
 ; } return 0; }







static int acceleration_1_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int acceleration_1 (const int i, const double t, Event * _ev) { ;
{




  if (interfaces) for (scalar f = *interfaces, *_i108 = interfaces; ((scalar *)&f)->i >= 0; f = *++_i108)
    if (_attribute[f.i].sigma) {





      scalar phi = _attribute[f.i].phi;
      if (phi.i)
 curvature ((struct Curvature){f, phi, _attribute[f.i].sigma, .add = 
# 87 "/home/e.sharaborin/basilisk/src/tension.h" 3 4
                                                                    1
# 87 "/home/e.sharaborin/basilisk/src/tension.h"
                                                                        });
      else {
 phi = new_scalar("phi");
 curvature ((struct Curvature){f, phi, _attribute[f.i].sigma, .add = 
# 90 "/home/e.sharaborin/basilisk/src/tension.h" 3 4
                                                                    0
# 90 "/home/e.sharaborin/basilisk/src/tension.h"
                                                                         });
 _attribute[f.i].phi = phi;
      }
    }
 ; } return 0; }
# 23 "tube_bp.c"
# 1 "../src_local/adapt_wavelet_limited.h"
# 1 "./../src_local/adapt_wavelet_limited.h"
# 18 "./../src_local/adapt_wavelet_limited.h"
struct Adapt_limited {
  scalar * slist;
  double * max;
  int (*MLFun)(double,double,double);
  int minlevel;
  scalar * list;
};


astats adapt_wavelet_limited (struct Adapt_limited p)
{ ;
  scalar * listcm = 
# 29 "./../src_local/adapt_wavelet_limited.h" 3 4
                   ((void *)0)
# 29 "./../src_local/adapt_wavelet_limited.h"
                       ;

  if (((cm).i >= 65536)) {
    if (p.list == 
# 32 "./../src_local/adapt_wavelet_limited.h" 3 4
                 ((void *)0)
# 32 "./../src_local/adapt_wavelet_limited.h"
                     )
      p.list = all;
    restriction (p.slist);
  }
  else {
    if (p.list == 
# 37 "./../src_local/adapt_wavelet_limited.h" 3 4
                 ((void *)0)
# 37 "./../src_local/adapt_wavelet_limited.h"
                     ) {
      listcm = list_concat (
# 38 "./../src_local/adapt_wavelet_limited.h" 3 4
                           ((void *)0)
# 38 "./../src_local/adapt_wavelet_limited.h"
                               , ((scalar []){cm,fm.x,fm.y,fm.z,{-1}}));
      if (all) for (scalar s = *all, *_i109 = all; ((scalar *)&s)->i >= 0; s = *++_i109)
 listcm = list_add (listcm, s);
      p.list = listcm;
    }
    scalar * listr = list_concat (p.slist, ((scalar []){cm,{-1}}));
    restriction (listr);
    free(listr);
  }

  astats st = {0, 0};
  scalar * listc = 
# 49 "./../src_local/adapt_wavelet_limited.h" 3 4
                  ((void *)0)
# 49 "./../src_local/adapt_wavelet_limited.h"
                      ;
  if (p.list) for (scalar s = *p.list, *_i110 = p.list; ((scalar *)&s)->i >= 0; s = *++_i110)
    if (!((s).i >= 65536) && _attribute[s.i].restriction != no_restriction)
      listc = list_add (listc, s);


  if (p.minlevel < 1)
    p.minlevel = 1;
  ((Tree *)grid)->refined.n = 0;
  static const int refined = 1 << user, too_fine = 1 << (user + 1);
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 59 "./../src_local/adapt_wavelet_limited.h"
 {
    int cellMAX = p.MLFun(x,y,z);
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active)) {
      static const int too_coarse = 1 << (user + 2);
      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_coarse) {
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   refine_cell (point, listc, refined, &((Tree *)grid)->refined);
   st.nf++;
 }
 continue;
      }
      else {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & refined) {

   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   continue;
 }

 
# 78 "./../src_local/adapt_wavelet_limited.h" 3 4
_Bool 
# 78 "./../src_local/adapt_wavelet_limited.h"
     local = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0);
 if (!local)
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
     if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0))
       local = 
# 82 "./../src_local/adapt_wavelet_limited.h" 3 4
              1
# 82 "./../src_local/adapt_wavelet_limited.h"
                  , _l = _m = _n = 2; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
 if (local) {
   int i = 0;
   static const int just_fine = 1 << (user + 3);
   if (p.slist) for (scalar s = *p.slist, *_i111 = p.slist; ((scalar *)&s)->i >= 0; s = *++_i111) {
     double max = p.max[i++], sc[1 << 3];
     int c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
       sc[c++] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
     _attribute[s.i].prolongation (point, s);
     c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
       double e = fabs(sc[c] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
       if (e > max && level < cellMAX) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_coarse;
       }
       else if ((e <= max/1.5 || level > cellMAX) &&
         !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & (too_coarse|just_fine))) {
  if (level >= p.minlevel)
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_fine;
       }
       else if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_coarse)) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= just_fine;
       }
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sc[c++];
     } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
   }
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~just_fine;
     if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
       if (level >= cellMAX)
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_fine;
     }
     else if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active))
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
 }
      }
    }
    else
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  mpi_boundary_refine (listc);



  for (int l = (grid->depth); l >= p.minlevel; l--) {
     { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 132 "./../src_local/adapt_wavelet_limited.h"

      if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0)) {
 if (level == l) {
   if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
     if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & refined)

       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~(refined|too_fine);
     else if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_fine) {
       if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && coarsen_cell (point, listc))
  st.nc++;
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
     }
   }
   if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_fine)
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
   else if ((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0])))).flags & too_fine)
     (*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0])))).flags &= ~too_fine;
   continue;
 }
 else if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
   continue;
      } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
    mpi_boundary_coarsen (l, too_fine);
  }
  free(listc);

  ;
  ;
  if (st.nc || st.nf)
    mpi_boundary_update (p.list);
  free(listcm);

  { astats _ret = st; ; return _ret; }
 ; }
# 24 "tube_bp.c"
# 1 "../src_local/adapt2.h"
# 1 "./../src_local/adapt2.h"
struct Adapt2 {
  scalar * slist;
  double * max;
  int * maxlevel;
  int minlevel;
  scalar * list;
};


astats adapt_wavelet2 (struct Adapt2 p)
{ ;
  if (p.list == 
# 12 "./../src_local/adapt2.h" 3 4
               ((void *)0)
# 12 "./../src_local/adapt2.h"
                   )
    p.list = all;
  if (((cm).i >= 65536))
    restriction (p.slist);
  else {
    scalar * listr = list_concat (((scalar []){cm,{-1}}), p.slist);
    restriction (listr);
    free(listr);
  }
  astats st = {0, 0};
  scalar * listc = 
# 22 "./../src_local/adapt2.h" 3 4
                  ((void *)0)
# 22 "./../src_local/adapt2.h"
                      ;
  if (p.list) for (scalar s = *p.list, *_i112 = p.list; ((scalar *)&s)->i >= 0; s = *++_i112)
    if (!((s).i >= 65536) && _attribute[s.i].restriction != no_restriction)
      listc = list_add (listc, s);

  if (p.minlevel < 1)
    p.minlevel = 1;
  ((Tree *)grid)->refined.n = 0;
  static const int refined = 1 << user, too_fine = 1 << (user + 1);
   { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 31 "./../src_local/adapt2.h"
 {
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active)) {
      static const int too_coarse = 1 << (user + 2);
      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_coarse) {
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   refine_cell (point, listc, refined, &((Tree *)grid)->refined);
   st.nf++;
 }
 continue;
      }
      else {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & refined) {

   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   continue;
 }

 
# 49 "./../src_local/adapt2.h" 3 4
_Bool 
# 49 "./../src_local/adapt2.h"
     local = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0);
 if (!local)
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
     if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0))
       local = 
# 53 "./../src_local/adapt2.h" 3 4
              1
# 53 "./../src_local/adapt2.h"
                  , _l = _m = _n = 2; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
 if (local) {
   int i = 0;
   static const int just_fine = 1 << (user + 3);
   if (p.slist) for (scalar s = *p.slist, *_i113 = p.slist; ((scalar *)&s)->i >= 0; s = *++_i113) {
     double max = p.max[i], sc[1 << 3];
     int mlev = p.maxlevel[i++];
     int c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
       sc[c++] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]; } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
     _attribute[s.i].prolongation (point, s);
     c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
       double e = fabs(sc[c] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
       if (e > max && level < mlev) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_coarse;
       }
       else if ((e <= max/1.5 || level > (mlev-1)) &&
         !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & (too_coarse|just_fine))) {
  if (level >= p.minlevel)
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_fine;
       }
       else if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_coarse)) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= just_fine;
       }
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] = sc[c++];
     } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
   }
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2, _k = 2*point.k - 2; point.level++; for (int _l = 0; _l < 2; _l++) { point.i = _i + _l; for (int _m = 0; _m < 2; _m++) { point.j = _j + _m; for (int _n = 0; _n < 2; _n++) { point.k = _k + _n; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; {
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~just_fine;
     if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
       if (level >= 13)
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags |= too_fine;
     }
     else if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & active))
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_coarse;
   } } } } point.i = (_i + 2)/2;point.j = (_j + 2)/2;point.k = (_k + 2)/2; point.level--;}; }
 }
      }
    }
    else
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  mpi_boundary_refine (listc);


  for (int l = (grid->depth); l >= 0; l--) {
     { { Point root = {2,2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point = {0}; int kg = 0; (void)(kg); struct { int l, i, j, k, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].k = root.k; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; point.k = stack[_s].k; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] && point.k+0 >= 0 && point.k+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 103 "./../src_local/adapt2.h"

      if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).pid < 0)) {
 if (level == l) {
   if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf)) {
     if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & refined)

       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~(refined|too_fine);
     else if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_fine) {
       if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).pid == 0) && coarsen_cell (point, listc))
  st.nc++;
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
     }
   }
   if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags & too_fine)
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0])))).flags &= ~too_fine;
   else if (level > 0 && ((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0])))).flags & too_fine))
     (*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0][(point.k+2)/2+0])))).flags &= ~too_fine;
   continue;
 }
 else if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]))))).flags & leaf))
   continue;
      } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 4; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 4: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 5; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 5: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 6; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; case 6: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].k = point.k; stack[_s].stage = 7; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = (2*point.k - 2); stack[_s].stage = 0; }; break; case 7: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].k = ((2*point.k - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
    mpi_boundary_coarsen (l, too_fine);
  }
  free(listc);
  ;
  ;
  if (st.nc || st.nf)
    mpi_boundary_update (p.list);
  { astats _ret = st; ; return _ret; }
 ; }
# 25 "tube_bp.c"
# 1 "../src_local/utils-weugene.h"
# 26 "tube_bp.c"
# 1 "lambda2.h"
# 1 "/home/e.sharaborin/basilisk/src/lambda2.h"
static void eigsrt (double d[3],
      double v[3][3])
{
  int k, j, i;
  double p;

  for (i = 0; i < 3 - 1; i++) {
    p = d[k = i];

    for (j = i + 1; j < 3; j++)
      if (d[j] >= p)
 p = d[k = j];
    if (k != i) {
      d[k] = d[i];
      d[i] = p;
      for (j = 0; j < 3; j++) {
 p = v[j][i];
 v[j][i] = v[j][k];
 v[j][k] = p;
      }
    }
  }
}
# 37 "/home/e.sharaborin/basilisk/src/lambda2.h"
void eigenvalues (double a[3][3],
    double d[3],
    double v[3][3])
{
  int j, iq, ip, i;
  double tresh, theta, tau, t, sm, s, h, g, c, b[3], z[3];

  for (ip = 0; ip < 3; ip++) {
    for (iq = 0; iq < 3; iq++)
      v[ip][iq] = 0.0;
    v[ip][ip] = 1.0;
  }

  for (ip = 0; ip < 3; ip++) {
    b[ip] = d[ip] = a[ip][ip];
    z[ip] = 0.0;
  }

  for (i = 1; i <= 50; i++) {
    sm = 0.0;
    for (ip = 0; ip < 3 - 1; ip++) {
      for (iq = ip + 1; iq < 3; iq++)
 sm += fabs (a[ip][iq]);
    }
    if (sm == 0.0) {
      eigsrt (d, v);
      return;
    }
    if (i < 4)
      tresh = 0.2*sm/(3*3);
    else
      tresh = 0.0;
    for (ip = 0; ip < 3 - 1; ip++) {
      for (iq = ip + 1; iq < 3; iq++) {
 g = 100.0*fabs (a[ip][iq]);
 if (i > 4 && fabs(d[ip]) + g == fabs(d[ip]) &&
     fabs(d[iq]) + g == fabs(d[iq]))
   a[ip][iq] = 0.0;
 else if (fabs (a[ip][iq]) > tresh) {
   h = d[iq] - d[ip];
   if (fabs(h) + g == fabs(h))
     t = a[ip][iq]/h;
   else {
     theta = 0.5*h/a[ip][iq];
     t = 1.0/(fabs (theta) + sqrt (1.0 + theta*theta));
     if (theta < 0.0) t = -t;
   }
   c = 1.0/sqrt (1 + t*t);
   s = t*c;
   tau = s/(1.0 + c);
   h = t*a[ip][iq];
   z[ip] -= h;
   z[iq] += h;
   d[ip] -= h;
   d[iq] += h;
   a[ip][iq] = 0.0;
   for (j = 0; j <= ip - 1; j++)
     { g=a[j][ip];h=a[j][iq];a[j][ip]=g-s*(h+g*tau);a[j][iq]=h+s*(g-h*tau);};
   for (j = ip + 1; j <= iq - 1; j++)
     { g=a[ip][j];h=a[j][iq];a[ip][j]=g-s*(h+g*tau);a[j][iq]=h+s*(g-h*tau);};
   for (j = iq + 1; j < 3; j++)
     { g=a[ip][j];h=a[iq][j];a[ip][j]=g-s*(h+g*tau);a[iq][j]=h+s*(g-h*tau);};
   for (j = 0; j < 3; j++)
     { g=v[j][ip];h=v[j][iq];v[j][ip]=g-s*(h+g*tau);v[j][iq]=h+s*(g-h*tau);};
 }
      }
    }
    for (ip = 0; ip < 3; ip++) {
      b[ip] += z[ip];
      d[ip] = b[ip];
      z[ip] = 0.0;
    }
  }

  for (i = 0; i < 3; i++) {
    for (j = 0; j < 3; j++)
      fprintf (
# 113 "/home/e.sharaborin/basilisk/src/lambda2.h" 3 4
              stderr
# 113 "/home/e.sharaborin/basilisk/src/lambda2.h"
                  , "%10.3g ", a[i][j]);
    fprintf (
# 114 "/home/e.sharaborin/basilisk/src/lambda2.h" 3 4
            stderr
# 114 "/home/e.sharaborin/basilisk/src/lambda2.h"
                , "\n");
  }
  
# 116 "/home/e.sharaborin/basilisk/src/lambda2.h" 3 4
 ((0) ? (void) (0) : __assert_fail (
# 116 "/home/e.sharaborin/basilisk/src/lambda2.h"
 "false"
# 116 "/home/e.sharaborin/basilisk/src/lambda2.h" 3 4
 , "/home/e.sharaborin/basilisk/src/lambda2.h", 116, __extension__ __PRETTY_FUNCTION__))
# 116 "/home/e.sharaborin/basilisk/src/lambda2.h"
               ;
}

void lambda2 (const vector u, scalar l2)
{
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 121 "/home/e.sharaborin/basilisk/src/lambda2.h"
 {
    double JJ[3][3];
    scalar s = u.x;
    int i = 0;
    {
# 125 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[0][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta));
# 125 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[0][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta));
# 125 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[0][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)])/(2.*Delta));}
    s = u.y; i = 0;
    {
# 128 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[1][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta));
# 128 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[1][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta));
# 128 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[1][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)])/(2.*Delta));}
    s = u.z; i = 0;
    {
# 131 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[2][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta));
# 131 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[2][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(s.i)])/(2.*Delta));
# 131 "/home/e.sharaborin/basilisk/src/lambda2.h"

      JJ[2][i++] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(s.i)] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(s.i)])/(2.*Delta));}
    double S2O2[3][3];
    for (int i = 0; i < 3; i++)
      for (int j = 0; j < 3; j++) {
 S2O2[i][j] = 0.;
 for (int k = 0; k < 3; k++)
   S2O2[i][j] += JJ[i][k]*JJ[k][j] + JJ[k][i]*JJ[j][k];
      }
    double lambda[3], ev[3][3];
    eigenvalues (S2O2, lambda, ev);
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(l2.i)] = lambda[1]/2.;
  } } } } }; }
  boundary (((scalar []){l2,{-1}}));
}
# 28 "tube_bp.c"
# 1 "../src_local/output_vtu_foreach.h"
# 1 "./../src_local/output_vtu_foreach.h"
# 50 "./../src_local/output_vtu_foreach.h"
    char components_name[] = "ComponentName0=\"left_X\" ComponentName1=\"left_Y\" ComponentName2=\"left_Z\" "
                             "ComponentName3=\"right_X\" ComponentName4=\"right_Y\" ComponentName5=\"right_Z\" "
                             "ComponentName6=\"bottom_X\" ComponentName7=\"bottom_Y\" ComponentName8=\"bottom_Z\" "
                             "ComponentName9=\"top_X\" ComponentName10=\"top_Y\" ComponentName11=\"top_Z\" "
                             "ComponentName12=\"back_X\" ComponentName13=\"back_Y\" ComponentName14=\"back_Z\" "
                             "ComponentName15=\"front_X\" ComponentName16=\"front_Y\" ComponentName17=\"fronts_Z\" ";


char array_subname[][40] = { "left", "center", "right",
                                          "bottom", "top",
                                          "back", "front"
                                        };
int aid[7][3] = { {-1,0,0}, {0,0,0}, {1,0,0},
                  {0,-1,0}, {0,1,0},
                  {0,0,-1}, {0,0,1}
                };


# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4

# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));




extern __mode_t getumask (void) __attribute__ ((__nothrow__ , __leaf__));



extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));
# 530 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 69 "./../src_local/output_vtu_foreach.h" 2


# 70 "./../src_local/output_vtu_foreach.h"
void output_pvtu_ascii (scalar * list, vector * vlist, vector * fvlist, int n, FILE * fp, char * subname)
{
    int dim=3;
    fputs ("<?xml version=\"1.0\"?>\n"
    "<VTKFile type=\"PUnstructuredGrid\" version=\"1.0\" byte_order=\"LittleEndian\" header_type=\"UInt64\">\n", fp);
    fputs ("\t <PUnstructuredGrid GhostLevel=\"0\">\n", fp);
    fputs ("\t\t\t <PCellData Scalars=\"scalars\">\n", fp);

    if (list) for (scalar s = *list, *_i114 = list; ((scalar *)&s)->i >= 0; s = *++_i114) {
      fprintf (fp,"\t\t\t\t <PDataArray type=\"Float64\" Name=\"%s\" format=\"ascii\">\n", _attribute[s.i].name);
      fputs ("\t\t\t\t </PDataArray>\n", fp);
    }
    if (vlist) for (vector v = *vlist, *_i115 = vlist; ((scalar *)&v)->i >= 0; v = *++_i115) {
      fprintf (fp,"\t\t\t\t <PDataArray type=\"Float64\" NumberOfComponents=\"3\" Name=\"%s\" format=\"ascii\">\n", _attribute[v.x.i].name);
      fputs ("\t\t\t\t </PDataArray>\n", fp);
    }
# 98 "./../src_local/output_vtu_foreach.h"
    if (fvlist) for (vector v = *fvlist, *_i116 = fvlist; ((scalar *)&v)->i >= 0; v = *++_i116) {
        fprintf (fp,"\t\t\t\t <PDataArray type=\"Float64\" NumberOfComponents=\"%d\" %s Name=\"%s\" format=\"ascii\">\n", 8, components_name, _attribute[v.x.i].name);
        fputs ("\t\t\t\t </PDataArray>\n", fp);
    }
    fputs ("\t\t\t </PCellData>\n", fp);
    fputs ("\t\t\t <PPoints>\n", fp);
    fputs ("\t\t\t\t <PDataArray type=\"Float64\" NumberOfComponents=\"3\" format=\"ascii\">\n", fp);
    fputs ("\t\t\t\t </PDataArray>\n", fp);
    fputs ("\t\t\t </PPoints>\n", fp);

    for (int i = 0; i < 1; i++)
      fprintf (fp, "<Piece Source=\"%s_n%3.3d.vtu\"/> \n", subname, i);

    fputs ("\t </PUnstructuredGrid>\n", fp);
    fputs ("</VTKFile>\n", fp);
}
# 123 "./../src_local/output_vtu_foreach.h"
void output_vtu_ascii_foreach (scalar * list, vector * vlist, vector * fvlist, int n, FILE * fp, 
# 123 "./../src_local/output_vtu_foreach.h" 3 4
                                                                                                _Bool 
# 123 "./../src_local/output_vtu_foreach.h"
                                                                                                     linear)
{
    int dim = 3;
    coord Pmin = {X0 + 1e-12, Y0 + 1e-12, Z0 + 1e-12};
    coord Pmax = {X0 + L0 - 1e-12, Y0 + L0 - 1e-12, Z0 + L0 - 1e-12};





  scalar marker= new_vertex_scalar("marker");
  int no_points = 0, no_cells=0 ;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 135 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))) {
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)] = no_points++;
    }else{
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)] = -1;
    }
  } } } } } }; }
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 142 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))) no_cells += 1;
  } } } } }; }

  fputs ("<?xml version=\"1.0\"?>\n"
  "<VTKFile type=\"UnstructuredGrid\" version=\"1.0\" byte_order=\"LittleEndian\" header_type=\"UInt64\">\n", fp);
  fputs ("\t <UnstructuredGrid>\n", fp);
  fprintf (fp,"\t\t <Piece NumberOfPoints=\"%d\" NumberOfCells=\"%d\">\n", no_points, no_cells);
  fputs ("\t\t\t <CellData Scalars=\"scalars\">\n", fp);

  if (list) for (scalar s = *list, *_i117 = list; ((scalar *)&s)->i >= 0; s = *++_i117) {
    fprintf (fp,"\t\t\t\t <DataArray type=\"Float64\" Name=\"%s\" format=\"ascii\">\n", _attribute[s.i].name);
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 154 "./../src_local/output_vtu_foreach.h"
{
      if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0))))
        fprintf (fp, "\t\t\t\t\t %g\n", ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)]);
    } } } } }; }
    fputs ("\t\t\t\t </DataArray>\n", fp);
  }
  if (vlist) for (vector v = *vlist, *_i118 = vlist; ((scalar *)&v)->i >= 0; v = *++_i118) {
    fprintf (fp,"\t\t\t\t <DataArray type=\"Float64\" NumberOfComponents=\"3\" Name=\"%s\" format=\"ascii\">\n", _attribute[v.x.i].name);
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 162 "./../src_local/output_vtu_foreach.h"
{
      if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))){







          fprintf (fp, "\t\t\t\t\t %g %g %g\n", ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)]);

      }
    } } } } }; }
    fputs ("\t\t\t\t </DataArray>\n", fp);
  }
# 208 "./../src_local/output_vtu_foreach.h"
  if (fvlist) for (vector v = *fvlist, *_i119 = fvlist; ((scalar *)&v)->i >= 0; v = *++_i119) {
    fprintf (fp,"\t\t\t\t <DataArray type=\"Float64\" NumberOfComponents=\"%d\" %s Name=\"%s\" format=\"ascii\">\n", 8, components_name, _attribute[v.x.i].name);
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 210 "./../src_local/output_vtu_foreach.h"
{
      if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))){
# 222 "./../src_local/output_vtu_foreach.h"
        double arr[8]={((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)]};

        fprintf (fp, "\t\t\t\t\t ");
        for (int i = 0; i < 8; i++){
            fprintf (fp, "%g ", arr[i]);
        }
        fprintf (fp, "\n");
      }
    } } } } }; }
    fputs ("\t\t\t\t </DataArray>\n", fp);
  }

  fputs ("\t\t\t </CellData>\n", fp);
  fputs ("\t\t\t <Points>\n", fp);
  fputs ("\t\t\t\t <DataArray type=\"Float64\" NumberOfComponents=\"3\" format=\"ascii\">\n", fp);
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 242 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0))))
        fprintf (fp, "\t\t\t\t\t %g %g %g\n", x, y, z);
  } } } } } }; }
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t </Points>\n", fp);
  fputs ("\t\t\t <Cells>\n", fp);
  fputs ("\t\t\t\t <DataArray type=\"Int64\" Name=\"connectivity\" format=\"ascii\">\n", fp);
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 250 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0))))







      fprintf (fp, "\t\t\t\t\t %d %d %d %d %d %d %d %d \n", (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+1]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(marker.i)]);

  } } } } }; }
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t\t <DataArray type=\"Int64\" Name=\"offsets\" format=\"ascii\">\n", fp);

  for (int i = 1; i < no_cells+1; i++){




    fprintf (fp, "\t\t\t\t\t %d \n", i*8);

  }
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t\t <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n", fp);
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 275 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0))))







      fputs ("\t\t\t\t\t 12 \n", fp);

  } } } } }; }
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t </Cells>\n", fp);
  fputs ("\t\t </Piece>\n", fp);
  fputs ("\t </UnstructuredGrid>\n", fp);
  fputs ("</VTKFile>\n", fp);
  fflush (fp);



 delete (((scalar []){marker,{-1}})); }






void output_pvtu_bin (scalar * list, vector * vlist, vector * fvlist, int n, FILE * fp, char * subname)
{
    int dim=3;
    fputs ("<?xml version=\"1.0\"?>\n"
    "<VTKFile type=\"PUnstructuredGrid\" version=\"1.0\" byte_order=\"LittleEndian\" header_type=\"UInt64\">\n", fp);
    fputs ("\t <PUnstructuredGrid GhostLevel=\"0\">\n", fp);
    fputs ("\t\t\t <PCellData Scalars=\"scalars\">\n", fp);

    if (list) for (scalar s = *list, *_i120 = list; ((scalar *)&s)->i >= 0; s = *++_i120) {
      fprintf (fp,"\t\t\t\t <PDataArray type=\"Float64\" Name=\"%s\" format=\"appended\"/>\n", _attribute[s.i].name);
    }
    if (vlist) for (vector v = *vlist, *_i121 = vlist; ((scalar *)&v)->i >= 0; v = *++_i121) {
      fprintf (fp,"\t\t\t\t <PDataArray type=\"Float64\" NumberOfComponents=\"%d\" Name=\"%s\" format=\"appended\"/>\n", dim, _attribute[v.x.i].name);
    }
# 327 "./../src_local/output_vtu_foreach.h"
    if (fvlist) for (vector v = *fvlist, *_i122 = fvlist; ((scalar *)&v)->i >= 0; v = *++_i122) {
        fprintf (fp,"\t\t\t\t <PDataArray type=\"Float64\" NumberOfComponents=\"%d\" %s Name=\"%s\" format=\"appended\"/>\n", 8, components_name, _attribute[v.x.i].name);
    }
    fputs ("\t\t\t </PCellData>\n", fp);
    fputs ("\t\t\t <PPoints>\n", fp);
    fprintf (fp,"\t\t\t\t <PDataArray type=\"Float64\" NumberOfComponents=\"%d\" format=\"ascii\"/>\n", dim);
    fputs ("\t\t\t </PPoints>\n", fp);

    for (int i = 0; i < 1; i++)
      fprintf (fp, "<Piece Source=\"%s_n%3.3d.vtu\"/> \n", subname, i);

    fputs ("\t </PUnstructuredGrid>\n", fp);
    fputs ("</VTKFile>\n", fp);
}
# 351 "./../src_local/output_vtu_foreach.h"
void output_vtu_bin_foreach (scalar * list, vector * vlist, vector * fvlist, int n, FILE * fp, 
# 351 "./../src_local/output_vtu_foreach.h" 3 4
                                                                                              _Bool 
# 351 "./../src_local/output_vtu_foreach.h"
                                                                                                   linear)
{
  int dim = 3;
  coord Pmin = {X0 + 1e-12, Y0 + 1e-12, Z0 + 1e-12};
  coord Pmax = {X0 + L0 - 1e-12, Y0 + L0 - 1e-12, Z0 + L0 - 1e-12};




  scalar marker= new_vertex_scalar("marker");
  int no_points = 0, no_cells = 0;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 362 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))) {
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)] = no_points++;
    }else{
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)] = -1;
    }
  } } } } } }; }
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 369 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))) no_cells++;
  } } } } }; }
  fputs ("<?xml version=\"1.0\"?>\n"
  "<VTKFile type=\"UnstructuredGrid\" version=\"1.0\" byte_order=\"LittleEndian\" header_type=\"UInt64\">\n", fp);
  fputs ("\t <UnstructuredGrid>\n", fp);
  fprintf (fp,"\t\t <Piece NumberOfPoints=\"%d\" NumberOfCells=\"%d\">\n", no_points, no_cells);
  fputs ("\t\t\t <CellData Scalars=\"scalars\">\n", fp);
  int count = 0;

  if (list) for (scalar s = *list, *_i123 = list; ((scalar *)&s)->i >= 0; s = *++_i123) {
    fprintf (fp,"\t\t\t\t <DataArray type=\"Float64\" Name=\"%s\" format=\"appended\" offset=\"%d\">\n", _attribute[s.i].name, count);
    count += ((no_cells)+1)*8;
    fputs ("\t\t\t\t </DataArray>\n", fp);
  }
  if (vlist) for (vector v = *vlist, *_i124 = vlist; ((scalar *)&v)->i >= 0; v = *++_i124) {
    fprintf (fp,"\t\t\t\t <DataArray type=\"Float64\" Name=\"%s\" NumberOfComponents=\"%d\"  format=\"appended\" offset=\"%d\">\n", _attribute[v.x.i].name, dim, count);
    count += (no_cells*dim+1)*8;
    fputs ("\t\t\t\t </DataArray>\n", fp);
  }
# 405 "./../src_local/output_vtu_foreach.h"
  if (fvlist) for (vector v = *fvlist, *_i125 = fvlist; ((scalar *)&v)->i >= 0; v = *++_i125) {
    fprintf (fp,"\t\t\t\t <DataArray type=\"Float64\" Name=\"%s\" NumberOfComponents=\"%d\"  %s format=\"appended\" offset=\"%d\">\n", _attribute[v.x.i].name, 8, components_name, count);
    count += (no_cells*8 +1)*8;
    fputs ("\t\t\t\t </DataArray>\n", fp);
  }
  fputs ("\t\t\t </CellData>\n", fp);
  fputs ("\t\t\t <Points>\n", fp);
  fprintf (fp,"\t\t\t\t <DataArray type=\"Float64\" NumberOfComponents=\"%d\"  format=\"appended\" offset=\"%d\">\n", dim, count);
  count += (no_points*dim+1)*8;
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t </Points>\n", fp);
  fputs ("\t\t\t <Cells>\n", fp);
  fputs ("\t\t\t\t <DataArray type=\"Int64\" Name=\"connectivity\" format=\"ascii\">\n", fp);
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 418 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))) {







     fprintf (fp, "\t\t\t\t\t %d %d %d %d %d %d %d %d \n", (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+1]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1] [point.k+1]) + sizeof(Cell)))[(marker.i)], (int)((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+1]) + sizeof(Cell)))[(marker.i)]);

    }
  } } } } }; }
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t\t <DataArray type=\"Int64\" Name=\"offsets\" format=\"ascii\">\n", fp);
  for (int i = 1; i < no_cells+1; i++){







    fprintf (fp, "%d \n", i*8);

  }
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t\t <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n", fp);
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 446 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0))))







      fputs ("12 \n", fp);

  } } } } }; }
  fputs ("\t\t\t\t </DataArray>\n", fp);
  fputs ("\t\t\t </Cells>\n", fp);
  fputs ("\t\t </Piece>\n", fp);
  fputs ("\t </UnstructuredGrid>\n", fp);
  fputs ("\t <AppendedData encoding=\"raw\">\n", fp);
  fputs ("_", fp);
  unsigned long long block_len=no_cells*8;
# 473 "./../src_local/output_vtu_foreach.h"
  if (list) for (scalar s = *list, *_i126 = list; ((scalar *)&s)->i >= 0; s = *++_i126) {
    fwrite (&block_len, sizeof (unsigned long long), 1, fp);
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 475 "./../src_local/output_vtu_foreach.h"

      if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0))))
        fwrite (&((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(s.i)], sizeof (double), 1, fp); } } } }; }
  }
  block_len=no_cells*8*dim;
  if (vlist) for (vector v = *vlist, *_i127 = vlist; ((scalar *)&v)->i >= 0; v = *++_i127) {
    fwrite (&block_len, sizeof (unsigned long long), 1, fp);
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 482 "./../src_local/output_vtu_foreach.h"
{
      if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))){
# 495 "./../src_local/output_vtu_foreach.h"
        fwrite (&((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)], sizeof (double), 1, fp);
        fwrite (&((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], sizeof (double), 1, fp);
        fwrite (&((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)], sizeof (double), 1, fp);

      }
    } } } } }; }
  }
# 538 "./../src_local/output_vtu_foreach.h"
  block_len=no_cells*8*8;
  if (fvlist) for (vector v = *fvlist, *_i128 = fvlist; ((scalar *)&v)->i >= 0; v = *++_i128) {
    fwrite (&block_len, sizeof (unsigned long long), 1, fp);
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 541 "./../src_local/output_vtu_foreach.h"
{
      if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))){
# 556 "./../src_local/output_vtu_foreach.h"
          double arr[8]={ ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+-1]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(v.z.i)],
                                   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.x.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.y.i)], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(v.z.i)]
                                };

        fwrite (&arr, 8*sizeof(double), 1, fp);
      }
    } } } } }; }
  }
  block_len=no_points*8*dim;
  fwrite (&block_len, sizeof (unsigned long long), 1, fp);
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 570 "./../src_local/output_vtu_foreach.h"
{
    if ((((!Period.x) || (Pmax.x - x - 0.5*Delta > 0)) && ((!Period.y) || (Pmax.y - y - 0.5*Delta > 0)) && ((!Period.z) || (Pmax.z - z - 0.5*Delta > 0)))){
      fwrite (&x, sizeof (double), 1, fp);
      fwrite (&y, sizeof (double), 1, fp);
      fwrite (&z, sizeof (double), 1, fp);
    }
  } } } } } }; }
  fputs ("\t\n", fp);
  fputs ("\t </AppendedData>\n", fp);
  fputs ("</VTKFile>\n", fp);
  fflush (fp);



 delete (((scalar []){marker,{-1}})); }

void output_pvd_file(FILE * fp, int nf, float * file_timesteps, char * subname){

    fputs ("<VTKFile type=\"Collection\" version=\"1.0\" byte_order=\"LittleEndian\" header_type=\"UInt64\">\n"
           "\t <Collection>\n", fp);
    for (int i=0; i<=nf; i++) {
        fprintf(fp, "\t\t<DataSet timestep=\"%g\" part=\"0\" file=\"res/%s_0_%4.4d.pvtu\"/>\n", file_timesteps[i], subname, i);
    }
    fputs ("\t </Collection>\n "
           "</VTKFile>\n", fp);
}



struct PVD_output {
    char * subname;
    double myt;
    scalar * list;
    vector * vlist;
    vector * fvlist;
};

struct stat st = {0};
static int iter_fp=0;
static float file_timesteps[9999];
void output_vtu_MPI(struct PVD_output o){
    scalar * list = o.list;
    vector * vlist = o.vlist;
    vector * fvlist = o.fvlist;
    char * subname = o.subname;
    double myt = o.myt;
    int nf = iter_fp;
    char name_vtu[80];
    if (iter_fp == 0) {
        if (stat("res", &st) == -1) {
            mkdir("res", 0755);
        }
    }
    FILE *fp;
    if (nf>9999) { fprintf(
# 624 "./../src_local/output_vtu_foreach.h" 3 4
                          stderr
# 624 "./../src_local/output_vtu_foreach.h"
                              , "too many files, more than 9999"); exit(1); }
    sprintf(name_vtu, "res/%s_%4.4d_n%3.3d.vtu", subname, nf, 0);
    fp = fopen(name_vtu, "w");
    output_vtu_bin_foreach(list, vlist, fvlist, 64, fp, 
# 627 "./../src_local/output_vtu_foreach.h" 3 4
                                                       1
# 627 "./../src_local/output_vtu_foreach.h"
                                                           );
    fclose(fp);
    if (0 == 0) {

        char name_pvtu[80], tmp[80];
     sprintf(name_pvtu, "res/%s_0_%4.4d.pvtu", subname, nf);
        sprintf(tmp, "%s_%4.4d", subname, nf);
        fprintf(
# 634 "./../src_local/output_vtu_foreach.h" 3 4
               stderr
# 634 "./../src_local/output_vtu_foreach.h"
                   , "+++vtk_file: %s, %s\n", name_pvtu, name_vtu);
        fp = fopen(name_pvtu, "w");
        output_pvtu_bin(list, vlist, fvlist, 64, fp, tmp);
        fclose(fp);

        char name_pvd[80];
        sprintf(name_pvd, "%s.pvd", subname);
        fp = fopen(name_pvd, "w");
        file_timesteps[nf] = myt;
        output_pvd_file(fp, nf, file_timesteps, subname);
        fclose(fp);
    }






    iter_fp++;
}


void face_vector2vector(vector fv, vector mapped_data_lower, vector mapped_data_upper){



     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 660 "./../src_local/output_vtu_foreach.h"

    {
# 661 "./../src_local/output_vtu_foreach.h"
{
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mapped_data_lower.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fv.x.i)];
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mapped_data_upper.x.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0] [point.k+0]) + sizeof(Cell)))[(fv.x.i)];
    }
# 661 "./../src_local/output_vtu_foreach.h"
{
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mapped_data_lower.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fv.y.i)];
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mapped_data_upper.y.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1] [point.k+0]) + sizeof(Cell)))[(fv.y.i)];
    }
# 661 "./../src_local/output_vtu_foreach.h"
{
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mapped_data_lower.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fv.z.i)];
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(mapped_data_upper.z.i)] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+1]) + sizeof(Cell)))[(fv.z.i)];
    }} } } } }; }
}
# 29 "tube_bp.c"
# 1 "maxruntime.h"
# 1 "/home/e.sharaborin/basilisk/src/maxruntime.h"
# 18 "/home/e.sharaborin/basilisk/src/maxruntime.h"
static double _maxruntime = ((double)1e30);

static int runtime_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i += 10); *ip = i; *tp = t; return ret; } static int runtime (const int i, const double t, Event * _ev) { ; {
  ;
  if (perf.t >= _maxruntime - 300) {
    dump ((struct Dump){.file = "restart"});
    { int _ret = 1; ; return _ret; }
  }
 ; } return 0; }

void maxruntime (int * argc, char * argv[])
{
  for (int i = 0; i < *argc; i++)
    if (!strcmp (argv[i], "--maxruntime") || !strcmp (argv[i], "-m")) {
      if (i + 1 < *argc) {
 char * s = strtok (argv[i + 1], ":");
 int n = 0;
 _maxruntime = 0;
 do {
   _maxruntime = 60*_maxruntime + atoi(s);
   n++;
 } while ((s = strtok (
# 39 "/home/e.sharaborin/basilisk/src/maxruntime.h" 3 4
                      ((void *)0)
# 39 "/home/e.sharaborin/basilisk/src/maxruntime.h"
                          , ":")));
 if (n > 3) {
   fprintf (
# 41 "/home/e.sharaborin/basilisk/src/maxruntime.h" 3 4
           stderr
# 41 "/home/e.sharaborin/basilisk/src/maxruntime.h"
               , "maxruntime: TIME format must be H:M:S\n");
   exit (1);
 }
      }
      else {
 fprintf (
# 46 "/home/e.sharaborin/basilisk/src/maxruntime.h" 3 4
         stderr
# 46 "/home/e.sharaborin/basilisk/src/maxruntime.h"
             , "usage: %s TIME\n", argv[i]);
 exit (1);
      }
      *argc -= 2;
      for (int j = i; j < *argc; j++)
 argv[j] = argv[j + 2];
    }
}
# 30 "tube_bp.c"





double Vd, Vdst, deq, dst = 0.2, rst = 0.1, r_bub, l_bub;
double RhoR, MuR;
double Rho1, Rho2;
double Mu1, Mu2;
double Sigma;
double diam_tube;
double dt_vtk;
double lDomain;
int bubcase;

typedef struct {
    double Ca;
    double Vd;
    double Uc;
    double Ud;
    double delta;
} Cases;


Cases cases[25]={
        {0,0,0,0,0},
        {0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},
        {6.44e-4, 0.0349e-9, 0.0454, 0.0533, 0.1055},
        {8.42e-4, 0.0439e-9, 0.0593, 0.0697, 0.074},
        {7.34e-4, 0.0602e-9, 0.0557, 0.0607, 0.027},
        {6.64e-4, 0.0745e-9, 0.0534, 0.0550, 0.001},
        {6.697e-4, 0.1893e-9, 0.0543, 0.0554, 0.006},
        {0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},
        {0.003, 0.1751e-9, 0.242, 0.261, 0.013},
        {0.008, 0.1715e-9, 0.666, 0.704, 0.023},
        {0.0098, 0.2208e-9, 0.757, 0.815, 0.025},
        {0.015, 0.1882e-9, 1.118 ,1.293, 0.039},
        {0.0230, 0.2179e-9, 1.580, 1.944, 0.054},
        {0.0306, 0.2179e-9, 2.060, 2.511, 1e-9},
        {0.0386, 0.2179e-9, 2.575, 3.165, 1e-9}
};

double Ca;
double Ca_mod;
double Re;
double G;
double Umean, UMEAN;
double x_init = 2;
int maxlevel = 8;
int minlevel = 5;
int LEVEL = 6;
int adapt_method = 1;
int snapshot_i = 100;
double fseps = 1e-3, ueps = 1e-2;
double TOLERANCE_P = 1e-5, TOLERANCE_V = 1e-5;

# 85 "tube_bp.c" 3 4
_Bool 
# 85 "tube_bp.c"
    ellipse_shape = 
# 85 "tube_bp.c" 3 4
                    0
# 85 "tube_bp.c"
                         , cylinder_shape = 
# 85 "tube_bp.c" 3 4
                                            1
# 85 "tube_bp.c"
                                                ;

int main (int argc, char * argv[]) { _init_solver();
    fprintf(
# 88 "tube_bp.c" 3 4
           stderr
# 88 "tube_bp.c"
               , "./a.out maxlevel bubcase adapt_method iter_fp lDomain dt_vtk snapshot_i\n");

    eta_s = 1e-5;
    TOLERANCE = 1e-6;
    NITERMIN = 1;
    NITERMAX = 100;
    DT = 1e-3;
    cylinder_shape = 
# 95 "tube_bp.c" 3 4
                    1
# 95 "tube_bp.c"
                        ;


    _attribute[fs.i].refine = _attribute[fs.i].prolongation = fraction_refine;
    _attribute[f.i].refine = _attribute[f.i].prolongation = fraction_refine;
    bubcase = 22;

    if (argc > 1)
        maxlevel = atoi (argv[1]);
    if (argc > 2)
        bubcase = atoi (argv[2]);

    if ((bubcase >= 8 && bubcase <= 12) || bubcase >= 18) {
        Rho1 = 997, Rho2 = 1.204;
        Mu1 = 0.88e-3, Mu2 = 0.019e-3;
        Sigma = 72.8e-3;
        diam_tube = 514e-6;
        dt_vtk = 1e-1;
        lDomain = 20;
    }else {
        Rho1 = 1250, Rho2 = 1.204;
        Mu1 = 550e-3, Mu2 = 0.019e-3;
        Sigma = 63.4e-3;
        diam_tube = 494e-6;
        dt_vtk = 1e-2;
        lDomain = 10;
    }
    Ca = cases[bubcase].Ca;
    Vd = cases[bubcase].Vd;
    UMEAN = cases[bubcase].Uc;

    if (argc > 3)
        adapt_method = atoi (argv[3]);
    if (argc > 4)
        iter_fp = atoi (argv[4]);
    if (argc > 5)
        lDomain = atof (argv[5]);
    if (argc > 6)
        dt_vtk = atof (argv[6]);
    if (argc > 7)
        snapshot_i = atoi (argv[7]);

    size (lDomain);
    origin ((struct _origin){0., -L0/2., -L0/2.});
    init_grid (1 << LEVEL);

    deq = pow(6.0*Vd/3.14159265358979, 1./3.);
    dst = deq/diam_tube;
    rst = 0.5*dst;
    Vdst = (4./3.)*3.14159265358979*((rst)*(rst)*(rst));

    Ca_mod = Mu1*UMEAN/Sigma;
    Re = UMEAN*diam_tube*Rho1/Mu1;
    G = 32.0*Mu1*UMEAN/((diam_tube)*(diam_tube));

    if (ellipse_shape || dst < 0.9) {
        r_bub = ((rst) < (0.4) ? (rst) : (0.4));
        l_bub = ((rst)*(rst)*(rst)) / ((r_bub)*(r_bub));
        ellipse_shape = 
# 153 "tube_bp.c" 3 4
                       1
# 153 "tube_bp.c"
                           ;
        cylinder_shape = 
# 154 "tube_bp.c" 3 4
                        0
# 154 "tube_bp.c"
                             ;
    }else if (cylinder_shape){
        r_bub = 0.45;
        l_bub = (Vdst - (4./3.)*3.14159265358979*((r_bub)*(r_bub)*(r_bub)))/(3.14159265358979*((r_bub)*(r_bub)));
    } else{
        
# 159 "tube_bp.c" 3 4
       ((0 
# 159 "tube_bp.c"
       && "set shape"
# 159 "tube_bp.c" 3 4
       ) ? (void) (0) : __assert_fail (
# 159 "tube_bp.c"
       "false && \"set shape\""
# 159 "tube_bp.c" 3 4
       , "tube_bp.c", 159, __extension__ __PRETTY_FUNCTION__))
# 159 "tube_bp.c"
                                   ;
    }
    x_init = 1.7*l_bub;

    fprintf(
# 163 "tube_bp.c" 3 4
           stderr
# 163 "tube_bp.c"
               ,"BP:             eta_s=%g,     DT=%g\n"
                 "Solver:         NITERMIN=%d   NITERMAX=%d      TOLERANCE=%g  relative_residual_poisson=%d relative_residual_viscous=%d\n"
                 "OUTPUT:         dt_vtk=%g number of procs=%d\n"
                 "ADAPT:          minlevel=%d,  maxlevel=%d      adapt_meth=%d fseps=%g ueps=%g\n"
                 "Bubble case: %d\n"
                 "Properties(SI): Mu1=%g Mu2=%g Rho1=%g Rho2=%g  Sigma=%g G=%g UMEAN=%g\n"
                 "Apparatus:      diam_tube=%g  tube_length=%g\n"
                 "Bubble:         Vd=%g deq=%g  ellipse_shape=%d cylinder_shape=%d\n",
                 eta_s, DT,
                 NITERMIN, NITERMAX, TOLERANCE, relative_residual_poisson, relative_residual_viscous,
                 dt_vtk, 1,
                 minlevel, maxlevel, adapt_method, fseps, ueps,
                 bubcase,
                 Mu1, Mu2, Rho1, Rho2, Sigma, G, UMEAN,
                 diam_tube, L0,
                 Vd, deq, ellipse_shape, cylinder_shape);


    G /= Rho1*((UMEAN)*(UMEAN))/diam_tube;
    Umean = 1;
    diam_tube /= diam_tube;
    RhoR = Rho1/Rho2;
    MuR = Mu1/Mu2;

    rho1 = 1.;
    rho2 = 1./RhoR;
    mu1 = 1./Re;
    mu2 = 1./(MuR*Re);
    _attribute[f.i].sigma = 1./(Re*Ca_mod);
    fprintf(
# 192 "tube_bp.c" 3 4
           stderr
# 192 "tube_bp.c"
               ,"Dimensionless Parameters: mu1=%g mu2=%g rho1=%g rho2=%g sigma=%g G=%g  Umean=%g\n"
                 "Dimensionless nums:       Re=%g  Ca=%g  Ca_mod=%g\n"
                 "Bubble:                   Vdst=%g dst=%g  rst=%g  r_bub=%g l_bub=%g x_init=%g\n",
            mu1, mu2, rho1, rho2, _attribute[f.i].sigma, G, Umean,
            Re, Ca, Ca_mod,
            Vdst, dst, rst, r_bub, l_bub, x_init);
    int rank, psize, h_len;
    char hostname[MPI_MAX_PROCESSOR_NAME];

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    MPI_Comm_size(MPI_COMM_WORLD, &psize);
    MPI_Get_processor_name(hostname, &h_len);
    printf("rank:%d size: %d at %s h_len %d\n", rank, psize, hostname, h_len);

    run();
 free_solver(); }




static void _set_boundary6 (void) { _attribute[u.x.i].boundary[left] = _boundary6; _attribute[u.x.i].boundary_homogeneous[left] = _boundary6_homogeneous; }
static void _set_boundary7 (void) { _attribute[p.i].boundary[left] = _boundary7; _attribute[p.i].boundary_homogeneous[left] = _boundary7_homogeneous; }
static void _set_boundary8 (void) { _attribute[pf.i].boundary[left] = _boundary8; _attribute[pf.i].boundary_homogeneous[left] = _boundary8_homogeneous; }
static void _set_boundary9 (void) { _attribute[f.i].boundary[left] = _boundary9; _attribute[f.i].boundary_homogeneous[left] = _boundary9_homogeneous; }
static void _set_boundary10 (void) { _attribute[fs.i].boundary[left] = _boundary10; _attribute[fs.i].boundary_homogeneous[left] = _boundary10_homogeneous; }

static void _set_boundary11 (void) { _attribute[u.x.i].boundary[right] = _boundary11; _attribute[u.x.i].boundary_homogeneous[right] = _boundary11_homogeneous; }
static void _set_boundary12 (void) { _attribute[p.i].boundary[right] = _boundary12; _attribute[p.i].boundary_homogeneous[right] = _boundary12_homogeneous; }
static void _set_boundary13 (void) { _attribute[pf.i].boundary[right] = _boundary13; _attribute[pf.i].boundary_homogeneous[right] = _boundary13_homogeneous; }
static void _set_boundary14 (void) { _attribute[f.i].boundary[right] = _boundary14; _attribute[f.i].boundary_homogeneous[right] = _boundary14_homogeneous; }
static void _set_boundary15 (void) { _attribute[fs.i].boundary[right] = _boundary15; _attribute[fs.i].boundary_homogeneous[right] = _boundary15_homogeneous; }
void geometry(scalar fs)
{

    scalar phi= new_vertex_scalar("phi");
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 228 "tube_bp.c"
 {
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] = ((y)*(y)) + ((z)*(z)) - ((0.5)*(0.5));
    } } } } } }; }
    boundary (((scalar []){phi,{-1}}));
    fractions ((struct Fractions){phi, fs});
 delete (((scalar []){phi,{-1}})); }

void bubble(scalar f)
{
    scalar phi= new_vertex_scalar("phi");
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.k = ((Tree *)grid)->vertices.p[_k].k; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;; { x -= Delta/2.; y -= Delta/2.; z -= Delta/2.;{
# 238 "tube_bp.c"
 {
        if (ellipse_shape)
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] = (((x - x_init)/l_bub)*((x - x_init)/l_bub)) + ((y/r_bub)*(y/r_bub)) + ((z/r_bub)*(z/r_bub)) - ((1)*(1));
        else if (cylinder_shape)
        {
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] = ((0.5*l_bub - fabs(x - x_init)) < (((r_bub)*(r_bub)) - ((y)*(y)) - ((z)*(z))) ? (0.5*l_bub - fabs(x - x_init)) : (((r_bub)*(r_bub)) - ((y)*(y)) - ((z)*(z))));
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] = ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)]) > (((r_bub)*(r_bub)) - ((fabs(x - x_init) - 0.5*l_bub)*(fabs(x - x_init) - 0.5*l_bub)) - ((y)*(y)) - ((z)*(z))) ? (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)]) : (((r_bub)*(r_bub)) - ((fabs(x - x_init) - 0.5*l_bub)*(fabs(x - x_init) - 0.5*l_bub)) - ((y)*(y)) - ((z)*(z))));
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(phi.i)] *= -1;
        }
    } } } } } }; }
    boundary (((scalar []){phi,{-1}}));
    fractions ((struct Fractions){phi, f});
 delete (((scalar []){phi,{-1}})); }

int maXlevel(double x,double y, double z){
    double x0 = fabs(x - x_init - Umean*t);
    int n = ceil(((0) > (0.5*(x0/l_bub - 3)) ? (0) : (0.5*(x0/l_bub - 3))));
    return ((maxlevel-n) > (10) ? (maxlevel-n) : (10));
}




static int init_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (t = 0); *ip = i; *tp = t; return ret; } static int init_0 (const int i, const double t, Event * _ev) { ; {
    if (!restore ((struct Dump){.file = "restart"})) {
        int it = 1;
        astats s;
        do {
            fprintf(
# 266 "tube_bp.c" 3 4
                   stderr
# 266 "tube_bp.c"
                       , "iteration=%d\n", it);
            count_cells(t, i);
            geometry(fs);
            bubble(f);
             { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 270 "tube_bp.c"
 {
                ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)] = (1 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*2.*(1. - 4*((y)*(y)) - 4*((z)*(z)));
                ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)] = 0;
                ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)] = 0;
            } } } } }; }
            boundary((scalar *)((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}}));
            if (adapt_method == 0)
                s = adapt_wavelet((struct Adapt){(scalar *) ((scalar []){f,fs,u.x,{-1}}), (double[]) {fseps, fseps, ueps}, maxlevel, minlevel});
            else if (adapt_method == 1)
                s = adapt_wavelet_limited((struct Adapt_limited){(scalar *) ((scalar []){f,fs,u.x,{-1}}), (double []) {fseps, fseps, ueps}, maXlevel, minlevel});
            else if (adapt_method == 2)
                s = adapt_wavelet2((struct Adapt2){(scalar *) ((scalar []){f,fs,u.x,{-1}}), (double[]) {fseps, fseps, ueps}, (int[]) {maxlevel, maxlevel, maxlevel-2}, minlevel});
            fprintf(
# 282 "tube_bp.c" 3 4
                   stderr
# 282 "tube_bp.c"
                       , "Adaptation: nf=%d nc=%d\n", s.nf, s.nc);
            if (s.nf == 0 || it > 8) break;
            it++;
        } while(1);
        event("vtk_file");
    }else{
        fprintf(
# 288 "tube_bp.c" 3 4
               stderr
# 288 "tube_bp.c"
                   , "file is read\n");
    }
 ; } return 0; }
static int advection_term_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int advection_term_0 (const int i, const double t, Event * _ev) { ; {
    TOLERANCE = TOLERANCE_P;
 ; } return 0; }

static int viscous_term_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int viscous_term_0 (const int i, const double t, Event * _ev) { ; {
    TOLERANCE = TOLERANCE_V;
 ; } return 0; }

static int projection_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int projection_0 (const int i, const double t, Event * _ev) { ; {
    TOLERANCE = TOLERANCE_P;
 ; } return 0; }

static int logfile_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i +=10); *ip = i; *tp = t; return ret; } static int logfile (const int i, const double t, Event * _ev) { ;
{
    double x_mean = 0, velamean = 0, velgx = 0, velgy = 0, dvtmp, delta_min=1e+9, delta_mean=0, delta_max=-1e+9, r;
    double x_min = 1e+9, x_max = -1e+9, length = 0, volume_slice = 0, volumeg = 0, f_p_min;
    coord p_min, coord_tail;


     {


 {
double _x_mean = x_mean; double _volumeg = volumeg; double _velgx = velgx; double _velgy = velgy; double _velamean = velamean; double _delta_min = delta_min; double _x_min = x_min; double _x_max = x_max;
# 310 "tube_bp.c"

if (!((cm).i >= 65536)) {
# 310 "tube_bp.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 312 "tube_bp.c"
 {
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]<1){
            dvtmp = (1.0 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(1.0 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]);
            _volumeg += dvtmp;
            _x_mean += x*dvtmp;
            _velamean += (sqrt(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])) + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])) + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]))))*dvtmp;
            _velgx += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]*dvtmp;
            _velgy += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]*dvtmp;
            if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] > 0 && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < 1) {
                r = sqrt(((y)*(y)) + ((z)*(z))) + Delta*(0.5 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]);

                if (0.5 - r < _delta_min) {
                    p_min.x = x;
                    p_min.y = y;
                    p_min.z = z;
                    f_p_min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
                    _delta_min = 0.5 - r;
                }
                if (x < _x_min) _x_min = x;
                if (x > _x_max) _x_max = x;
                if (r < Delta && x < _x_mean) {
                    coord_tail.x = x;
                    coord_tail.y = y;
                    coord_tail.z = z;
                }
            }
        }
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 310 "tube_bp.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 312 "tube_bp.c"
 {
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)]<1){
            dvtmp = (1.0 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(1.0 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*(((Delta)*(Delta)*(Delta))*_const_cm);
            _volumeg += dvtmp;
            _x_mean += x*dvtmp;
            _velamean += (sqrt(((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)])) + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)])) + ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.z.i)]))))*dvtmp;
            _velgx += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.x.i)]*dvtmp;
            _velgy += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(u.y.i)]*dvtmp;
            if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] > 0 && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < 1) {
                r = sqrt(((y)*(y)) + ((z)*(z))) + Delta*(0.5 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]);

                if (0.5 - r < _delta_min) {
                    p_min.x = x;
                    p_min.y = y;
                    p_min.z = z;
                    f_p_min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)];
                    _delta_min = 0.5 - r;
                }
                if (x < _x_min) _x_min = x;
                if (x > _x_max) _x_max = x;
                if (r < Delta && x < _x_mean) {
                    coord_tail.x = x;
                    coord_tail.y = y;
                    coord_tail.z = z;
                }
            }
        }
    } } } } }; } x_mean += _x_mean;
;
 volumeg += _volumeg;
;
 velgx += _velgx;
;
 velgy += _velgy;
;
 velamean += _velamean;
;
 if (_delta_min < delta_min) delta_min = _delta_min;
;
 if (_x_min < x_min) x_min = _x_min;
;
 if (_x_max > x_max) x_max = _x_max;
;



}
# 339 "tube_bp.c"
 }

    x_mean /= volumeg; velgx /= volumeg; velgy /= volumeg; velamean /= volumeg; length = x_max - x_min;

     {


 {
double _volume_slice = volume_slice; double _delta_max = delta_max;
# 343 "tube_bp.c"

if (!((cm).i >= 65536)) {
# 343 "tube_bp.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 343 "tube_bp.c"
 {
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)] < 1 && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < 1 && x > p_min.x && x < x_mean){
            _volume_slice += (1.0 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((Delta)*(Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(cm.i)]);
            r = sqrt(((y)*(y)) + ((z)*(z))) + Delta*(0.5 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]);
            if (0.5 - r > _delta_max) _delta_max = 0.5 - r;
        }
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 343 "tube_bp.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 343 "tube_bp.c"
 {
        if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)] < 1 && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)] < 1 && x > p_min.x && x < x_mean){
            _volume_slice += (1.0 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)])*(((Delta)*(Delta)*(Delta))*_const_cm);
            r = sqrt(((y)*(y)) + ((z)*(z))) + Delta*(0.5 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(f.i)]);
            if (0.5 - r > _delta_max) _delta_max = 0.5 - r;
        }
    } } } } }; } volume_slice += _volume_slice;
;
 if (_delta_max > delta_max) delta_max = _delta_max;
;



}
# 349 "tube_bp.c"
 }
    delta_mean = 0.5 - sqrt(volume_slice/(3.14159265358979*(x_mean - p_min.x)));
if (i==0) fprintf(
# 351 "tube_bp.c" 3 4
                 stdout
# 351 "tube_bp.c"
                     , "t\tx_tail\tx_peak\ty_peak\tx_mean\tx_nose\tx_nose_ISC\tvolume\tUmeanV\tdelta_min\tdelta_mean\tdelta_max\tdelta_min_smooth\tdelta_max_smooth");
fprintf (
# 352 "tube_bp.c" 3 4
        stderr
# 352 "tube_bp.c"
            , "maxlevel= %d i= %d t= %g dt= %g volumeg= %g velgx= %g valgy= %g velamean= %g velgx/U0-1= %g\n"
                   "x_min= %g x_peak_max= %g %g %g coord_tail= %g %g %g x_mean= %g x_max= %g\n"
                   "delta_min= %g delta_mean(NOTE:x_mean_x_of_max_y)= %g delta_max= %g length= %g f_p_min(full_cell?)= %g it_fp= %d\n",
            maxlevel, i, t, dt, volumeg, velgx, velgy, velamean, (velgx/Umean - 1),
            x_min, p_min.x, p_min.y, p_min.z, coord_tail.x, coord_tail.y, coord_tail.z, x_mean, x_max,
            delta_min, delta_mean, delta_max, x_max - x_min, f_p_min, iter_fp);
    fprintf(
# 358 "tube_bp.c" 3 4
           stderr
# 358 "tube_bp.c"
               , "Ca\tUflow_m_s\tU_meanVT\tU_meanVT_m_s\tdelta_minVT\tdelta_meanVT\tdelta_maxVT\tmaxlevel\tlDomain\tdx\tN_per_delta\n");
    double dx_min = lDomain/pow(2., maxlevel);
    fprintf(
# 360 "tube_bp.c" 3 4
           stderr
# 360 "tube_bp.c"
               , "%8.5g\t%8.5g\t%8.5g\t%8.5g\t%8.5g\t%8.5g\t%8.5g\t%8d\t%8.5g\t%8.5g\t%8.5g\n",
            mu1*velgx/_attribute[f.i].sigma, UMEAN, velgx, velgx*UMEAN, delta_min, delta_mean, delta_max,
            maxlevel, lDomain, dx_min, delta_min/dx_min);

    fprintf (
# 364 "tube_bp.c" 3 4
            stdout
# 364 "tube_bp.c"
                , "%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\n",
    t, coord_tail.x, p_min.x, sqrt(((p_min.y)*(p_min.y)) + ((p_min.z)*(p_min.z))), x_mean, x_max, 0.0, volumeg, velgx,
    delta_min, delta_mean, delta_max);
    fflush(
# 367 "tube_bp.c" 3 4
          stdout
# 367 "tube_bp.c"
              );
 ; } return 0; }
# 380 "tube_bp.c"
static int snapshot_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i += snapshot_i); *ip = i; *tp = t; return ret; } static int snapshot (const int i, const double t, Event * _ev) { ;

{
    char name[80];
    scalar ppart= new_scalar("ppart");
    sprintf(name, "dump-%04g",t);
    vorticity (u, omega);
    lambda2 (u, l2);
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 388 "tube_bp.c"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ppart.i)] = 0; } } } }; }
    _attribute[p.i].nodump = 
# 389 "tube_bp.c" 3 4
                            0
# 389 "tube_bp.c"
                                 ;
    dump ((struct Dump){.file = name});
 delete (((scalar []){ppart,{-1}})); ; } return 0; }

static int snapshot_vtk_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i += 10000); *ip = i; *tp = t; return ret; } static int snapshot_vtk (const int i, const double t, Event * _ev) { ;
{
    char name[80];
    sprintf(name, "dump-%04g", t);
    dump ((struct Dump){.file = name});
 ; } return 0; }

void exact(vector ue)
{
     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 402 "tube_bp.c"
 {
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ue.x.i)] = (1 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])*2.*(1. - 4*((y)*(y)) - 4*((z)*(z)));
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ue.y.i)] = 0;
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(ue.z.i)] = 0;
    } } } } }; }
    boundary((scalar *)((vector []){{ue.x,ue.y,ue.z},{{-1},{-1},{-1}}}));
}

static int vtk_file_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (t += dt_vtk); *ip = i; *tp = t; return ret; } static int vtk_file_0 (const int i, const double t, Event * _ev) { ;
{
    char subname[80]; sprintf(subname, "tube_bp");
    scalar l= new_scalar("l"); { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 413 "tube_bp.c"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(l.i)] = level; } } } }; }
    scalar np= new_scalar("np"); { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {0}; point.i = 2; point.j = 2; point.k = 2; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.k = ((Tree *)grid)->leaves.p[_k].k; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;{
# 414 "tube_bp.c"
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(np.i)] = 0; } } } }; }
    vorticity (u, omega);
    lambda2 (u, l2);


    output_vtu_MPI((struct PVD_output){ subname, (iter_fp) ? t + dt : 0, (scalar *) ((scalar []){p,fs,f,np,l,omega,l2,{-1}}), (vector *) ((vector []){{u.x,u.y,u.z},{{-1},{-1},{-1}}})});
    fprintf(
# 420 "tube_bp.c" 3 4
           stderr
# 420 "tube_bp.c"
               , "end:snapshot_vtk");
    event("snapshot_vtk");
 delete (((scalar []){np,l,{-1}})); ; } return 0; }
# 432 "tube_bp.c"
static int adapt_0_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (i++); *ip = i; *tp = t; return ret; } static int adapt_0 (const int i, const double t, Event * _ev) { ;
{
    double eps_arr[] = {fseps, ueps, ueps, ueps};
    fprintf(
# 435 "tube_bp.c" 3 4
           stderr
# 435 "tube_bp.c"
               , "beginning adapt\n");
    vorticity (u, omega);

    if (adapt_method == 0)
        adapt_wavelet ((struct Adapt){(scalar *) ((scalar []){f,u.x,u.y,u.z,{-1}}), (double []) {fseps, ueps, ueps, ueps}, .maxlevel = maxlevel, .minlevel = minlevel});
    else if (adapt_method == 1)

        adapt_wavelet_limited ((struct Adapt_limited){(scalar *) ((scalar []){f,u.x,u.y,u.z,{-1}}), (double []) {fseps, ueps, ueps, ueps}, maXlevel, minlevel});
    else if (adapt_method == 2)
        adapt_wavelet2((struct Adapt2){(scalar *)((scalar []){f,u.x,u.y,u.z,{-1}}), (double []) {fseps, ueps, ueps, ueps},(int []){maxlevel, maxlevel-1, maxlevel-2, maxlevel-2, maxlevel-2}, minlevel});

    fprintf(
# 446 "tube_bp.c" 3 4
           stderr
# 446 "tube_bp.c"
               , "ended adapt\n");
    count_cells(t, i);
    geometry(fs);
    double eps_arr2[] = {1, 1, 1, 1};
    if (i % 10 == 0 || i < 5) MinMaxValues (((scalar []){u.x,u.y,u.z,p,{-1}}), eps_arr2);
 ; } return 0; }

static int stop_expr0 (int * ip, double * tp, Event * _ev) { int i = *ip; double t = *tp; int ret = (t=L0/Umean); *ip = i; *tp = t; return ret; } static int stop (const int i, const double t, Event * _ev) { ; ; ; return 0; }
# 104 "./../src_local/centered-weugene.h"
static double _boundary0 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 103 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 104 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 104 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 124 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 104 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.x.i)]*_const_fm.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 126 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 104 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.x*_const_fm.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 142 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.x.i)]/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 144 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.x.i)]/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 124 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 144 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.x.i)]*_const_fm.x/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 126 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 146 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.x*_const_fm.x/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; } static double _boundary0_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 103 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 124 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 126 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 142 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 144 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 124 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 144 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 126 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 146 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 104 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; }
# 105 "./../src_local/centered-weugene.h"
static double _boundary1 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 104 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 125 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)]*_const_fm.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 127 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.x*_const_fm.x/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.x.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 143 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 145 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.x.i)]/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 125 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 145 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.x.i)]*_const_fm.x/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 127 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 147 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.x*_const_fm.x/_const_alpha.x)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; } static double _boundary1_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 104 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 125 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 127 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 143 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 145 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 125 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 145 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 127 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 147 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 105 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; }
# 114 "./../src_local/centered-weugene.h"
static double _boundary2 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 113 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 114 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 114 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 134 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 114 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.y.i)]*_const_fm.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 136 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 114 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.y*_const_fm.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 152 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.y.i)]/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 154 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.y.i)]/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 134 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 154 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.y.i)]*_const_fm.y/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 136 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 156 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.y*_const_fm.y/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; } static double _boundary2_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 113 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 134 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 136 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 152 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 154 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 134 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 154 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 136 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 156 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 114 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; }
# 115 "./../src_local/centered-weugene.h"
static double _boundary3 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 114 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 135 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)]*_const_fm.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 137 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.y*_const_fm.y/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.y.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 153 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 155 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.y.i)]/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 135 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 155 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.y.i)]*_const_fm.y/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 137 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 157 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.y*_const_fm.y/_const_alpha.y)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; } static double _boundary3_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 114 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 135 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 137 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 153 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 155 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 135 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 155 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 137 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 157 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 115 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; }
# 118 "./../src_local/centered-weugene.h"
static double _boundary4 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 117 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 118 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 118 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 138 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 118 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.z.i)]*_const_fm.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 140 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 118 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.z*_const_fm.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 156 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.z.i)]/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 158 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(fm.z.i)]/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 138 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 158 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (Delta*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(ig > 0 ? 1 : ig < 0 ? -1 : 0)][point.j+(jg > 0 ? 1 : jg < 0 ? -1 : 0)] [point.k+(kg > 0 ? 1 : kg < 0 ? -1 : 0)]) + sizeof(Cell)))[(a.z.i)]*_const_fm.z/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 140 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 160 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (Delta*((_const_a.z*_const_fm.z/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; } static double _boundary4_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 117 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 138 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 140 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 156 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 158 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 138 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 158 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 140 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 160 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 118 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; }
# 119 "./../src_local/centered-weugene.h"
static double _boundary5 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 118 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 139 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)]*_const_fm.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 141 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.z*_const_fm.z/((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(alpha.z.i)])) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 157 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 159 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.z*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fm.z.i)]/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 139 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 159 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(a.z.i)]*_const_fm.z/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 141 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 161 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (Delta*(- (_const_a.z*_const_fm.z/_const_alpha.z)) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; } static double _boundary5_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 118 "./../src_local/centered-weugene.h"

if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
# 139 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && !((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 141 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 157 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && !((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 159 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (!((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
# 139 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 159 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); }
if (((a.x).i >= 65536) && ((fm.x).i >= 65536) && ((alpha.x).i >= 65536)) {
const struct { double x, y, z; } _const_a = {_constant[a.x.i -65536], _constant[a.y.i - 65536], _constant[a.z.i - 65536]};
(void)(_const_a);
# 141 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_fm = {_constant[fm.x.i -65536], _constant[fm.y.i - 65536], _constant[fm.z.i - 65536]};
(void)(_const_fm);
# 161 "./../src_local/centered-weugene.h"
const struct { double x, y, z; } _const_alpha = {_constant[alpha.x.i -65536], _constant[alpha.y.i - 65536], _constant[alpha.z.i - 65536]};
(void)(_const_alpha);
# 119 "./../src_local/centered-weugene.h"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); } return 0.; }
# 213 "tube_bp.c"
static double _boundary6 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 212 "tube_bp.c"
return (2.*(2.*(1. - 4*((y)*(y)) - 4*((z)*(z)))*(1 - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(fs.i)])) - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary6_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 212 "tube_bp.c"
return (- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 214 "tube_bp.c"
static double _boundary7 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 213 "tube_bp.c"
return (Delta*(0) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary7_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 213 "tube_bp.c"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 215 "tube_bp.c"
static double _boundary8 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 214 "tube_bp.c"
return (Delta*(0) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary8_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 214 "tube_bp.c"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 216 "tube_bp.c"
static double _boundary9 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 215 "tube_bp.c"
return (2.*(1) - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary9_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 215 "tube_bp.c"
return (- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 217 "tube_bp.c"
static double _boundary10 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 216 "tube_bp.c"
return (Delta*(0) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary10_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 216 "tube_bp.c"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 219 "tube_bp.c"
static double _boundary11 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 218 "tube_bp.c"
return (Delta*(0) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary11_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 218 "tube_bp.c"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 220 "tube_bp.c"
static double _boundary12 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 219 "tube_bp.c"
return (2.*(0) - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary12_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 219 "tube_bp.c"
return (- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 221 "tube_bp.c"
static double _boundary13 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 220 "tube_bp.c"
return (2.*(0) - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary13_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 220 "tube_bp.c"
return (- ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 222 "tube_bp.c"
static double _boundary14 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 221 "tube_bp.c"
return (Delta*(0) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary14_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 221 "tube_bp.c"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
# 223 "tube_bp.c"
static double _boundary15 (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 222 "tube_bp.c"
return (Delta*(0) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; } static double _boundary15_homogeneous (Point point, Point neighbor, scalar _s, void * data) { int ig = neighbor.i - point.i; if (ig == 0) ig = _attribute[_s.i].d.x; (void)(ig); int jg = neighbor.j - point.j; if (jg == 0) jg = _attribute[_s.i].d.y; (void)(jg); int kg = neighbor.k - point.k; if (kg == 0) kg = _attribute[_s.i].d.z; (void)(kg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double Delta_z = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = (kg/2. + (point.k - 2) + 0.5)*Delta + Z0; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); (void)(Delta_z); ; int level = point.level; (void)(level); struct { int x, y, z; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1, 2*((point.k+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2; parent.k = (point.k + 2)/2;;
# 222 "tube_bp.c"
return (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0] [point.k+0]) + sizeof(Cell)))[(_s.i)]); return 0.; }
size_t datasize = 23*sizeof (double);
static int defaults (const int i, const double t, Event * _ev);
static int defaults_expr0 (int * ip, double * tp, Event * _ev);
static int cleanup (const int i, const double t, Event * _ev);
static int cleanup_expr0 (int * ip, double * tp, Event * _ev);
static int defaults_0 (const int i, const double t, Event * _ev);
static int defaults_0_expr0 (int * ip, double * tp, Event * _ev);
static int init (const int i, const double t, Event * _ev);
static int init_expr0 (int * ip, double * tp, Event * _ev);
static int set_dtmax (const int i, const double t, Event * _ev);
static int set_dtmax_expr0 (int * ip, double * tp, Event * _ev);
static int stability (const int i, const double t, Event * _ev);
static int stability_expr0 (int * ip, double * tp, Event * _ev);
static int vof (const int i, const double t, Event * _ev);
static int vof_expr0 (int * ip, double * tp, Event * _ev);
static int tracer_advection (const int i, const double t, Event * _ev);
static int tracer_advection_expr0 (int * ip, double * tp, Event * _ev);
static int properties (const int i, const double t, Event * _ev);
static int properties_expr0 (int * ip, double * tp, Event * _ev);
static int tracer_diffusion (const int i, const double t, Event * _ev);
static int tracer_diffusion_expr0 (int * ip, double * tp, Event * _ev);
static int advection_term (const int i, const double t, Event * _ev);
static int advection_term_expr0 (int * ip, double * tp, Event * _ev);
static int viscous_term (const int i, const double t, Event * _ev);
static int viscous_term_expr0 (int * ip, double * tp, Event * _ev);
static int acceleration (const int i, const double t, Event * _ev);
static int acceleration_expr0 (int * ip, double * tp, Event * _ev);
static int projection (const int i, const double t, Event * _ev);
static int projection_expr0 (int * ip, double * tp, Event * _ev);
static int end_timestep (const int i, const double t, Event * _ev);
static int end_timestep_expr0 (int * ip, double * tp, Event * _ev);
static int vtk_file (const int i, const double t, Event * _ev);
static int vtk_file_expr0 (int * ip, double * tp, Event * _ev);
static int adapt (const int i, const double t, Event * _ev);
static int adapt_expr0 (int * ip, double * tp, Event * _ev);
static int defaults_1 (const int i, const double t, Event * _ev);
static int defaults_1_expr0 (int * ip, double * tp, Event * _ev);
static int stability_0 (const int i, const double t, Event * _ev);
static int stability_0_expr0 (int * ip, double * tp, Event * _ev);
static int vof_0 (const int i, const double t, Event * _ev);
static int vof_0_expr0 (int * ip, double * tp, Event * _ev);
static int defaults_2 (const int i, const double t, Event * _ev);
static int defaults_2_expr0 (int * ip, double * tp, Event * _ev);
static int properties_0 (const int i, const double t, Event * _ev);
static int properties_0_expr0 (int * ip, double * tp, Event * _ev);
static int defaults_3 (const int i, const double t, Event * _ev);
static int defaults_3_expr0 (int * ip, double * tp, Event * _ev);
static int acceleration_0 (const int i, const double t, Event * _ev);
static int acceleration_0_expr0 (int * ip, double * tp, Event * _ev);
static int stability_1 (const int i, const double t, Event * _ev);
static int stability_1_expr0 (int * ip, double * tp, Event * _ev);
static int acceleration_1 (const int i, const double t, Event * _ev);
static int acceleration_1_expr0 (int * ip, double * tp, Event * _ev);
static int runtime (const int i, const double t, Event * _ev);
static int runtime_expr0 (int * ip, double * tp, Event * _ev);
static int init_0 (const int i, const double t, Event * _ev);
static int init_0_expr0 (int * ip, double * tp, Event * _ev);
static int advection_term_0 (const int i, const double t, Event * _ev);
static int advection_term_0_expr0 (int * ip, double * tp, Event * _ev);
static int viscous_term_0 (const int i, const double t, Event * _ev);
static int viscous_term_0_expr0 (int * ip, double * tp, Event * _ev);
static int projection_0 (const int i, const double t, Event * _ev);
static int projection_0_expr0 (int * ip, double * tp, Event * _ev);
static int logfile (const int i, const double t, Event * _ev);
static int logfile_expr0 (int * ip, double * tp, Event * _ev);
static int snapshot (const int i, const double t, Event * _ev);
static int snapshot_expr0 (int * ip, double * tp, Event * _ev);
static int snapshot_vtk (const int i, const double t, Event * _ev);
static int snapshot_vtk_expr0 (int * ip, double * tp, Event * _ev);
static int vtk_file_0 (const int i, const double t, Event * _ev);
static int vtk_file_0_expr0 (int * ip, double * tp, Event * _ev);
static int adapt_0 (const int i, const double t, Event * _ev);
static int adapt_0_expr0 (int * ip, double * tp, Event * _ev);
static int stop (const int i, const double t, Event * _ev);
static int stop_expr0 (int * ip, double * tp, Event * _ev);
static void _set_boundary0 (void);
static void _set_boundary1 (void);
static void _set_boundary2 (void);
static void _set_boundary3 (void);
static void _set_boundary4 (void);
static void _set_boundary5 (void);
static void _set_boundary6 (void);
static void _set_boundary7 (void);
static void _set_boundary8 (void);
static void _set_boundary9 (void);
static void _set_boundary10 (void);
static void _set_boundary11 (void);
static void _set_boundary12 (void);
static void _set_boundary13 (void);
static void _set_boundary14 (void);
static void _set_boundary15 (void);
void _init_solver (void) {
  void init_solver();
  init_solver();
  Events = (Event *) malloc(sizeof (Event));
  Events[0].last = 1;
  event_register ((Event){ 0, 1, defaults, {defaults_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/run.h", 42, "defaults"});
  event_register ((Event){ 0, 1, defaults_0, {defaults_0_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 139, "defaults"});
  event_register ((Event){ 0, 1, defaults_1, {defaults_1_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/vof.h", 107, "defaults"});
  event_register ((Event){ 0, 1, defaults_2, {defaults_2_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/two-phase.h", 25, "defaults"});
  event_register ((Event){ 0, 1, defaults_3, {defaults_3_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/iforce.h", 30, "defaults"});
  event_register ((Event){ 0, 1, init, {init_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 194, "init"});
  event_register ((Event){ 0, 1, init_0, {init_0_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 261, "init"});
  event_register ((Event){ 0, 1, runtime, {runtime_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/maxruntime.h", 20, "runtime"});
  event_register ((Event){ 0, 1, logfile, {logfile_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 303, "logfile"});
  event_register ((Event){ 0, 1, snapshot, {snapshot_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 380, "snapshot"});
  event_register ((Event){ 0, 1, snapshot_vtk, {snapshot_vtk_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 393, "snapshot_vtk"});
  event_register ((Event){ 0, 1, stop, {stop_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 453, "stop"});
  event_register ((Event){ 0, 1, cleanup, {cleanup_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/run.h", 50, "cleanup"});
  event_register ((Event){ 0, 1, set_dtmax, {set_dtmax_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 222, "set_dtmax"});
  event_register ((Event){ 0, 1, stability, {stability_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 224, "stability"});
  event_register ((Event){ 0, 1, stability_0, {stability_0_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/vof.h", 125, "stability"});
  event_register ((Event){ 0, 1, stability_1, {stability_1_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/tension.h", 37, "stability"});
  event_register ((Event){ 0, 1, vof, {vof_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 236, "vof"});
  event_register ((Event){ 0, 1, vof_0, {vof_0_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/vof.h", 371, "vof"});
  event_register ((Event){ 0, 1, tracer_advection, {tracer_advection_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 237, "tracer_advection"});
  event_register ((Event){ 0, 1, properties, {properties_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 244, "properties"});
  event_register ((Event){ 0, 1, properties_0, {properties_0_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/two-phase.h", 64, "properties"});
  event_register ((Event){ 0, 1, tracer_diffusion, {tracer_diffusion_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 248, "tracer_diffusion"});
  event_register ((Event){ 0, 1, advection_term, {advection_term_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 328, "advection_term"});
  event_register ((Event){ 0, 1, advection_term_0, {advection_term_0_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 291, "advection_term"});
  event_register ((Event){ 0, 1, viscous_term, {viscous_term_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 364, "viscous_term"});
  event_register ((Event){ 0, 1, viscous_term_0, {viscous_term_0_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 295, "viscous_term"});
  event_register ((Event){ 0, 1, acceleration, {acceleration_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 404, "acceleration"});
  event_register ((Event){ 0, 1, acceleration_0, {acceleration_0_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/iforce.h", 44, "acceleration"});
  event_register ((Event){ 0, 1, acceleration_1, {acceleration_1_expr0}, ((int *)0), ((double *)0),
    "/home/e.sharaborin/basilisk/src/tension.h", 72, "acceleration"});
  event_register ((Event){ 0, 1, projection, {projection_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 450, "projection"});
  event_register ((Event){ 0, 1, projection_0, {projection_0_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 299, "projection"});
  event_register ((Event){ 0, 1, end_timestep, {end_timestep_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 477, "end_timestep"});
  event_register ((Event){ 0, 1, vtk_file, {vtk_file_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 482, "vtk_file"});
  event_register ((Event){ 0, 1, vtk_file_0, {vtk_file_0_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 410, "vtk_file"});
  event_register ((Event){ 0, 1, adapt, {adapt_expr0}, ((int *)0), ((double *)0),
    "./../src_local/centered-weugene.h", 491, "adapt"});
  event_register ((Event){ 0, 1, adapt_0, {adapt_0_expr0}, ((int *)0), ((double *)0),
    "tube_bp.c", 432, "adapt"});
  _attribute = (_Attributes *) calloc(datasize/sizeof(double),sizeof (_Attributes));
  all = (scalar *) malloc(sizeof (scalar)*24);
  for (int i = 0; i < 23; i++)
    all[i].i = i;
  all[23].i = -1;
  set_fpe();
  octree_methods();
  init_scalar ((scalar){22}, "sf");
  init_scalar ((scalar){21}, "rhov");
  init_face_vector ((vector){{18},{19},{20}}, "alphav");
  init_scalar ((scalar){17}, "f");
  init_face_vector ((vector){{14},{15},{16}}, "uf");
  init_scalar ((scalar){13}, "pf");
  init_vector ((vector){{10},{11},{12}}, "g");
  init_vector ((vector){{7},{8},{9}}, "u");
  init_scalar ((scalar){6}, "p");
  init_scalar ((scalar){5}, "divutmpAfter");
  init_scalar ((scalar){4}, "divutmp");
  init_scalar ((scalar){3}, "residual_of_p");
  init_const_vector ((vector){{65536 +9},{65536 +10},{65536 +11}}, "zerocf", (double []) {0.,0.,0.});
  init_scalar ((scalar){2}, "l2");
  init_scalar ((scalar){1}, "omega");
  init_scalar ((scalar){0}, "fs");
  init_const_scalar ((scalar){65536 +7}, "zeroc", 0.);
  init_const_scalar ((scalar){65536 +6}, "unity", 1.);
  init_const_vector ((vector){{65536 +3},{65536 +4},{65536 +5}}, "unityf", (double []) {1.,1.,1.});
  init_const_vector ((vector){{65536 +0},{65536 +1},{65536 +2}}, "zerof", (double []) {0.,0.,0.});
  _set_boundary0();
  _set_boundary1();
  _set_boundary2();
  _set_boundary3();
  _set_boundary4();
  _set_boundary5();
  _set_boundary6();
  _set_boundary7();
  _set_boundary8();
  _set_boundary9();
  _set_boundary10();
  _set_boundary11();
  _set_boundary12();
  _set_boundary13();
  _set_boundary14();
  _set_boundary15();
}
