# 1 ".qcclkQyWq/foreach_dimension_in_foreach_dimension.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 ".qcclkQyWq/foreach_dimension_in_foreach_dimension.c"
# 1 "foreach_dimension_in_foreach_dimension-cpp.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "foreach_dimension_in_foreach_dimension-cpp.c"
# 1 "/Users/weugene/basilisk/src/common.h"
# 1 "/usr/include/stdlib.h" 1 3 4
# 61 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/Availability.h" 1 3 4
# 206 "/usr/include/Availability.h" 3 4
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/AvailabilityInternal.h" 1 3 4
# 207 "/usr/include/Availability.h" 2 3 4
# 62 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/_types.h" 1 3 4
# 27 "/usr/include/_types.h" 3 4
# 1 "/usr/include/sys/_types.h" 1 3 4
# 32 "/usr/include/sys/_types.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 587 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 588 "/usr/include/sys/cdefs.h" 2 3 4
# 653 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_posix_availability.h" 1 3 4
# 654 "/usr/include/sys/cdefs.h" 2 3 4
# 33 "/usr/include/sys/_types.h" 2 3 4
# 1 "/usr/include/machine/_types.h" 1 3 4
# 32 "/usr/include/machine/_types.h" 3 4
# 1 "/usr/include/i386/_types.h" 1 3 4
# 37 "/usr/include/i386/_types.h" 3 4

# 37 "/usr/include/i386/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;







typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 33 "/usr/include/machine/_types.h" 2 3 4
# 34 "/usr/include/sys/_types.h" 2 3 4
# 55 "/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];

# 1 "/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 57 "/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 81 "/usr/include/sys/_types.h" 2 3 4
# 28 "/usr/include/_types.h" 2 3 4
# 40 "/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 64 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/sys/wait.h" 1 3 4
# 79 "/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;





# 1 "/usr/include/sys/_types/_pid_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_pid_t.h" 3 4
typedef __darwin_pid_t pid_t;
# 90 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/_types/_id_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_id_t.h" 3 4
typedef __darwin_id_t id_t;
# 91 "/usr/include/sys/wait.h" 2 3 4
# 109 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/signal.h" 1 3 4
# 73 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 74 "/usr/include/sys/signal.h" 2 3 4
# 82 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/machine/signal.h" 1 3 4
# 32 "/usr/include/machine/signal.h" 3 4
# 1 "/usr/include/i386/signal.h" 1 3 4
# 39 "/usr/include/i386/signal.h" 3 4
typedef int sig_atomic_t;
# 33 "/usr/include/machine/signal.h" 2 3 4
# 83 "/usr/include/sys/signal.h" 2 3 4
# 146 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/machine/_mcontext.h" 1 3 4
# 29 "/usr/include/machine/_mcontext.h" 3 4
# 1 "/usr/include/i386/_mcontext.h" 1 3 4
# 34 "/usr/include/i386/_mcontext.h" 3 4
# 1 "/usr/include/mach/machine/_structs.h" 1 3 4
# 33 "/usr/include/mach/machine/_structs.h" 3 4
# 1 "/usr/include/mach/i386/_structs.h" 1 3 4
# 36 "/usr/include/mach/i386/_structs.h" 3 4
# 1 "/usr/include/machine/types.h" 1 3 4
# 35 "/usr/include/machine/types.h" 3 4
# 1 "/usr/include/i386/types.h" 1 3 4
# 76 "/usr/include/i386/types.h" 3 4
# 1 "/usr/include/sys/_types/_int8_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int8_t.h" 3 4
typedef signed char int8_t;
# 77 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_int16_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int16_t.h" 3 4
typedef short int16_t;
# 78 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_int32_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int32_t.h" 3 4
typedef int int32_t;
# 79 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_int64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int64_t.h" 3 4
typedef long long int64_t;
# 80 "/usr/include/i386/types.h" 2 3 4

# 1 "/usr/include/sys/_types/_u_int8_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int8_t.h" 3 4
typedef unsigned char u_int8_t;
# 82 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int16_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int16_t.h" 3 4
typedef unsigned short u_int16_t;
# 83 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int32_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int32_t.h" 3 4
typedef unsigned int u_int32_t;
# 84 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int64_t.h" 3 4
typedef unsigned long long u_int64_t;
# 85 "/usr/include/i386/types.h" 2 3 4


typedef int64_t register_t;




# 1 "/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_intptr_t.h" 3 4
# 1 "/usr/include/machine/types.h" 1 3 4
# 31 "/usr/include/sys/_types/_intptr_t.h" 2 3 4

typedef __darwin_intptr_t intptr_t;
# 93 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uintptr_t.h" 3 4
typedef unsigned long uintptr_t;
# 94 "/usr/include/i386/types.h" 2 3 4
# 111 "/usr/include/i386/types.h" 3 4
typedef u_int64_t syscall_arg_t;
# 36 "/usr/include/machine/types.h" 2 3 4
# 37 "/usr/include/mach/i386/_structs.h" 2 3 4
# 46 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 92 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,





    __rc :2,






             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 150 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 194 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 213 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 229 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_ymm_reg
{
 char __ymm_reg[32];
};
# 245 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_zmm_reg
{
 char __zmm_reg[64];
};
# 259 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_opmask_reg
{
 char __opmask_reg[8];
};
# 281 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};


struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};


struct __darwin_i386_avx512_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
};
# 575 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
# 595 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};
# 627 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 682 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};


struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};


struct __darwin_x86_avx512_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
 struct __darwin_ymm_reg __fpu_zmmh8;
 struct __darwin_ymm_reg __fpu_zmmh9;
 struct __darwin_ymm_reg __fpu_zmmh10;
 struct __darwin_ymm_reg __fpu_zmmh11;
 struct __darwin_ymm_reg __fpu_zmmh12;
 struct __darwin_ymm_reg __fpu_zmmh13;
 struct __darwin_ymm_reg __fpu_zmmh14;
 struct __darwin_ymm_reg __fpu_zmmh15;
 struct __darwin_zmm_reg __fpu_zmm16;
 struct __darwin_zmm_reg __fpu_zmm17;
 struct __darwin_zmm_reg __fpu_zmm18;
 struct __darwin_zmm_reg __fpu_zmm19;
 struct __darwin_zmm_reg __fpu_zmm20;
 struct __darwin_zmm_reg __fpu_zmm21;
 struct __darwin_zmm_reg __fpu_zmm22;
 struct __darwin_zmm_reg __fpu_zmm23;
 struct __darwin_zmm_reg __fpu_zmm24;
 struct __darwin_zmm_reg __fpu_zmm25;
 struct __darwin_zmm_reg __fpu_zmm26;
 struct __darwin_zmm_reg __fpu_zmm27;
 struct __darwin_zmm_reg __fpu_zmm28;
 struct __darwin_zmm_reg __fpu_zmm29;
 struct __darwin_zmm_reg __fpu_zmm30;
 struct __darwin_zmm_reg __fpu_zmm31;
};
# 1140 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
# 1160 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 1188 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_cpmu_state64
{
 __uint64_t __ctrs[16];
};
# 34 "/usr/include/mach/machine/_structs.h" 2 3 4
# 35 "/usr/include/i386/_mcontext.h" 2 3 4




struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};


struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};



struct __darwin_mcontext_avx512_32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx512_state __fs;
};
# 97 "/usr/include/i386/_mcontext.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};



struct __darwin_mcontext_avx512_64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx512_state64 __fs;
};
# 156 "/usr/include/i386/_mcontext.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 30 "/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;
# 149 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 42 "/usr/include/sys/_types/_sigaltstack.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_ucontext.h" 1 3 4
# 39 "/usr/include/sys/_types/_ucontext.h" 3 4
# 1 "/usr/include/machine/_mcontext.h" 1 3 4
# 40 "/usr/include/sys/_types/_ucontext.h" 2 3 4


struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;

 struct __darwin_mcontext64 __mcontext_data;

};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/usr/include/sys/signal.h" 2 3 4


# 1 "/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_sigset_t.h" 3 4
typedef __darwin_sigset_t sigset_t;
# 155 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_size_t.h" 3 4
typedef __darwin_size_t size_t;
# 156 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_uid_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_uid_t.h" 3 4
typedef __darwin_uid_t uid_t;
# 157 "/usr/include/sys/signal.h" 2 3 4

union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 269 "/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 367 "/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 389 "/usr/include/sys/signal.h" 3 4

void (*signal(int, void (*)(int)))(int);

# 110 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 80 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/sys/_types/_timeval.h" 1 3 4
# 34 "/usr/include/sys/_types/_timeval.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 81 "/usr/include/sys/resource.h" 2 3 4
# 89 "/usr/include/sys/resource.h" 3 4
typedef __uint64_t rlim_t;
# 152 "/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;

 long ru_opaque[14];
# 180 "/usr/include/sys/resource.h" 3 4
};
# 365 "/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 424 "/usr/include/sys/resource.h" 3 4

int getpriority(int, id_t);



int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);



int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );

# 111 "/usr/include/sys/wait.h" 2 3 4
# 247 "/usr/include/sys/wait.h" 3 4

pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );






# 66 "/usr/include/stdlib.h" 2 3 4
# 80 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 34 "/usr/include/sys/_types/_wchar_t.h" 3 4
typedef __darwin_wchar_t wchar_t;
# 81 "/usr/include/stdlib.h" 2 3 4

typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;


# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 100 "/usr/include/stdlib.h" 2 3 4
# 117 "/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
# 135 "/usr/include/stdlib.h" 3 4

void abort(void) __attribute__((noreturn));
int abs(int) __attribute__((const));
int atexit(void (* )(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (* __compar)(const void *, const void *));
void *calloc(size_t __count, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2)));
div_t div(int, int) __attribute__((const));
void exit(int) __attribute__((noreturn));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((const));
ldiv_t ldiv(long, long) __attribute__((const));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
int mblen(const char *__s, size_t __n);
size_t mbstowcs(wchar_t * restrict , const char * restrict, size_t);
int mbtowc(wchar_t * restrict, const char * restrict, size_t);
int posix_memalign(void **__memptr, size_t __alignment, size_t __size) ;
void qsort(void *__base, size_t __nel, size_t __width,
     int (* __compar)(const void *, const void *));
int rand(void) ;
void *realloc(void *__ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
void srand(unsigned) ;
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *__str, char **__endptr, int __base);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *__str, char **__endptr, int __base);

unsigned long
  strtoul(const char *__str, char **__endptr, int __base);

unsigned long long
  strtoull(const char *__str, char **__endptr, int __base);
# 192 "/usr/include/stdlib.h" 3 4



int system(const char *) __asm("_" "system" );



size_t wcstombs(char * restrict, const wchar_t * restrict, size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((noreturn));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *restrict, int *restrict);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *restrict, int *restrict);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]) ;
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void) ;
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void) ;
long nrand48(unsigned short[3]) ;
int posix_openpt(int);
char *ptsname(int);





int putenv(char *) __asm("_" "putenv" );
long random(void) ;
int rand_r(unsigned *) ;



char *realpath(const char * restrict, char * restrict) __asm("_" "realpath" );

unsigned short
 *seed48(unsigned short[3]);
int setenv(const char * __name, const char * __value, int __overwrite) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );
# 354 "/usr/include/stdlib.h" 3 4

# 2 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 1 3 4
# 14 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdarg.h" 1 3 4
# 40 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 15 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 2 3 4
# 78 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4
# 1 "/usr/include/_stdio.h" 1 3 4
# 75 "/usr/include/_stdio.h" 3 4
# 1 "/usr/include/sys/_types/_va_list.h" 1 3 4
# 32 "/usr/include/sys/_types/_va_list.h" 3 4
typedef __darwin_va_list va_list;
# 76 "/usr/include/_stdio.h" 2 3 4



# 1 "/usr/include/sys/stdio.h" 1 3 4
# 37 "/usr/include/sys/stdio.h" 3 4


int renameat(int, const char *, int, const char *) ;
# 51 "/usr/include/sys/stdio.h" 3 4

# 80 "/usr/include/_stdio.h" 2 3 4

typedef __darwin_off_t fpos_t;
# 92 "/usr/include/_stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 126 "/usr/include/_stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (* _close)(void *);
 int (* _read) (void *, char *, int);
 fpos_t (* _seek) (void *, fpos_t, int);
 int (* _write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;
# 79 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 2 3 4


extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;

# 155 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4

void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * restrict, fpos_t *);
char *fgets(char * restrict, int, FILE *);



FILE *fopen(const char * restrict __filename, const char * restrict __mode) __asm("_" "fopen" );

int fprintf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * restrict, FILE * restrict) __asm("_" "fputs" );
size_t fread(void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream);
FILE *freopen(const char * restrict, const char * restrict,
                 FILE * restrict) __asm("_" "freopen" );
int fscanf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * restrict, ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *__old, const char *__new);
void rewind(FILE *);
int scanf(const char * restrict, ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * restrict, char * restrict);
int setvbuf(FILE * restrict, char * restrict, int, size_t);
int sprintf(char * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) ;
int sscanf(const char * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);





char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * restrict, const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * restrict, const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 2, 0))) ;

# 218 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4




char *ctermid(char *);





FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);

# 245 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4

int pclose(FILE *) ;



FILE *popen(const char *, const char *) __asm("_" "popen" ) ;


# 266 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4

int __srget(FILE *);
int __svfscanf(FILE *, const char *, __gnuc_va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);








extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 303 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4

void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);











char *tempnam(const char *__dir, const char *__prefix) __asm("_" "tempnam" );

# 342 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4
# 1 "/usr/include/sys/_types/_off_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_off_t.h" 3 4
typedef __darwin_off_t off_t;
# 343 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 2 3 4


int fseeko(FILE * __stream, off_t __offset, int __whence);
off_t ftello(FILE * __stream);





int snprintf(char * restrict __str, size_t __size, const char * restrict __format, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * restrict __stream, const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * restrict __str, size_t __size, const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * restrict __str, const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__scanf__, 2, 0)));

# 367 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4
# 1 "/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_ssize_t.h" 3 4
typedef __darwin_ssize_t ssize_t;
# 368 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 2 3 4


int dprintf(int, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) ;
int vdprintf(int, const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 2, 0))) ;
ssize_t getdelim(char ** restrict __linep, size_t * restrict __linecapp, int __delimiter, FILE * restrict __stream) ;
ssize_t getline(char ** restrict __linep, size_t * restrict __linecapp, FILE * restrict __stream) ;
FILE *fmemopen(void * restrict __buf, size_t __size, const char * restrict __mode) ;
FILE *open_memstream(char **__bufp, size_t *__sizep) ;

# 425 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 3 4
# 1 "/usr/include/secure/_stdio.h" 1 3 4
# 31 "/usr/include/secure/_stdio.h" 3 4
# 1 "/usr/include/secure/_common.h" 1 3 4
# 32 "/usr/include/secure/_stdio.h" 2 3 4
# 42 "/usr/include/secure/_stdio.h" 3 4
extern int __sprintf_chk (char * restrict, int, size_t,
     const char * restrict, ...);
# 52 "/usr/include/secure/_stdio.h" 3 4
extern int __snprintf_chk (char * restrict, size_t, int, size_t,
      const char * restrict, ...);







extern int __vsprintf_chk (char * restrict, int, size_t,
      const char * restrict, va_list);







extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,
       const char * restrict, va_list);
# 426 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdio.h" 2 3 4
# 3 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stddef.h" 1 3 4
# 143 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 4 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdbool.h" 1 3 4
# 5 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdarg.h" 1 3 4
# 99 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 6 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 69 "/usr/include/string.h" 3 4

void *memchr(const void *__s, int __c, size_t __n);
int memcmp(const void *__s1, const void *__s2, size_t __n);
void *memcpy(void *__dst, const void *__src, size_t __n);
void *memmove(void *__dst, const void *__src, size_t __len);
void *memset(void *__b, int __c, size_t __len);
char *strcat(char *__s1, const char *__s2);
char *strchr(const char *__s, int __c);
int strcmp(const char *__s1, const char *__s2);
int strcoll(const char *__s1, const char *__s2);
char *strcpy(char *__dst, const char *__src);
size_t strcspn(const char *__s, const char *__charset);
char *strerror(int __errnum) __asm("_" "strerror" );
size_t strlen(const char *__s);
char *strncat(char *__s1, const char *__s2, size_t __n);
int strncmp(const char *__s1, const char *__s2, size_t __n);
char *strncpy(char *__dst, const char *__src, size_t __n);
char *strpbrk(const char *__s, const char *__charset);
char *strrchr(const char *__s, int __c);
size_t strspn(const char *__s, const char *__charset);
char *strstr(const char *__big, const char *__little);
char *strtok(char *__str, const char *__sep);
size_t strxfrm(char *__s1, const char *__s2, size_t __n);

# 103 "/usr/include/string.h" 3 4

char *strtok_r(char *__str, const char *__sep, char **__lasts);

# 115 "/usr/include/string.h" 3 4

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen);
char *strdup(const char *__s1);
void *memccpy(void *__dst, const void *__src, int __c, size_t __n);

# 129 "/usr/include/string.h" 3 4

char *stpcpy(char *__dst, const char *__src);
char *stpncpy(char *__dst, const char *__src, size_t __n) ;
char *strndup(const char *__s1, size_t __n) ;
size_t strnlen(const char *__s1, size_t __n) ;
char *strsignal(int __sig);

# 190 "/usr/include/string.h" 3 4
# 1 "/usr/include/secure/_string.h" 1 3 4
# 191 "/usr/include/string.h" 2 3 4
# 7 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/float.h" 1 3 4
# 8 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/limits.h" 1 3 4
# 34 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/limits.h" 3 4
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/limits.h" 1 3 4
# 194 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 64 "/usr/include/limits.h" 3 4
# 1 "/usr/include/machine/limits.h" 1 3 4





# 1 "/usr/include/i386/limits.h" 1 3 4
# 40 "/usr/include/i386/limits.h" 3 4
# 1 "/usr/include/i386/_limits.h" 1 3 4
# 41 "/usr/include/i386/limits.h" 2 3 4
# 7 "/usr/include/machine/limits.h" 2 3 4
# 65 "/usr/include/limits.h" 2 3 4
# 1 "/usr/include/sys/syslimits.h" 1 3 4
# 66 "/usr/include/limits.h" 2 3 4
# 195 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/limits.h" 2 3 4
# 8 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/limits.h" 2 3 4
# 9 "/Users/weugene/basilisk/src/common.h" 2

# 1 "/usr/include/assert.h" 1 3 4
# 75 "/usr/include/assert.h" 3 4

void __assert_rtn(const char *, const char *, int, const char *) __attribute__((noreturn)) ;




# 11 "/Users/weugene/basilisk/src/common.h" 2

# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 1 3 4
# 48 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4

# 59 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
    typedef float float_t;
    typedef double double_t;
# 126 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern int __math_errhandling(void);
# 159 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
# 203 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinited(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinff(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfd(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanf(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnand(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormald(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitf(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitd(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union {
        long double __ld;
        struct{ unsigned long long __m; unsigned short __sexp; } __p;
    } __u;
    __u.__ld = __x;
    return (int)(__u.__p.__sexp >> 15);
}







extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435082228750796873653722224568e-38F;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= ((double)2.22507385850720138309023271733240406e-308L);
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 3.36210314311209350626267781732175260e-4932L;
}
# 337 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);
# 580 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern float __inff(void) __attribute__((deprecated));
extern double __inf(void) __attribute__((deprecated));
extern long double __infl(void) __attribute__((deprecated));

extern float __nan(void) ;
# 612 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern float __exp10f(float) ;
extern double __exp10(double) ;





extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
# 629 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern float __cospif(float) ;
extern double __cospi(double) ;
extern float __sinpif(float) ;
extern double __sinpi(double) ;
extern float __tanpif(float) ;
extern double __tanpi(double) ;
# 660 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}







extern double j0(double) ;
extern double j1(double) ;
extern double jn(int, double) ;
extern double y0(double) ;
extern double y1(double) ;
extern double yn(int, double) ;
extern double scalb(double, double);
extern int signgam;
# 791 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/math.h" 3 4

# 13 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 68 "/usr/include/time.h" 3 4
# 1 "/usr/include/sys/_types/_clock_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_clock_t.h" 3 4
typedef __darwin_clock_t clock_t;
# 69 "/usr/include/time.h" 2 3 4


# 1 "/usr/include/sys/_types/_time_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_time_t.h" 3 4
typedef __darwin_time_t time_t;
# 72 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_timespec.h" 1 3 4
# 33 "/usr/include/sys/_types/_timespec.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 73 "/usr/include/time.h" 2 3 4

struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 97 "/usr/include/time.h" 3 4
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * restrict, char * restrict);
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * restrict, struct tm * restrict);
struct tm *localtime_r(const time_t * restrict, struct tm * restrict);
# 141 "/usr/include/time.h" 3 4
int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );
# 152 "/usr/include/time.h" 3 4
typedef enum {
_CLOCK_REALTIME = 0,

_CLOCK_MONOTONIC = 6,
# 167 "/usr/include/time.h" 3 4
_CLOCK_PROCESS_CPUTIME_ID = 12,

_CLOCK_THREAD_CPUTIME_ID = 16

} clockid_t;


int clock_getres(clockid_t __clock_id, struct timespec *__res);


int clock_gettime(clockid_t __clock_id, struct timespec *__tp);








int clock_settime(clockid_t __clock_id, const struct timespec *__tp);






# 14 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/usr/include/sys/time.h" 1 3 4
# 75 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/sys/_types/_fd_def.h" 1 3 4
# 48 "/usr/include/sys/_types/_fd_def.h" 3 4

typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;



static __inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[(unsigned long)_n/(sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1)<<((unsigned long)_n % (sizeof(__int32_t) * 8)))));
}
# 76 "/usr/include/sys/time.h" 2 3 4
# 85 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_suseconds_t.h" 3 4
typedef __darwin_suseconds_t suseconds_t;
# 86 "/usr/include/sys/time.h" 2 3 4





struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};
# 110 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 111 "/usr/include/sys/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_set.h" 1 3 4
# 112 "/usr/include/sys/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 113 "/usr/include/sys/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 114 "/usr/include/sys/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 115 "/usr/include/sys/time.h" 2 3 4
# 187 "/usr/include/sys/time.h" 3 4

# 196 "/usr/include/sys/time.h" 3 4
int getitimer(int, struct itimerval *);
int gettimeofday(struct timeval * restrict, void * restrict);

# 1 "/usr/include/sys/_select.h" 1 3 4
# 39 "/usr/include/sys/_select.h" 3 4
int select(int, fd_set * restrict, fd_set * restrict,
  fd_set * restrict, struct timeval * restrict)




  __asm("_" "select" "$1050")




  ;
# 200 "/usr/include/sys/time.h" 2 3 4

int setitimer(int, const struct itimerval * restrict,
  struct itimerval * restrict);
int utimes(const char *, const struct timeval *);


# 15 "/Users/weugene/basilisk/src/common.h" 2
# 367 "/Users/weugene/basilisk/src/common.h"

# 367 "/Users/weugene/basilisk/src/common.h"
typedef struct {
  void * p;
  long max, len;
} Array;

Array * array_new()
{
  Array * a = ((Array *) malloc((1)*sizeof(Array)));
  a->p = 
# 375 "/Users/weugene/basilisk/src/common.h" 3 4
        ((void *)0)
# 375 "/Users/weugene/basilisk/src/common.h"
            ;
  a->max = a->len = 0;
  return a;
}

void array_free (Array * a)
{
  free(a->p);
  free(a);
}

void array_append (Array * a, void * elem, size_t size)
{
  if (a->len + size >= a->max) {
    a->max += ((size) > (4096) ? (size) : (4096));
    a->p = realloc(a->p,a->max);
  }
  
# 392 "/Users/weugene/basilisk/src/common.h" 3 4
 __builtin___memcpy_chk (
# 392 "/Users/weugene/basilisk/src/common.h"
 ((char *)a->p) + a->len
# 392 "/Users/weugene/basilisk/src/common.h" 3 4
 , 
# 392 "/Users/weugene/basilisk/src/common.h"
 elem, size
# 392 "/Users/weugene/basilisk/src/common.h" 3 4
 , __builtin_object_size (
# 392 "/Users/weugene/basilisk/src/common.h"
 ((char *)a->p) + a->len
# 392 "/Users/weugene/basilisk/src/common.h" 3 4
 , 0))
# 392 "/Users/weugene/basilisk/src/common.h"
                                             ;
  a->len += size;
}

void * array_shrink (Array * a)
{
  void * p = realloc(a->p,a->len);
  free(a);
  return p;
}
# 794 "/Users/weugene/basilisk/src/common.h"
void init_solver()
{
# 806 "/Users/weugene/basilisk/src/common.h"
}
# 815 "/Users/weugene/basilisk/src/common.h"
double _val_higher_dimension = 0.;
# 815 "/Users/weugene/basilisk/src/common.h"

double undefined;

# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdint.h" 1 3 4
# 9 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdint.h" 3 4
# 1 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 1 3 4
# 32 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 3 4
# 1 "/usr/include/_types/_uint8_t.h" 1 3 4
# 31 "/usr/include/_types/_uint8_t.h" 3 4

# 31 "/usr/include/_types/_uint8_t.h" 3 4
typedef unsigned char uint8_t;
# 33 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint16_t.h" 1 3 4
# 31 "/usr/include/_types/_uint16_t.h" 3 4
typedef unsigned short uint16_t;
# 34 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint32_t.h" 1 3 4
# 31 "/usr/include/_types/_uint32_t.h" 3 4
typedef unsigned int uint32_t;
# 35 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint64_t.h" 1 3 4
# 31 "/usr/include/_types/_uint64_t.h" 3 4
typedef unsigned long long uint64_t;
# 36 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 2 3 4


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 67 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 3 4
# 1 "/usr/include/_types/_intmax_t.h" 1 3 4
# 32 "/usr/include/_types/_intmax_t.h" 3 4
typedef long int intmax_t;
# 68 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uintmax_t.h" 1 3 4
# 32 "/usr/include/_types/_uintmax_t.h" 3 4
typedef long unsigned int uintmax_t;
# 69 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include-fixed/stdint.h" 2 3 4
# 10 "/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9/gcc/x86_64-apple-darwin17/9.2.0/include/stdint.h" 2 3 4
# 819 "/Users/weugene/basilisk/src/common.h" 2
# 1 "/Users/weugene/basilisk/src/fp_osx.h" 1
# 84 "/Users/weugene/basilisk/src/fp_osx.h"
# 1 "/usr/include/fenv.h" 1 3 4
# 193 "/usr/include/fenv.h" 3 4
typedef struct {
    unsigned short __control;
    unsigned short __status;
    unsigned int __mxcsr;
    char __reserved[8];
} fenv_t;

typedef unsigned short fexcept_t;
# 220 "/usr/include/fenv.h" 3 4
extern const fenv_t _FE_DFL_ENV;
# 244 "/usr/include/fenv.h" 3 4
extern const fenv_t _FE_DFL_DISABLE_SSE_DENORMS_ENV;
# 297 "/usr/include/fenv.h" 3 4
extern int feclearexcept(int );
extern int fegetexceptflag(fexcept_t * , int );
extern int feraiseexcept(int );
extern int fesetexceptflag(const fexcept_t * , int );
extern int fetestexcept(int );
# 318 "/usr/include/fenv.h" 3 4
extern int fegetround(void);
extern int fesetround(int );
# 351 "/usr/include/fenv.h" 3 4
extern int fegetenv(fenv_t * );
extern int feholdexcept(fenv_t * );
extern int fesetenv(const fenv_t * );
extern int feupdateenv(const fenv_t * );
# 85 "/Users/weugene/basilisk/src/fp_osx.h" 2
# 159 "/Users/weugene/basilisk/src/fp_osx.h"

# 159 "/Users/weugene/basilisk/src/fp_osx.h"
int
fegetexcept (void)
{
  static fenv_t fenv;

  return fegetenv (&fenv) ? -1 : (fenv.__control & 
# 164 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                                  0x003f
# 164 "/Users/weugene/basilisk/src/fp_osx.h"
                                                               );
}

int
feenableexcept (unsigned int excepts)
{
  static fenv_t fenv;
  unsigned int new_excepts = excepts & 
# 171 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                      0x003f
# 171 "/Users/weugene/basilisk/src/fp_osx.h"
                                                   ,
               old_excepts;

  if ( fegetenv (&fenv) ) return -1;
  old_excepts = fenv.__control & 
# 175 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                0x003f
# 175 "/Users/weugene/basilisk/src/fp_osx.h"
                                             ;


  fenv.__control &= ~new_excepts;
  fenv.__mxcsr &= ~(new_excepts << 7);

  return ( fesetenv (&fenv) ? -1 : old_excepts );
}

int
fedisableexcept (unsigned int excepts)
{
  static fenv_t fenv;
  unsigned int new_excepts = excepts & 
# 188 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                      0x003f
# 188 "/Users/weugene/basilisk/src/fp_osx.h"
                                                   ,
               old_excepts;

  if ( fegetenv (&fenv) ) return -1;
  old_excepts = fenv.__control & 
# 192 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                0x003f
# 192 "/Users/weugene/basilisk/src/fp_osx.h"
                                             ;


  fenv.__control |= new_excepts;
  fenv.__mxcsr |= new_excepts << 7;

  return ( fesetenv (&fenv) ? -1 : old_excepts );
}
# 232 "/Users/weugene/basilisk/src/fp_osx.h"
# 1 "/usr/include/signal.h" 1 3 4
# 66 "/usr/include/signal.h" 3 4
# 1 "/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_t.h" 3 4

# 31 "/usr/include/sys/_pthread/_pthread_t.h" 3 4
typedef __darwin_pthread_t pthread_t;
# 67 "/usr/include/signal.h" 2 3 4







int raise(int);




void (* bsd_signal(int, void (* )(int)))(int);
int kill(pid_t, int) __asm("_" "kill" );
int killpg(pid_t, int) __asm("_" "killpg" );
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
int sigaction(int, const struct sigaction * restrict,
     struct sigaction * restrict);
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * restrict, stack_t * restrict) __asm("_" "sigaltstack" ) ;
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int) __asm("_" "sigpause" );
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * restrict, sigset_t * restrict);
int sigrelse(int);
void (* sigset(int, void (* )(int)))(int);
int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" );
int sigwait(const sigset_t * restrict, int * restrict) __asm("_" "sigwait" );











extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int
__sigbits(int __signo)
{
    return __signo > 32 ? 0 : (1 << (__signo - 1));
}
# 233 "/Users/weugene/basilisk/src/fp_osx.h" 2




# 236 "/Users/weugene/basilisk/src/fp_osx.h"
static const char *fe_code_name[] = {
  "FPE_NOOP",
  "FPE_FLTDIV", "FPE_FLTINV", "FPE_FLTOVF", "FPE_FLTUND",
  "FPE_FLTRES", "FPE_FLTSUB", "FPE_INTDIV", "FPE_INTOVF"
  "FPE_UNKNOWN"
};
# 257 "/Users/weugene/basilisk/src/fp_osx.h"
void
fhdl ( int sig, siginfo_t *sip, ucontext_t *scp )
{
  int fe_code = sip->si_code;
  unsigned int excepts = fetestexcept (
# 261 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                      0x003f
# 261 "/Users/weugene/basilisk/src/fp_osx.h"
                                                   );

  switch (fe_code)
  {



    case 
# 268 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        1
# 268 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 1; break;
    case 
# 269 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        5
# 269 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 2; break;
    case 
# 270 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        2
# 270 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 3; break;
    case 
# 271 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        3
# 271 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 4; break;
    case 
# 272 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        4
# 272 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 5; break;
    case 
# 273 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        6
# 273 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 6; break;
    case 
# 274 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        7
# 274 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 7; break;
    case 
# 275 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
        8
# 275 "/Users/weugene/basilisk/src/fp_osx.h"
                  : fe_code = 8; break;
            default: fe_code = 9;
   }

  if ( sig == 
# 279 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
             8 
# 279 "/Users/weugene/basilisk/src/fp_osx.h"
                    )
  {

    unsigned short x87cr,x87sr;
    unsigned int mxcsr;

    __asm ("fnstcw %0" : "=m" (x87cr));;
    __asm ("fnstsw %0" : "=m" (x87sr));;
    __asm ("stmxcsr %0" : "=m" (mxcsr));;
    printf ("X87CR:   0x%04X\n", x87cr);
    printf ("X87SR:   0x%04X\n", x87sr);
    printf ("MXCSR:   0x%08X\n", mxcsr);
# 300 "/Users/weugene/basilisk/src/fp_osx.h"
    printf ("signal:  SIGFPE with code %s\n", fe_code_name[fe_code]);
    printf ("invalid flag:    0x%04X\n", excepts & 
# 301 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                                  0x0001
# 301 "/Users/weugene/basilisk/src/fp_osx.h"
                                                            );
    printf ("divByZero flag:  0x%04X\n", excepts & 
# 302 "/Users/weugene/basilisk/src/fp_osx.h" 3 4
                                                  0x0004
# 302 "/Users/weugene/basilisk/src/fp_osx.h"
                                                              );
  }
  else printf ("Signal is not SIGFPE, it's %i.\n", sig);

  abort();
}
# 820 "/Users/weugene/basilisk/src/common.h" 2



static void set_fpe (void) {
  int64_t lnan = 0x7ff0000000000001;
  
# 825 "/Users/weugene/basilisk/src/common.h" 3 4
 (__builtin_expect(!(
# 825 "/Users/weugene/basilisk/src/common.h"
 sizeof (int64_t) == sizeof (double)
# 825 "/Users/weugene/basilisk/src/common.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/common.h", 825, 
# 825 "/Users/weugene/basilisk/src/common.h"
 "sizeof (int64_t) == sizeof (double)"
# 825 "/Users/weugene/basilisk/src/common.h" 3 4
 ) : (void)0)
# 825 "/Users/weugene/basilisk/src/common.h"
                                             ;
  
# 826 "/Users/weugene/basilisk/src/common.h" 3 4
 __builtin___memcpy_chk (
# 826 "/Users/weugene/basilisk/src/common.h"
 &undefined
# 826 "/Users/weugene/basilisk/src/common.h" 3 4
 , 
# 826 "/Users/weugene/basilisk/src/common.h"
 &lnan, sizeof (double)
# 826 "/Users/weugene/basilisk/src/common.h" 3 4
 , __builtin_object_size (
# 826 "/Users/weugene/basilisk/src/common.h"
 &undefined
# 826 "/Users/weugene/basilisk/src/common.h" 3 4
 , 0))
# 826 "/Users/weugene/basilisk/src/common.h"
                                            ;
  feenableexcept (
# 827 "/Users/weugene/basilisk/src/common.h" 3 4
 0x0004
# 827 "/Users/weugene/basilisk/src/common.h"
 |
# 827 "/Users/weugene/basilisk/src/common.h" 3 4
 0x0001
# 827 "/Users/weugene/basilisk/src/common.h"
 );
}
# 837 "/Users/weugene/basilisk/src/common.h"
typedef struct {
  long n;
  long tn;
  int depth;
  int maxdepth;
} Grid;
Grid * grid = 
# 843 "/Users/weugene/basilisk/src/common.h" 3 4
             ((void *)0)
# 843 "/Users/weugene/basilisk/src/common.h"
                 ;

double X0 = 0., Y0 = 0., Z0 = 0.;

double L0 = 1.;


int N = 64;




typedef struct { int i; } scalar;

typedef struct {
  scalar x;

  scalar y;




} vector;

typedef struct {
  vector x;

  vector y;




} tensor;

struct { int x, y, z; } Period = {
# 877 "/Users/weugene/basilisk/src/common.h" 3 4
                                 0
# 877 "/Users/weugene/basilisk/src/common.h"
                                      , 
# 877 "/Users/weugene/basilisk/src/common.h" 3 4
                                        0
# 877 "/Users/weugene/basilisk/src/common.h"
                                             , 
# 877 "/Users/weugene/basilisk/src/common.h" 3 4
                                               0
# 877 "/Users/weugene/basilisk/src/common.h"
                                                    };

typedef struct {
  double x, y, z;
} coord;
# 894 "/Users/weugene/basilisk/src/common.h"
void normalize (coord * n)
{
  double norm = 0.;
  {
# 897 "/Users/weugene/basilisk/src/common.h"

    norm += ((n->x)*(n->x));
# 897 "/Users/weugene/basilisk/src/common.h"

    norm += ((n->y)*(n->y));}
  norm = sqrt(norm);
  {
# 900 "/Users/weugene/basilisk/src/common.h"

    n->x /= norm;
# 900 "/Users/weugene/basilisk/src/common.h"

    n->y /= norm;}
}

struct _origin { double x, y, z; };

void origin (struct _origin p) {
  X0 = p.x; Y0 = p.y; Z0 = p.z;
}

void size (double L) {
  L0 = L;
}

double zero (double s0, double s1, double s2) { return 0.; }






  enum { right, left, top, bottom };



int nboundary = 2*2;
# 934 "/Users/weugene/basilisk/src/common.h"
double * _constant = 
# 934 "/Users/weugene/basilisk/src/common.h" 3 4
                    ((void *)0)
# 934 "/Users/weugene/basilisk/src/common.h"
                        ;
extern size_t datasize;
typedef struct _Point Point;
# 1 "/Users/weugene/basilisk/src/grid/boundaries.h"


typedef struct _Boundary Boundary;

struct _Boundary {
  void (* destroy) (Boundary * b);
  void (* level) (const Boundary * b, scalar * list, int l);

  void (* restriction) (const Boundary * b, scalar * list, int l);
};

static Boundary ** boundaries = 
# 12 "/Users/weugene/basilisk/src/grid/boundaries.h" 3 4
                               ((void *)0)
# 12 "/Users/weugene/basilisk/src/grid/boundaries.h"
                                   ;

void add_boundary (Boundary * b) {
  int len = 0;
  if (boundaries) {
    Boundary ** i = boundaries;
    while (*i++) len++;
  }
  boundaries = (Boundary * *) realloc(boundaries,(len + 2)*sizeof(Boundary *));
  boundaries[len] = b;
  boundaries[len+1] = 
# 22 "/Users/weugene/basilisk/src/grid/boundaries.h" 3 4
                     ((void *)0)
# 22 "/Users/weugene/basilisk/src/grid/boundaries.h"
                         ;
}

void free_boundaries() {
  if (!boundaries)
    return;
  Boundary ** i = boundaries, * b;
  while ((b = *i++))
    if (b->destroy)
      b->destroy (b);
    else
      free(b);
  free(boundaries);
  boundaries = 
# 35 "/Users/weugene/basilisk/src/grid/boundaries.h" 3 4
              ((void *)0)
# 35 "/Users/weugene/basilisk/src/grid/boundaries.h"
                  ;
}
# 47 "/Users/weugene/basilisk/src/grid/boundaries.h"
typedef struct {
  Boundary parent;
  int d;
} BoxBoundary;
# 939 "/Users/weugene/basilisk/src/common.h"



typedef struct {
# 944 "/Users/weugene/basilisk/src/common.h"

  double (** boundary) (Point, Point, scalar, void *);
  double (** boundary_homogeneous) (Point, Point, scalar, void *);
  double (* gradient) (double, double, double);
  void (* delete) (scalar);
  char * name;
  struct {
    int x;

    int y;




  } d;
  vector v;
  
# 960 "/Users/weugene/basilisk/src/common.h" 3 4
 _Bool 
# 960 "/Users/weugene/basilisk/src/common.h"
      face, nodump;
# 17 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  void (* prolongation) (Point, scalar);
  void (* restriction) (Point, scalar);
# 8 "/Users/weugene/basilisk/src/grid/tree-common.h"

  void (* refine) (Point, scalar);
# 94 "/Users/weugene/basilisk/src/grid/tree-common.h"

  void (* coarsen) (Point, scalar);

} _Attributes;
_Attributes * _attribute;
# 942 "/Users/weugene/basilisk/src/common.h"
# 965 "/Users/weugene/basilisk/src/common.h"
int list_len (scalar * list)
{
  if (!list) return 0;
  int ns = 0;
  if (list) for (scalar s = *list, *_i0 = list; ((scalar *)&s)->i >= 0; s = *++_i0) ns++;
  return ns;
}

scalar * list_append (scalar * list, scalar s)
{
  int len = list_len (list);
  list = (scalar *) realloc(list,(len + 2)*sizeof(scalar));
  list[len] = s;
  list[len + 1].i = -1;
  return list;
}

scalar * list_prepend (scalar * list, scalar s)
{
  int len = list_len (list);
  list = (scalar *) realloc(list,(len + 2)*sizeof(scalar));
  for (int i = len; i >= 1; i--)
    list[i] = list[i-1];
  list[0] = s;
  list[len + 1].i = -1;
  return list;
}

scalar * list_add (scalar * list, scalar s)
{
  if (list) for (scalar t = *list, *_i1 = list; ((scalar *)&t)->i >= 0; t = *++_i1)
    if (t.i == s.i)
      return list;
  return list_append (list, s);
}

int list_lookup (scalar * l, scalar s)
{
  if (l != 
# 1003 "/Users/weugene/basilisk/src/common.h" 3 4
          ((void *)0)
# 1003 "/Users/weugene/basilisk/src/common.h"
              )
    if (l) for (scalar s1 = *l, *_i2 = l; ((scalar *)&s1)->i >= 0; s1 = *++_i2)
      if (s1.i == s.i)
 return 
# 1006 "/Users/weugene/basilisk/src/common.h" 3 4
       1
# 1006 "/Users/weugene/basilisk/src/common.h"
           ;
  return 
# 1007 "/Users/weugene/basilisk/src/common.h" 3 4
        0
# 1007 "/Users/weugene/basilisk/src/common.h"
             ;
}

scalar * list_copy (scalar * l)
{
  scalar * list = 
# 1012 "/Users/weugene/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1012 "/Users/weugene/basilisk/src/common.h"
                     ;
  if (l != 
# 1013 "/Users/weugene/basilisk/src/common.h" 3 4
          ((void *)0)
# 1013 "/Users/weugene/basilisk/src/common.h"
              )
    if (l) for (scalar s = *l, *_i3 = l; ((scalar *)&s)->i >= 0; s = *++_i3)
      list = list_append (list, s);
  return list;
}

scalar * list_concat (scalar * l1, scalar * l2)
{
  scalar * l3 = list_copy (l1);
  if (l2) for (scalar s = *l2, *_i4 = l2; ((scalar *)&s)->i >= 0; s = *++_i4)
    l3 = list_append (l3, s);
  return l3;
}

void list_print (scalar * l, FILE * fp)
{
  int i = 0;
  if (l) for (scalar s = *l, *_i5 = l; ((scalar *)&s)->i >= 0; s = *++_i5)
    fprintf (fp, "%s%s", i++ == 0 ? "{" : ",", _attribute[s.i].name);
  fputs (i > 0 ? "}\n" : "{}\n", fp);
}

int vectors_len (vector * list)
{
  if (!list) return 0;
  int nv = 0;
  if (list) for (vector v = *list, *_i6 = list; ((scalar *)&v)->i >= 0; v = *++_i6) nv++;
  return nv;
}

vector * vectors_append (vector * list, vector v)
{
  int len = vectors_len (list);
  list = (vector *) realloc(list,(len + 2)*sizeof(vector));
  list[len] = v;
  list[len + 1] = (vector){{-1}};
  return list;
}

vector * vectors_add (vector * list, vector v)
{
  if (list) for (vector w = *list, *_i7 = list; ((scalar *)&w)->i >= 0; w = *++_i7) {
    
# 1055 "/Users/weugene/basilisk/src/common.h" 3 4
   _Bool 
# 1055 "/Users/weugene/basilisk/src/common.h"
        id = 
# 1055 "/Users/weugene/basilisk/src/common.h" 3 4
             1
# 1055 "/Users/weugene/basilisk/src/common.h"
                 ;
    {
# 1056 "/Users/weugene/basilisk/src/common.h"

      if (w.x.i != v.x.i)
 id = 
# 1058 "/Users/weugene/basilisk/src/common.h" 3 4
     0
# 1058 "/Users/weugene/basilisk/src/common.h"
          ;
# 1056 "/Users/weugene/basilisk/src/common.h"

      if (w.y.i != v.y.i)
 id = 
# 1058 "/Users/weugene/basilisk/src/common.h" 3 4
     0
# 1058 "/Users/weugene/basilisk/src/common.h"
          ;}
    if (id)
      return list;
  }
  return vectors_append (list, v);
}

vector * vectors_copy (vector * l)
{
  vector * list = 
# 1067 "/Users/weugene/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1067 "/Users/weugene/basilisk/src/common.h"
                     ;
  if (l != 
# 1068 "/Users/weugene/basilisk/src/common.h" 3 4
          ((void *)0)
# 1068 "/Users/weugene/basilisk/src/common.h"
              )
    if (l) for (vector v = *l, *_i8 = l; ((scalar *)&v)->i >= 0; v = *++_i8)
      list = vectors_append (list, v);
  return list;
}

vector * vectors_from_scalars (scalar * s)
{
  vector * list = 
# 1076 "/Users/weugene/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1076 "/Users/weugene/basilisk/src/common.h"
                     ;
  while (s->i >= 0) {
    vector v;
    {
# 1079 "/Users/weugene/basilisk/src/common.h"
 {
      
# 1080 "/Users/weugene/basilisk/src/common.h" 3 4
     (__builtin_expect(!(
# 1080 "/Users/weugene/basilisk/src/common.h"
     s->i >= 0
# 1080 "/Users/weugene/basilisk/src/common.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/common.h", 1080, 
# 1080 "/Users/weugene/basilisk/src/common.h"
     "s->i >= 0"
# 1080 "/Users/weugene/basilisk/src/common.h" 3 4
     ) : (void)0)
# 1080 "/Users/weugene/basilisk/src/common.h"
                       ;
      v.x = *s++;
    }
# 1079 "/Users/weugene/basilisk/src/common.h"
 {
      
# 1080 "/Users/weugene/basilisk/src/common.h" 3 4
     (__builtin_expect(!(
# 1080 "/Users/weugene/basilisk/src/common.h"
     s->i >= 0
# 1080 "/Users/weugene/basilisk/src/common.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/common.h", 1080, 
# 1080 "/Users/weugene/basilisk/src/common.h"
     "s->i >= 0"
# 1080 "/Users/weugene/basilisk/src/common.h" 3 4
     ) : (void)0)
# 1080 "/Users/weugene/basilisk/src/common.h"
                       ;
      v.y = *s++;
    }}
    list = vectors_append (list, v);
  }
  return list;
}

int tensors_len (tensor * list)
{
  if (!list) return 0;
  int nt = 0;
  if (list) for (tensor t = *list, *_i9 = list; ((scalar *)&t)->i >= 0; t = *++_i9) nt++;
  return nt;
}

tensor * tensors_append (tensor * list, tensor t)
{
  int len = tensors_len (list);
  list = (tensor *) realloc(list,(len + 2)*sizeof(tensor));
  list[len] = t;
  list[len + 1] = (tensor){{{-1}}};
  return list;
}

tensor * tensors_from_vectors (vector * v)
{
  tensor * list = 
# 1107 "/Users/weugene/basilisk/src/common.h" 3 4
                 ((void *)0)
# 1107 "/Users/weugene/basilisk/src/common.h"
                     ;
  while (v->x.i >= 0) {
    tensor t;
    {
# 1110 "/Users/weugene/basilisk/src/common.h"
 {
      
# 1111 "/Users/weugene/basilisk/src/common.h" 3 4
     (__builtin_expect(!(
# 1111 "/Users/weugene/basilisk/src/common.h"
     v->x.i >= 0
# 1111 "/Users/weugene/basilisk/src/common.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/common.h", 1111, 
# 1111 "/Users/weugene/basilisk/src/common.h"
     "v->x.i >= 0"
# 1111 "/Users/weugene/basilisk/src/common.h" 3 4
     ) : (void)0)
# 1111 "/Users/weugene/basilisk/src/common.h"
                         ;
      t.x = *v++;
    }
# 1110 "/Users/weugene/basilisk/src/common.h"
 {
      
# 1111 "/Users/weugene/basilisk/src/common.h" 3 4
     (__builtin_expect(!(
# 1111 "/Users/weugene/basilisk/src/common.h"
     v->y.i >= 0
# 1111 "/Users/weugene/basilisk/src/common.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/common.h", 1111, 
# 1111 "/Users/weugene/basilisk/src/common.h"
     "v->y.i >= 0"
# 1111 "/Users/weugene/basilisk/src/common.h" 3 4
     ) : (void)0)
# 1111 "/Users/weugene/basilisk/src/common.h"
                         ;
      t.y = *v++;
    }}
    list = tensors_append (list, t);
  }
  return list;
}

scalar * all = 
# 1119 "/Users/weugene/basilisk/src/common.h" 3 4
              ((void *)0)
# 1119 "/Users/weugene/basilisk/src/common.h"
                  ;



scalar (* init_scalar) (scalar, const char *);
scalar (* init_vertex_scalar) (scalar, const char *);
vector (* init_vector) (vector, const char *);
tensor (* init_tensor) (tensor, const char *);
vector (* init_face_vector) (vector, const char *);





typedef struct _Event Event;
typedef int (* Expr) (int *, double *, Event *);

struct _Event {
  int last, nexpr;
  int (* action) (const int, const double, Event *);
  Expr expr[3];
  int * arrayi;
  double * arrayt;
  char * file;
  int line;
  char * name;
  double t;
  int i, a;
  void * data;
  Event * next;
};

static Event * Events = 
# 1151 "/Users/weugene/basilisk/src/common.h" 3 4
                       ((void *)0)
# 1151 "/Users/weugene/basilisk/src/common.h"
                           ;

int iter = 0, inext = 0;
double t = 0, tnext = 0;
void init_events (void);
void event_register (Event event);
void _init_solver (void);







typedef struct {
  clock_t c;
  struct timeval tv;
  double tm;
} timer;

timer timer_start (void)
{
  timer t;
  t.c = clock();
  gettimeofday (&t.tv, 
# 1175 "/Users/weugene/basilisk/src/common.h" 3 4
                      ((void *)0)
# 1175 "/Users/weugene/basilisk/src/common.h"
                          );



  return t;
}

double timer_elapsed (timer t)
{
  struct timeval tvend;
  gettimeofday (&tvend, 
# 1185 "/Users/weugene/basilisk/src/common.h" 3 4
                       ((void *)0)
# 1185 "/Users/weugene/basilisk/src/common.h"
                           );
  return ((tvend.tv_sec - t.tv.tv_sec) +
   (tvend.tv_usec - t.tv.tv_usec)/1e6);
}


vector zerof= {{65536 + 0},{65536 + 1}};
vector unityf= {{65536 + 2},{65536 + 3}};
scalar unity= {65536 + 4};
scalar zeroc= {65536 + 5};



 vector fm = {{65536 + 2},{65536 + 3}};
 scalar cm = {(65536 + 4)};
# 1213 "/Users/weugene/basilisk/src/common.h"
static FILE ** qpopen_pipes = 
# 1213 "/Users/weugene/basilisk/src/common.h" 3 4
                             ((void *)0)
# 1213 "/Users/weugene/basilisk/src/common.h"
                                 ;

FILE * qpopen (const char * command, const char * type)
{
  if (0 > 0)
    return fopen ("/dev/null", type);
  FILE * fp = popen (command, type);
  if (fp) {
    FILE ** i = qpopen_pipes;
    int n = 0;
    while (i && *i) { n++; i++; }
    qpopen_pipes = (FILE * *) realloc(qpopen_pipes,(n + 2)*sizeof(FILE *));
    qpopen_pipes[n] = fp;
    qpopen_pipes[n+1] = 
# 1226 "/Users/weugene/basilisk/src/common.h" 3 4
                       ((void *)0)
# 1226 "/Users/weugene/basilisk/src/common.h"
                           ;
  }
  return fp;
}

int qpclose (FILE * fp)
{
  if (0 > 0)
    return fclose (fp);
  FILE ** i = qpopen_pipes;
  while (i && *i) {
    if (*i == fp)
      *i = (FILE *) 1;
    i++;
  }
  return pclose (fp);
}

static void qpclose_all()
{
  FILE ** i = qpopen_pipes;
  while (i && *i) {
    if (*i != (FILE *) 1)
      pclose (*i);
    i++;
  }
  free(qpopen_pipes);
  qpopen_pipes = 
# 1253 "/Users/weugene/basilisk/src/common.h" 3 4
                ((void *)0)
# 1253 "/Users/weugene/basilisk/src/common.h"
                    ;
}






FILE * lfopen (const char * name, const char * mode)
{
  char fname[80];
  
# 1264 "/Users/weugene/basilisk/src/common.h" 3 4
 __builtin___sprintf_chk (
# 1264 "/Users/weugene/basilisk/src/common.h"
 fname
# 1264 "/Users/weugene/basilisk/src/common.h" 3 4
 , 0, __builtin_object_size (
# 1264 "/Users/weugene/basilisk/src/common.h"
 fname
# 1264 "/Users/weugene/basilisk/src/common.h" 3 4
 , 2 > 1 ? 1 : 0), 
# 1264 "/Users/weugene/basilisk/src/common.h"
 "%s-%d", name, 0
# 1264 "/Users/weugene/basilisk/src/common.h" 3 4
 )
# 1264 "/Users/weugene/basilisk/src/common.h"
                                      ;
  return fopen (fname, mode);
}



void * matrix_new (int n, int p, size_t size)
{
  void ** m = ((void * *) malloc((n)*sizeof(void *)));
  char * a = ((char *) malloc((n*p*size)*sizeof(char)));
  for (int i = 0; i < n; i++)
    m[i] = a + i*p*size;
  return m;
}

double matrix_inverse (double ** m, int n, double pivmin)
{
  int indxc[n], indxr[n], ipiv[n];
  int i, icol = 0, irow = 0, j, k, l, ll;
  double big, dum, pivinv, minpiv = ((double)1e30);

  for (j = 0; j < n; j++)
    ipiv[j] = -1;

  for (i = 0; i < n; i++) {
    big = 0.0;
    for (j = 0; j < n; j++)
      if (ipiv[j] != 0)
 for (k = 0; k < n; k++) {
   if (ipiv[k] == -1) {
     if (fabs (m[j][k]) >= big) {
       big = fabs (m[j][k]);
       irow = j;
       icol = k;
     }
   }
 }
    ipiv[icol]++;
    if (irow != icol)
      for (l = 0; l < n; l++)
 { double tmp = m[irow][l]; m[irow][l] = m[icol][l]; m[icol][l] = tmp; };
    indxr[i] = irow;
    indxc[i] = icol;
    if (fabs (m[icol][icol]) <= pivmin)
      return 0.;
    if (fabs (m[icol][icol]) < minpiv)
      minpiv = fabs (m[icol][icol]);
    pivinv = 1.0/m[icol][icol];
    m[icol][icol] = 1.0;
    for (l = 0; l < n; l++) m[icol][l] *= pivinv;
    for (ll = 0; ll < n; ll++)
      if (ll != icol) {
 dum = m[ll][icol];
 m[ll][icol] = 0.0;
 for (l = 0; l < n; l++)
   m[ll][l] -= m[icol][l]*dum;
      }
  }
  for (l = n - 1; l >= 0; l--) {
    if (indxr[l] != indxc[l])
      for (k = 0; k < n; k++)
 { double tmp = m[k][indxr[l]]; m[k][indxr[l]] = m[k][indxc[l]]; m[k][indxc[l]] = tmp; };
  }
  return minpiv;
}

void matrix_free (void * m)
{
  free(((void **) m)[0]);
  free(m);
}
# 13 "foreach_dimension_in_foreach_dimension-cpp.c"
# 1 "grid/quadtree.h"
# 1 "/Users/weugene/basilisk/src/grid/quadtree.h"
# 1 "grid/tree.h"
# 1 "/Users/weugene/basilisk/src/grid/tree.h"
# 1 "grid/mempool.h"
# 1 "/Users/weugene/basilisk/src/grid/mempool.h"





typedef struct _Pool Pool;

struct _Pool {
  Pool * next;
};

typedef struct {
  char * first, * lastb;
  size_t size;
  size_t poolsize;
  Pool * pool, * last;
} Mempool;

typedef struct {
  char * next;
} FreeBlock;

Mempool * mempool_new (size_t poolsize, size_t size)
{

  
# 26 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 (__builtin_expect(!(
# 26 "/Users/weugene/basilisk/src/grid/mempool.h"
 poolsize % 8 == 0
# 26 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/mempool.h", 26, 
# 26 "/Users/weugene/basilisk/src/grid/mempool.h"
 "poolsize % 8 == 0"
# 26 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 ) : (void)0)
# 26 "/Users/weugene/basilisk/src/grid/mempool.h"
                           ;
  
# 27 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 (__builtin_expect(!(
# 27 "/Users/weugene/basilisk/src/grid/mempool.h"
 size >= sizeof(FreeBlock)
# 27 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/mempool.h", 27, 
# 27 "/Users/weugene/basilisk/src/grid/mempool.h"
 "size >= sizeof(FreeBlock)"
# 27 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 ) : (void)0)
# 27 "/Users/weugene/basilisk/src/grid/mempool.h"
                                   ;


  poolsize = ((1 << 20) < (poolsize + sizeof(Pool)) ? (1 << 20) : (poolsize + sizeof(Pool)));
  Mempool * m = ((Mempool *) calloc(1,sizeof(Mempool)));
  m->poolsize = poolsize;
  m->size = size;
  return m;
}

void mempool_destroy (Mempool * m)
{
  Pool * p = m->pool;
  while (p) {
    Pool * next = p->next;
    free(p);
    p = next;
  }
  free(m);
}

void * mempool_alloc (Mempool * m)
{
  if (!m->first) {

    Pool * p = (Pool *) malloc(m->poolsize);
    p->next = 
# 53 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
             ((void *)0)
# 53 "/Users/weugene/basilisk/src/grid/mempool.h"
                 ;
    if (m->last)
      m->last->next = p;
    else
      m->pool = p;
    m->last = p;
    m->first = m->lastb = ((char *)m->last) + sizeof(Pool);
    FreeBlock * b = (FreeBlock *) m->first;
    b->next = 
# 61 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
             ((void *)0)
# 61 "/Users/weugene/basilisk/src/grid/mempool.h"
                 ;
  }
  void * ret = m->first;
  FreeBlock * b = (FreeBlock *) ret;
  char * next = b->next;
  if (!next) {
    m->lastb += m->size;
    next = m->lastb;
    if (next + m->size > ((char *) m->last) + m->poolsize)
      next = 
# 70 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
            ((void *)0)
# 70 "/Users/weugene/basilisk/src/grid/mempool.h"
                ;
    else {
      FreeBlock * b = (FreeBlock *) next;
      b->next = 
# 73 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
               ((void *)0)
# 73 "/Users/weugene/basilisk/src/grid/mempool.h"
                   ;
    }
  }
  m->first = next;





  return ret;
}

void * mempool_alloc0 (Mempool * m)
{
  void * ret = mempool_alloc (m);
  
# 88 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 __builtin___memset_chk (
# 88 "/Users/weugene/basilisk/src/grid/mempool.h"
 ret
# 88 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 , 
# 88 "/Users/weugene/basilisk/src/grid/mempool.h"
 0, m->size
# 88 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 , __builtin_object_size (
# 88 "/Users/weugene/basilisk/src/grid/mempool.h"
 ret
# 88 "/Users/weugene/basilisk/src/grid/mempool.h" 3 4
 , 0))
# 88 "/Users/weugene/basilisk/src/grid/mempool.h"
                         ;
  return ret;
}

void mempool_free (Mempool * m, void * p)
{





  FreeBlock * b = (FreeBlock *) p;
  b->next = m->first;
  m->first = (char *) p;
}
# 2 "/Users/weugene/basilisk/src/grid/tree.h"
# 10 "/Users/weugene/basilisk/src/grid/tree.h"
# 22 "/Users/weugene/basilisk/src/grid/tree.h"
typedef struct {
  unsigned short flags;

  unsigned short neighbors;
  int pid;
} Cell;

enum {
  active = 1 << 0,
  leaf = 1 << 1,
  border = 1 << 2,
  vertex = 1 << 3,
  user = 4,

  face_x = 1 << 0

  , face_y = 1 << 1




};
# 54 "/Users/weugene/basilisk/src/grid/tree.h"
typedef struct {
  int i;

  int j;




} IndexLevel;

typedef struct {
  IndexLevel * p;
  int n, nm;
} CacheLevel;

typedef struct {
  int i;

  int j;




  int level, flags;
} Index;

typedef struct {
  Index * p;
  int n, nm;
} Cache;




static char * new_refarray (size_t len, size_t size) {
  return (char *) calloc(len + 1,size);
}

static void refarray (void * p, size_t len, size_t size) {
  int * refcount = (int *)(((char *)p) + len*size);
  (*refcount)++;
}

static 
# 97 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 97 "/Users/weugene/basilisk/src/grid/tree.h"
           unrefarray (void * p, size_t len, size_t size) {
  int * refcount = (int *)(((char *)p) + len*size);
  (*refcount)--;
  if (*refcount == 0) {
    free(p);
    return 
# 102 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
          1
# 102 "/Users/weugene/basilisk/src/grid/tree.h"
              ;
  }
  return 
# 104 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
        0
# 104 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
}




typedef struct {



  char *** m;



  Mempool * pool;
  int nc;
  int len;
} Layer;

static size_t _size (size_t depth)
{
  return (1 << depth) + 2*2;
}

static size_t poolsize (size_t depth, size_t size)
{




  return ((_size(depth))*(_size(depth)))*size;



}
# 140 "/Users/weugene/basilisk/src/grid/tree.h"

static inline
void assign_periodic_x (void ** m, int i, int nl, void * b)
{
  m[i] = b;
  if (Period.x) {
    for (int j = i; j < nl + 2*2; j += nl)
      m[j] = b;
    for (int j = i - nl; j >= 0; j -= nl)
      m[j] = b;
  }
}
# 140 "/Users/weugene/basilisk/src/grid/tree.h"

static inline
void assign_periodic_y (void ** m, int i, int nl, void * b)
{
  m[i] = b;
  if (Period.y) {
    for (int j = i; j < nl + 2*2; j += nl)
      m[j] = b;
    for (int j = i - nl; j >= 0; j -= nl)
      m[j] = b;
  }
}

static Layer * new_layer (int depth)
{
  Layer * l = ((Layer *) malloc((1)*sizeof(Layer)));
  l->len = _size (depth);
  if (depth == 0)
    l->pool = 
# 158 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
             ((void *)0)
# 158 "/Users/weugene/basilisk/src/grid/tree.h"
                 ;
  else {
    size_t size = sizeof(Cell) + datasize;


    l->pool = mempool_new (poolsize (depth, size), (1 << 2)*size);
  }



  l->m = ((char ** *) calloc(l->len,sizeof(char **)));



  l->nc = 0;
  return l;
}

static void destroy_layer (Layer * l)
{
  if (l->pool)
    mempool_destroy (l->pool);
  free(l->m);
  free(l);
}
# 200 "/Users/weugene/basilisk/src/grid/tree.h"
static void layer_add_row (Layer * l, int i, int j)
{
  if (!l->m[i]) {
    assign_periodic_x ((void **) l->m, i, l->len - 2*2,
         (void *) new_refarray (l->len, sizeof (char *)));
    l->nc++;
  }
  refarray (l->m[i], l->len, sizeof(char *));






}

static 
# 216 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 216 "/Users/weugene/basilisk/src/grid/tree.h"
           layer_remove_row (Layer * l, int i, int j)
{




  if (unrefarray (l->m[i], l->len, sizeof (char *))) {
    assign_periodic_x ((void **) l->m, i, l->len - 2*2, 
# 223 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                       ((void *)0)
# 223 "/Users/weugene/basilisk/src/grid/tree.h"
                                                           );
    if (--l->nc == 0) {
      destroy_layer (l);
      return 
# 226 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
            1
# 226 "/Users/weugene/basilisk/src/grid/tree.h"
                ;
    }
    
# 228 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
   (__builtin_expect(!(
# 228 "/Users/weugene/basilisk/src/grid/tree.h"
   l->nc >= 0
# 228 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
   ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree.h", 228, 
# 228 "/Users/weugene/basilisk/src/grid/tree.h"
   "l->nc >= 0"
# 228 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
   ) : (void)0)
# 228 "/Users/weugene/basilisk/src/grid/tree.h"
                      ;
  }
  return 
# 230 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
        0
# 230 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
}




typedef struct {
  Grid g;
  Layer ** L;

  Cache leaves;
  Cache faces;
  Cache vertices;
  Cache refined;
  CacheLevel * active;
  CacheLevel * prolongation;
  CacheLevel * boundary;

  CacheLevel * restriction;

  
# 250 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 _Bool 
# 250 "/Users/weugene/basilisk/src/grid/tree.h"
      dirty;
} Tree;



struct _Point {

  int i;

  int j;




  int level;
};
static Point last_point;



static void cache_level_append (CacheLevel * c, Point p)
{
  if (c->n >= c->nm) {
    c->nm += 128;
    c->p = (IndexLevel *) realloc(c->p,(c->nm)*sizeof(IndexLevel));
  }
  c->p[c->n].i = p.i;

  c->p[c->n].j = p.j;




  c->n++;
}

static void cache_level_shrink (CacheLevel * c)
{
  if (c->nm > (c->n/128 + 1)*128) {
    c->nm = (c->n/128 + 1)*128;
    
# 290 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
   (__builtin_expect(!(
# 290 "/Users/weugene/basilisk/src/grid/tree.h"
   c->nm > c->n
# 290 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
   ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree.h", 290, 
# 290 "/Users/weugene/basilisk/src/grid/tree.h"
   "c->nm > c->n"
# 290 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
   ) : (void)0)
# 290 "/Users/weugene/basilisk/src/grid/tree.h"
                        ;
    c->p = (IndexLevel *) realloc(c->p,sizeof (Index)*c->nm);
  }
}

static void cache_append (Cache * c, Point p, unsigned short flags)
{
  if (c->n >= c->nm) {
    c->nm += 128;
    c->p = (Index *) realloc(c->p,(c->nm)*sizeof(Index));
  }
  c->p[c->n].i = p.i;

  c->p[c->n].j = p.j;




  c->p[c->n].level = p.level;
  c->p[c->n].flags = flags;
  c->n++;
}

void cache_shrink (Cache * c)
{
  cache_level_shrink ((CacheLevel *)c);
}
# 343 "/Users/weugene/basilisk/src/grid/tree.h"
# 349 "/Users/weugene/basilisk/src/grid/tree.h"
# 354 "/Users/weugene/basilisk/src/grid/tree.h"
# 360 "/Users/weugene/basilisk/src/grid/tree.h"
# 363 "/Users/weugene/basilisk/src/grid/tree.h"
# 403 "/Users/weugene/basilisk/src/grid/tree.h"
# 422 "/Users/weugene/basilisk/src/grid/tree.h"
# 458 "/Users/weugene/basilisk/src/grid/tree.h"
# 1 "grid/foreach_cell.h"
# 1 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 66 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 89 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 123 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 134 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 147 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 244 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 250 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 262 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 275 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 281 "/Users/weugene/basilisk/src/grid/foreach_cell.h"
# 461 "/Users/weugene/basilisk/src/grid/tree.h"
# 478 "/Users/weugene/basilisk/src/grid/tree.h"
# 486 "/Users/weugene/basilisk/src/grid/tree.h"
# 493 "/Users/weugene/basilisk/src/grid/tree.h"
# 524 "/Users/weugene/basilisk/src/grid/tree.h"
# 533 "/Users/weugene/basilisk/src/grid/tree.h"
# 558 "/Users/weugene/basilisk/src/grid/tree.h"
# 583 "/Users/weugene/basilisk/src/grid/tree.h"
# 591 "/Users/weugene/basilisk/src/grid/tree.h"
# 614 "/Users/weugene/basilisk/src/grid/tree.h"
# 628 "/Users/weugene/basilisk/src/grid/tree.h"
# 635 "/Users/weugene/basilisk/src/grid/tree.h"
# 1 "grid/neighbors.h"
# 1 "/Users/weugene/basilisk/src/grid/neighbors.h"
# 17 "/Users/weugene/basilisk/src/grid/neighbors.h"
# 25 "/Users/weugene/basilisk/src/grid/neighbors.h"
# 31 "/Users/weugene/basilisk/src/grid/neighbors.h"
# 639 "/Users/weugene/basilisk/src/grid/tree.h"

static inline 
# 640 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
             _Bool 
# 640 "/Users/weugene/basilisk/src/grid/tree.h"
                  has_local_children (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 641 "/Users/weugene/basilisk/src/grid/tree.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0))
      return 
# 644 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
            1
# 644 "/Users/weugene/basilisk/src/grid/tree.h"
                ; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  return 
# 645 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
        0
# 645 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
}

static inline void cache_append_face (Point point, unsigned short flags)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 649 "/Users/weugene/basilisk/src/grid/tree.h"

  Tree * q = ((Tree *)grid);
  cache_append (&q->faces, point, flags);

  if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & vertex)) {
    cache_append (&q->vertices, point, 0);
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= vertex;
  }
  {
# 657 "/Users/weugene/basilisk/src/grid/tree.h"

    if ((flags & face_y) && !(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).flags & vertex)) {
      cache_append (&q->vertices, (Point) { point.i + 1, point.j + 0, point.level }, 0);
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).flags |= vertex;
    }
# 657 "/Users/weugene/basilisk/src/grid/tree.h"

    if ((flags & face_x) && !(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).flags & vertex)) {
      cache_append (&q->vertices, (Point) { point.i + 0, point.j + 1, point.level }, 0);
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).flags |= vertex;
    }}
# 672 "/Users/weugene/basilisk/src/grid/tree.h"
}



void check_periodic (Tree * q)
{
# 703 "/Users/weugene/basilisk/src/grid/tree.h"
}

static void update_cache_f (void)
{
  Tree * q = ((Tree *)grid);

  check_periodic (q);

   { { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < q->vertices.n; _k++) { point.i = q->vertices.p[_k].i; point.j = q->vertices.p[_k].j; point.level = q->vertices.p[_k].level; _flags = q->vertices.p[_k].flags; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 711 "/Users/weugene/basilisk/src/grid/tree.h"

    if (level <= (grid->depth) && (point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~vertex; } } } }; }


  q->leaves.n = q->faces.n = q->vertices.n = 0;
  for (int l = 0; l <= (grid->depth); l++)
    q->active[l].n = q->prolongation[l].n =
      q->boundary[l].n = q->restriction[l].n = 0;

  const unsigned short fboundary = 1 << user;
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 722 "/Users/weugene/basilisk/src/grid/tree.h"
 {



    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active)) {


      cache_level_append (&q->active[level], point);
    }
# 746 "/Users/weugene/basilisk/src/grid/tree.h"
    if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0)) {

       { { int _nn = 1 + 0 ? 1 + 0 : 2; int _i = point.i, _j = point.j; for (int _k = - _nn; _k <= _nn; _k++) { point.i = _i + _k; for (int _l = - _nn; _l <= _nn; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
 if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & fboundary)) {
   cache_level_append (&q->boundary[level], point);
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= fboundary;
 } } } point.i = _i; point.j = _j;}; }
    }

    else if (level > 0 && (((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0]))))).pid == 0))
      cache_level_append (&q->restriction[level], point);

    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {
      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0)) {
 cache_append (&q->leaves, point, 0);

 unsigned short flags = 0;
 {
# 763 "/Users/weugene/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid >= 0) ||
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & leaf))
     flags |= face_x;
# 763 "/Users/weugene/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid >= 0) ||
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & leaf))
     flags |= face_y;}
 if (flags)
   cache_append (&q->faces, point, flags);
 {
# 769 "/Users/weugene/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).pid >= 0) ||
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).flags & leaf)))
     cache_append (&q->faces, (Point) { point.i + 1, point.j + 0, point.level }, face_x);
# 769 "/Users/weugene/basilisk/src/grid/tree.h"

   if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).pid < 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).pid >= 0) ||
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).flags & leaf)))
     cache_append (&q->faces, (Point) { point.i + 0, point.j + 1, point.level }, face_y);}

 for (int i = 0; i <= 1; i++)

   for (int j = 0; j <= 1; j++)




       if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]))))).flags & vertex)) {
  cache_append (&q->vertices, (Point) { point.i + i, point.j + j, point.level }, 0);
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j])))).flags |= vertex;
       }

        if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors > 0)
   cache_level_append (&q->prolongation[level], point);
      }
      else if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0) || (((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0]))))).pid == 0)) {

 unsigned short flags = 0;
 {
# 792 "/Users/weugene/basilisk/src/grid/tree.h"

   if ((point.i+-1 >= 0 && point.i+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) &&
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).pid == 0) && (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid >= 0))
     flags |= face_x;
# 792 "/Users/weugene/basilisk/src/grid/tree.h"

   if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+-1 >= 0 && point.j+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) &&
       (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).pid == 0) && (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid >= 0))
     flags |= face_y;}
 if (flags)
   cache_append_face (point, flags);
 {
# 798 "/Users/weugene/basilisk/src/grid/tree.h"

   if ((point.i+1 >= 0 && point.i+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).pid == 0) &&
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).pid >= 0))
     cache_append_face ((Point) { point.i + 1, point.j + 0, point.level }, face_x);
# 798 "/Users/weugene/basilisk/src/grid/tree.h"

   if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+1 >= 0 && point.j+1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).pid == 0) &&
       (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).pid >= 0))
     cache_append_face ((Point) { point.i + 0, point.j + 1, point.level }, face_y);}
      }

      continue;

    }
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }


  cache_shrink (&q->leaves);
  cache_shrink (&q->faces);
  cache_shrink (&q->vertices);
  for (int l = 0; l <= (grid->depth); l++) {
    cache_level_shrink (&q->active[l]);
    cache_level_shrink (&q->prolongation[l]);
    cache_level_shrink (&q->boundary[l]);
    cache_level_shrink (&q->restriction[l]);
}

  q->dirty = 
# 820 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
            0
# 820 "/Users/weugene/basilisk/src/grid/tree.h"
                 ;


  for (int l = (grid->depth); l >= 0; l--)
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _boundary = ((Tree *)grid)->boundary[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _boundary.n; _k++) { point.i = _boundary.p[_k].i; point.j = _boundary.p[_k].j; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 824 "/Users/weugene/basilisk/src/grid/tree.h"

      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~fboundary; } } } }; }}; }



  grid->n = q->leaves.n;


  grid->tn = grid->n;
  grid->maxdepth = grid->depth;

}
# 841 "/Users/weugene/basilisk/src/grid/tree.h"
# 863 "/Users/weugene/basilisk/src/grid/tree.h"
# 875 "/Users/weugene/basilisk/src/grid/tree.h"
# 880 "/Users/weugene/basilisk/src/grid/tree.h"
# 890 "/Users/weugene/basilisk/src/grid/tree.h"
# 898 "/Users/weugene/basilisk/src/grid/tree.h"
void reset (void * alist, double val)
{
  scalar * list = (scalar *) alist;
  Tree * q = ((Tree *)grid);

  for (int l = 0; l <= (grid->depth); l++) {
    Layer * L = q->L[l];
    for (int i = 0; i < L->len; i++)
      if (L->m[i])





 for (int j = 0; j < L->len; j++)
   if (L->m[i][j])

     if (list) for (scalar s = *list, *_i10 = list; ((scalar *)&s)->i >= 0; s = *++_i10)
       if (!((s).i >= 65536))
  ((double *)(L->m[i][j] + sizeof(Cell)))[s.i] = val;
# 926 "/Users/weugene/basilisk/src/grid/tree.h"
  }
}
# 936 "/Users/weugene/basilisk/src/grid/tree.h"


static void update_depth (int inc)
{
  Tree * q = ((Tree *)grid);
  grid->depth += inc;
  q->L = &(q->L[-1]);
  q->L = (Layer * *) realloc(q->L,(grid->depth + 2)*sizeof(Layer *));
  q->L = &(q->L[1]);
  if (inc > 0)
    q->L[grid->depth] = new_layer (grid->depth);
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->active[i].p); free(q->active); q->active = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->prolongation[i].p); free(q->prolongation); q->prolongation = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->boundary[i].p); free(q->boundary); q->boundary = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
  { for (int i = 0; i <= (grid->depth) - inc; i++) free(q->restriction[i].p); free(q->restriction); q->restriction = ((CacheLevel *) calloc((grid->depth) + 1,sizeof(CacheLevel)));};
}

static void alloc_children (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 954 "/Users/weugene/basilisk/src/grid/tree.h"

  if (point.level == grid->depth)
    update_depth (+1);
  else if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0][2*point.j-2 +0]))
    return;


  Layer * L = ((Tree *)grid)->L[point.level + 1];
  size_t len = sizeof(Cell) + datasize;
  char * b = (char *) mempool_alloc0 (L->pool);
  int nl = L->len - 2*2;
  int i = 2*point.i - 2;
  for (int k = 0; k < 2; k++, i++) {






    layer_add_row (L, i, 0);
    int j = 2*point.j - 2;
    for (int l = 0; l < 2; l++, j++) {
      
# 976 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
     (__builtin_expect(!(
# 976 "/Users/weugene/basilisk/src/grid/tree.h"
     !L->m[i][j]
# 976 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree.h", 976, 
# 976 "/Users/weugene/basilisk/src/grid/tree.h"
     "!L->m[i][j]"
# 976 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
     ) : (void)0)
# 976 "/Users/weugene/basilisk/src/grid/tree.h"
                         ;
      assign_periodic_y ((void **) L->m[i], j, nl, (void *) b);
      b += len;
    }
# 992 "/Users/weugene/basilisk/src/grid/tree.h"
  }

  int pid = (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid = pid;




  } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
}
# 1021 "/Users/weugene/basilisk/src/grid/tree.h"
static void free_children (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1022 "/Users/weugene/basilisk/src/grid/tree.h"


  Layer * L = ((Tree *)grid)->L[point.level + 1];
  int i = 2*point.i - 2, nl = L->len - 2*2;
  
# 1026 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 (__builtin_expect(!(
# 1026 "/Users/weugene/basilisk/src/grid/tree.h"
 L->m[i][2*point.j - 2]
# 1026 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree.h", 1026, 
# 1026 "/Users/weugene/basilisk/src/grid/tree.h"
 "L->m[i][2*point.j - 2]"
# 1026 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 ) : (void)0)
# 1026 "/Users/weugene/basilisk/src/grid/tree.h"
                                ;
  mempool_free (L->pool, L->m[i][2*point.j - 2]);
  for (int k = 0; k < 2; k++, i++) {
    int j = 2*point.j - 2;
    for (int l = 0; l < 2; l++, j++)
      assign_periodic_y ((void **) L->m[i], j, nl, 
# 1031 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                  ((void *)0)
# 1031 "/Users/weugene/basilisk/src/grid/tree.h"
                                                      );
    if (layer_remove_row (L, i, j)) {
      
# 1033 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
     (__builtin_expect(!(
# 1033 "/Users/weugene/basilisk/src/grid/tree.h"
     point.level + 1 == grid->depth
# 1033 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree.h", 1033, 
# 1033 "/Users/weugene/basilisk/src/grid/tree.h"
     "point.level + 1 == grid->depth"
# 1033 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
     ) : (void)0)
# 1033 "/Users/weugene/basilisk/src/grid/tree.h"
                                            ;
      update_depth (-1);
    }
  }
}
# 1061 "/Users/weugene/basilisk/src/grid/tree.h"
void increment_neighbors (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1062 "/Users/weugene/basilisk/src/grid/tree.h"

  ((Tree *)grid)->dirty = 
# 1063 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                         1
# 1063 "/Users/weugene/basilisk/src/grid/tree.h"
                             ;
  if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors++ == 0)
    alloc_children (point);
   { { int _nn = 2/2 + 0 ? 2/2 + 0 : 2; int _i = point.i, _j = point.j; for (int _k = - _nn; _k <= _nn; _k++) { point.i = _i + _k; for (int _l = - _nn; _l <= _nn; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors++ == 0)
      alloc_children (point); } } point.i = _i; point.j = _j;}; }
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors--;
}

void decrement_neighbors (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1073 "/Users/weugene/basilisk/src/grid/tree.h"

  ((Tree *)grid)->dirty = 
# 1074 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                         1
# 1074 "/Users/weugene/basilisk/src/grid/tree.h"
                             ;
   { { int _nn = 2/2 + 0 ? 2/2 + 0 : 2; int _i = point.i, _j = point.j; for (int _k = - _nn; _k <= _nn; _k++) { point.i = _i + _k; for (int _l = - _nn; _l <= _nn; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) {
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors--;
      if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors == 0)
 free_children (point);
    } } } point.i = _i; point.j = _j;}; }
  if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors) {
    int pid = (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid;
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags = 0;
      (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid = pid;
    } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  }
}

static void apply_periodic_elem (char ** m, int len)
{
  if (m) {
    int end = len - 2;
    for (int k = 0; k < 2; k++) {
      m[k] = m[k + end - 2];
      m[end + k] = m[k + 2];
    }
  }
}

static void apply_periodic (Tree * q)
{
# 1111 "/Users/weugene/basilisk/src/grid/tree.h"
  if (Period.y) {
    for (int i = 0; i < q->L[0]->len; i++)
      for (int j = 0; j < q->L[0]->len; j++)
 q->L[0]->m[i][j] = q->L[0]->m[i][2];
    for (int l = 1; l <= (grid->depth); l++) {
      Layer * L = q->L[l];
      for (int i = 0; i < L->len; i++)
 apply_periodic_elem (L->m[i], L->len);
    }
  }
# 1136 "/Users/weugene/basilisk/src/grid/tree.h"
}

void realloc_scalar (void)
{

  Tree * q = ((Tree *)grid);
  size_t newlen = sizeof(Cell) + datasize;
  size_t oldlen = newlen - sizeof(double);

  Layer * L = q->L[0];
  int len = L->len;
  for (int i = Period.x*2; i < len - Period.x*2; i++) {



    for (int j = Period.y*2; j < len - Period.y*2; j++) {

      L->m[i][j] = (char *) realloc(L->m[i][j],(newlen)*sizeof(char));




    }

  }

  for (int l = 1; l <= (grid->depth); l++) {
    Layer * L = q->L[l];
    int len = L->len;
    Mempool * oldpool = L->pool;
    L->pool = mempool_new (poolsize (l, newlen), (1 << 2)*newlen);
    for (int i = Period.x*2; i < len - Period.x*2; i += 2)
      if (L->m[i]) {
# 1177 "/Users/weugene/basilisk/src/grid/tree.h"
 for (int j = Period.y*2; j < len - Period.y*2; j += 2)
   if (L->m[i][j]) {

     char * new = (char *) mempool_alloc (L->pool);
     for (int k = 0; k < 2; k++)
       for (int o = 0; o < 2; o++) {
  
# 1183 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 __builtin___memcpy_chk (
# 1183 "/Users/weugene/basilisk/src/grid/tree.h"
 new
# 1183 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 , 
# 1183 "/Users/weugene/basilisk/src/grid/tree.h"
 L->m[i+k][j+o], oldlen
# 1183 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 , __builtin_object_size (
# 1183 "/Users/weugene/basilisk/src/grid/tree.h"
 new
# 1183 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 , 0))
# 1183 "/Users/weugene/basilisk/src/grid/tree.h"
                                     ;
  L->m[i+k][j+o] = new;
  new += newlen;
       }
# 1200 "/Users/weugene/basilisk/src/grid/tree.h"
   }

      }
    mempool_destroy (oldpool);
  }
  apply_periodic (q);
  check_periodic (q);
}
# 1226 "/Users/weugene/basilisk/src/grid/tree.h"
static inline void no_restriction (Point point, scalar s);

static 
# 1228 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 1228 "/Users/weugene/basilisk/src/grid/tree.h"
           normal_neighbor (Point point, scalar * scalars, vector * vectors)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1229 "/Users/weugene/basilisk/src/grid/tree.h"

  for (int k = 1; k <= 1; k++)
    {
# 1231 "/Users/weugene/basilisk/src/grid/tree.h"

      for (int i = -k; i <= k; i += 2*k)
 if (((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0])))).pid < 0))) {
   Point neighbor = (Point) { point.i + i, point.j + 0, point.level };
   int id = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid - 1);
   if (scalars) for (scalar s = *scalars, *_i12 = scalars; ((scalar *)&s)->i >= 0; s = *++_i12)
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = _attribute[s.i].boundary[id](neighbor, point, s, 
# 1237 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                    ((void *)0)
# 1237 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                        );
   if (vectors) for (vector v = *vectors, *_i13 = vectors; ((scalar *)&v)->i >= 0; v = *++_i13) {
     scalar vn = v.x;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = _attribute[vn.i].boundary[id](neighbor, point, v.x, 
# 1240 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1240 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                             );

     scalar vt = v.y;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = _attribute[vt.i].boundary[id](neighbor, point, v.y, 
# 1243 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1243 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                             );





   }
   return 
# 1250 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
         1
# 1250 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
 }
# 1231 "/Users/weugene/basilisk/src/grid/tree.h"

      for (int i = -k; i <= k; i += 2*k)
 if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i])))).pid < 0))) {
   Point neighbor = (Point) { point.i + 0, point.j + i, point.level };
   int id = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid - 1);
   if (scalars) for (scalar s = *scalars, *_i12 = scalars; ((scalar *)&s)->i >= 0; s = *++_i12)
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = _attribute[s.i].boundary[id](neighbor, point, s, 
# 1237 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                    ((void *)0)
# 1237 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                        );
   if (vectors) for (vector v = *vectors, *_i13 = vectors; ((scalar *)&v)->i >= 0; v = *++_i13) {
     scalar vn = v.x;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = _attribute[vn.i].boundary[id](neighbor, point, v.y, 
# 1240 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1240 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                             );

     scalar vt = v.y;
     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = _attribute[vt.i].boundary[id](neighbor, point, v.x, 
# 1243 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                         ((void *)0)
# 1243 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                             );





   }
   return 
# 1250 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
         1
# 1250 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
 }}
  return 
# 1252 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
        0
# 1252 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
}

static 
# 1255 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 1255 "/Users/weugene/basilisk/src/grid/tree.h"
           diagonal_neighbor_2D (Point point,
      scalar * scalars, vector * vectors)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1257 "/Users/weugene/basilisk/src/grid/tree.h"


  for (int k = 1; k <= 1; k++)



      for (int i = -k; i <= k; i += 2*k)
 for (int j = -k; j <= k; j += 2*k)
   if ((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]) && ((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j])))).pid < 0)) &&
       (point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0])))).pid < 0) &&
       (point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j]) && ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j])))).pid < 0)) {
     Point n = (Point) { point.i + i, point.j + j, point.level },
       n1 = (Point) { point.i + i, point.j + 0, point.level }, n2 = (Point) { point.i + 0, point.j + j, point.level };
     int id1 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0])))).pid - 1), id2 = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j])))).pid - 1);
     if (scalars) for (scalar s = *scalars, *_i14 = scalars; ((scalar *)&s)->i >= 0; s = *++_i14)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = (_attribute[s.i].boundary[id1](n,n1,s,
# 1272 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                           ((void *)0)
# 1272 "/Users/weugene/basilisk/src/grid/tree.h"
                                                               ) +
       _attribute[s.i].boundary[id2](n,n2,s,
# 1273 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                           ((void *)0)
# 1273 "/Users/weugene/basilisk/src/grid/tree.h"
                                               ) -
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]) + sizeof(Cell)))[s.i]);
     if (vectors) for (vector v = *vectors, *_i15 = vectors; ((scalar *)&v)->i >= 0; v = *++_i15) {
       scalar vt = v.y, vn = v.x;
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = (_attribute[vt.i].boundary[id1](n,n1,v.x,
# 1277 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1277 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vn.i].boundary[id2](n,n2,v.x,
# 1278 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1278 "/Users/weugene/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]) + sizeof(Cell)))[v.x.i]);
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = (_attribute[vn.i].boundary[id1](n,n1,v.y,
# 1280 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                ((void *)0)
# 1280 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                    ) +
         _attribute[vt.i].boundary[id2](n,n2,v.y,
# 1281 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                ((void *)0)
# 1281 "/Users/weugene/basilisk/src/grid/tree.h"
                                                    ) -
         ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]) + sizeof(Cell)))[v.y.i]);






     }
     return 
# 1290 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
           1
# 1290 "/Users/weugene/basilisk/src/grid/tree.h"
               ;
   }

  return 
# 1293 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
        0
# 1293 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
}

static 
# 1296 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
      _Bool 
# 1296 "/Users/weugene/basilisk/src/grid/tree.h"
           diagonal_neighbor_3D (Point point,
      scalar * scalars, vector * vectors)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1298 "/Users/weugene/basilisk/src/grid/tree.h"
# 1340 "/Users/weugene/basilisk/src/grid/tree.h"
  return 
# 1340 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
        0
# 1340 "/Users/weugene/basilisk/src/grid/tree.h"
             ;
}
# 1344 "/Users/weugene/basilisk/src/grid/tree.h"

static Point tangential_neighbor_x (Point point, 
# 1345 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                _Bool 
# 1345 "/Users/weugene/basilisk/src/grid/tree.h"
                                                     * zn)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1346 "/Users/weugene/basilisk/src/grid/tree.h"

  for (int k = 1; k <= 1; k++)
    for (int j = -k; j <= k; j += 2*k) {
      if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j])))).pid < 0)) || ((point.i+-1 >= 0 && point.i+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1] && point.j+j >= 0 && point.j+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+j]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+j])))).pid < 0))) {
 *zn = 
# 1350 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
      0
# 1350 "/Users/weugene/basilisk/src/grid/tree.h"
           ;
 return (Point) { point.i + 0, point.j + j, point.level };
      }







    }
  return (Point){.level = -1};
}
# 1344 "/Users/weugene/basilisk/src/grid/tree.h"

static Point tangential_neighbor_y (Point point, 
# 1345 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                _Bool 
# 1345 "/Users/weugene/basilisk/src/grid/tree.h"
                                                     * zn)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1346 "/Users/weugene/basilisk/src/grid/tree.h"

  for (int k = 1; k <= 1; k++)
    for (int j = -k; j <= k; j += 2*k) {
      if (((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+0])))).pid < 0)) || ((point.i+j >= 0 && point.i+j < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j] && point.j+-1 >= 0 && point.j+-1 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+j][point.j+-1]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+j][point.j+-1])))).pid < 0))) {
 *zn = 
# 1350 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
      0
# 1350 "/Users/weugene/basilisk/src/grid/tree.h"
           ;
 return (Point) { point.i + j, point.j + 0, point.level };
      }







    }
  return (Point){.level = -1};
}


static inline 
# 1365 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
             _Bool 
# 1365 "/Users/weugene/basilisk/src/grid/tree.h"
                  is_boundary_point (Point point) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1365 "/Users/weugene/basilisk/src/grid/tree.h"

  return ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0);
}

static void box_boundary_level (const Boundary * b, scalar * list, int l)
{
  ;
  scalar * scalars = 
# 1372 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                    ((void *)0)
# 1372 "/Users/weugene/basilisk/src/grid/tree.h"
                        ;
  vector * vectors = 
# 1373 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                    ((void *)0)
# 1373 "/Users/weugene/basilisk/src/grid/tree.h"
                        , * faces = 
# 1373 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                    ((void *)0)
# 1373 "/Users/weugene/basilisk/src/grid/tree.h"
                                        ;
  if (list) for (scalar s = *list, *_i16 = list; ((scalar *)&s)->i >= 0; s = *++_i16)
    if (!((s).i >= 65536) && _attribute[s.i].refine != no_restriction) {
      if (_attribute[s.i].v.x.i == s.i) {
 if (_attribute[s.i].face)
   faces = vectors_add (faces, _attribute[s.i].v);
 else
   vectors = vectors_add (vectors, _attribute[s.i].v);
      }
      else if (_attribute[s.i].v.x.i < 0 && _attribute[s.i].boundary[0])
 scalars = list_add (scalars, s);
    }

   { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _boundary = ((Tree *)grid)->boundary[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _boundary.n; _k++) { point.i = _boundary.p[_k].i; point.j = _boundary.p[_k].j; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 1386 "/Users/weugene/basilisk/src/grid/tree.h"
 {
    if (!normal_neighbor (point, scalars, vectors) &&
 !diagonal_neighbor_2D (point, scalars, vectors) &&
 !diagonal_neighbor_3D (point, scalars, vectors)) {

      if (scalars) for (scalar s = *scalars, *_i17 = scalars; ((scalar *)&s)->i >= 0; s = *++_i17)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = undefined;
      if (vectors) for (vector v = *vectors, *_i18 = vectors; ((scalar *)&v)->i >= 0; v = *++_i18)
 {
# 1394 "/Users/weugene/basilisk/src/grid/tree.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = undefined;
# 1394 "/Users/weugene/basilisk/src/grid/tree.h"

   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = undefined;}
    }
    if (faces) {
      int id = (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid - 1);
      {
# 1399 "/Users/weugene/basilisk/src/grid/tree.h"

 for (int i = -1; i <= 1; i += 2) {

   if (((point.i+i >= 0 && point.i+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0])))).pid < 0))) {
     Point neighbor = (Point) { point.i + i, point.j + 0, point.level };
     if (faces) for (vector v = *faces, *_i19 = faces; ((scalar *)&v)->i >= 0; v = *++_i19) {
       scalar vn = v.x;
       if (_attribute[vn.i].boundary[id])
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+(i + 1)/2][point.j+0]) + sizeof(Cell)))[v.x.i] = _attribute[vn.i].boundary[id](neighbor, point, v.x, 
# 1407 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                              ((void *)0)
# 1407 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                                  );
     }
   }

   else if (i == -1) {

     
# 1413 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
    _Bool 
# 1413 "/Users/weugene/basilisk/src/grid/tree.h"
         zn;
     Point neighbor = tangential_neighbor_x (point, &zn);
     if (neighbor.level >= 0) {
       int id = is_boundary_point (neighbor) ?
  (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid - 1) : (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid - 1);
       if (faces) for (vector v = *faces, *_i20 = faces; ((scalar *)&v)->i >= 0; v = *++_i20) {

  scalar vt = v.y;



  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = _attribute[vt.i].boundary[id](neighbor, point, v.x, 
# 1424 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                      ((void *)0)
# 1424 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                          );
       }
     }
     else

       if (faces) for (vector v = *faces, *_i21 = faces; ((scalar *)&v)->i >= 0; v = *++_i21)
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = 0.;
   }

 }
# 1399 "/Users/weugene/basilisk/src/grid/tree.h"

 for (int i = -1; i <= 1; i += 2) {

   if (((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+i >= 0 && point.j+i < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i]) && !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i])))).pid < 0))) {
     Point neighbor = (Point) { point.i + 0, point.j + i, point.level };
     if (faces) for (vector v = *faces, *_i19 = faces; ((scalar *)&v)->i >= 0; v = *++_i19) {
       scalar vn = v.x;
       if (_attribute[vn.i].boundary[id])
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+(i + 1)/2]) + sizeof(Cell)))[v.y.i] = _attribute[vn.i].boundary[id](neighbor, point, v.y, 
# 1407 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                              ((void *)0)
# 1407 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                                  );
     }
   }

   else if (i == -1) {

     
# 1413 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
    _Bool 
# 1413 "/Users/weugene/basilisk/src/grid/tree.h"
         zn;
     Point neighbor = tangential_neighbor_y (point, &zn);
     if (neighbor.level >= 0) {
       int id = is_boundary_point (neighbor) ?
  (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid - 1) : (- (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid - 1);
       if (faces) for (vector v = *faces, *_i20 = faces; ((scalar *)&v)->i >= 0; v = *++_i20) {

  scalar vt = v.y;



  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = _attribute[vt.i].boundary[id](neighbor, point, v.y, 
# 1424 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                                                                      ((void *)0)
# 1424 "/Users/weugene/basilisk/src/grid/tree.h"
                                                                          );
       }
     }
     else

       if (faces) for (vector v = *faces, *_i21 = faces; ((scalar *)&v)->i >= 0; v = *++_i21)
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = 0.;
   }

 }}
    }
  } } } } }; }}; }

  free(scalars);
  free(vectors);
  free(faces);
  ;
}
# 1450 "/Users/weugene/basilisk/src/grid/tree.h"
static double masked_average (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1451 "/Users/weugene/basilisk/src/grid/tree.h"

  double sum = 0., n = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] != ((double)1e30))
      sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], n++; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  return n ? sum/n : ((double)1e30);
}
# 1459 "/Users/weugene/basilisk/src/grid/tree.h"

static double masked_average_x (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1461 "/Users/weugene/basilisk/src/grid/tree.h"

  double sum = 0., n = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if (child.x < 0 && (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0) || !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).pid < 0)) &&
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i] != ((double)1e30))
      sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i], n++; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  return n ? sum/n : ((double)1e30);
}
# 1459 "/Users/weugene/basilisk/src/grid/tree.h"

static double masked_average_y (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 1461 "/Users/weugene/basilisk/src/grid/tree.h"

  double sum = 0., n = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if (child.y < 0 && (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0) || !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).pid < 0)) &&
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i] != ((double)1e30))
      sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i], n++; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  return n ? sum/n : ((double)1e30);
}

static void masked_boundary_restriction (const Boundary * b,
      scalar * list, int l)
{
  scalar * scalars = 
# 1473 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                    ((void *)0)
# 1473 "/Users/weugene/basilisk/src/grid/tree.h"
                        ;
  vector * faces = 
# 1474 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
                  ((void *)0)
# 1474 "/Users/weugene/basilisk/src/grid/tree.h"
                      ;
  if (list) for (scalar s = *list, *_i22 = list; ((scalar *)&s)->i >= 0; s = *++_i22)
    if (!((s).i >= 65536) && _attribute[s.i].refine != no_restriction) {
      if (_attribute[s.i].v.x.i == s.i && _attribute[s.i].face)
 faces = vectors_add (faces, _attribute[s.i].v);
      else
 scalars = list_add (scalars, s);
    }

   { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->restriction[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 1483 "/Users/weugene/basilisk/src/grid/tree.h"
 {
    if (scalars) for (scalar s = *scalars, *_i23 = scalars; ((scalar *)&s)->i >= 0; s = *++_i23)
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = masked_average (parent, s);
    if (faces) for (vector v = *faces, *_i24 = faces; ((scalar *)&v)->i >= 0; v = *++_i24)
      {
# 1487 "/Users/weugene/basilisk/src/grid/tree.h"
 {
 double average = masked_average_x (parent, v.x);
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = average;
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i] = average;
      }
# 1487 "/Users/weugene/basilisk/src/grid/tree.h"
 {
 double average = masked_average_y (parent, v.y);
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = average;
 if (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).pid < 0))
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i] = average;
      }}
  } } } } }; }}; }

  free(scalars);
  free(faces);
}
# 1523 "/Users/weugene/basilisk/src/grid/tree.h"
static void free_cache (CacheLevel * c)
{
  for (int l = 0; l <= (grid->depth); l++)
    free(c[l].p);
  free(c);
}

void free_grid (void)
{
  if (!grid)
    return;
  free_boundaries();
  Tree * q = ((Tree *)grid);
  free(q->leaves.p);
  free(q->faces.p);
  free(q->vertices.p);
  free(q->refined.p);


  Layer * L = q->L[0];




  for (int i = Period.x*2; i < L->len - Period.x*2; i++) {
    for (int j = Period.y*2; j < L->len - Period.y*2; j++)
      free(L->m[i][j]);
    free(L->m[i]);
  }

  for (int l = 1; l <= (grid->depth); l++) {
    Layer * L = q->L[l];
    for (int i = Period.x*2; i < L->len - Period.x*2; i++)
      free(L->m[i]);
  }
# 1579 "/Users/weugene/basilisk/src/grid/tree.h"
  for (int l = 0; l <= (grid->depth); l++)
    destroy_layer (q->L[l]);
  q->L = &(q->L[-1]);
  free(q->L);
  free_cache (q->active);
  free_cache (q->prolongation);
  free_cache (q->boundary);
  free_cache (q->restriction);
  free(q);
  grid = 
# 1588 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
        ((void *)0)
# 1588 "/Users/weugene/basilisk/src/grid/tree.h"
            ;
}

static void refine_level (int depth);


void init_grid (int n)
{ ;

  
# 1597 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 (__builtin_expect(!(
# 1597 "/Users/weugene/basilisk/src/grid/tree.h"
 sizeof(Cell) % 8 == 0
# 1597 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree.h", 1597, 
# 1597 "/Users/weugene/basilisk/src/grid/tree.h"
 "sizeof(Cell) % 8 == 0"
# 1597 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
 ) : (void)0)
# 1597 "/Users/weugene/basilisk/src/grid/tree.h"
                               ;

  free_grid();
  int depth = 0;
  while (n > 1) {
    if (n % 2) {
      fprintf (
# 1603 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
              __stderrp
# 1603 "/Users/weugene/basilisk/src/grid/tree.h"
                       , "tree: N must be a power-of-two\n");
      exit (1);
    }
    n /= 2;
    depth++;
  }
  Tree * q = ((Tree *) calloc(1,sizeof(Tree)));
  grid = (Grid *) q;
  grid->depth = 0;


  q->L = ((Layer * *) malloc((2)*sizeof(Layer *)));

  q->L[0] = 
# 1616 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
           ((void *)0)
# 1616 "/Users/weugene/basilisk/src/grid/tree.h"
               ; q->L = &(q->L[1]);

  Layer * L = new_layer (0);
  q->L[0] = L;
# 1635 "/Users/weugene/basilisk/src/grid/tree.h"
  for (int i = Period.x*2; i < L->len - Period.x*2; i++) {
    layer_add_row (L, i, 0);
    for (int j = Period.y*2; j < L->len - Period.y*2; j++)
      L->m[i][j] = (char *) calloc(1,sizeof(Cell) + datasize);
  }
  apply_periodic (q);
  (*((Cell *)(L->m[2][2]))).flags |= leaf;
  if (0 == 0)
    (*((Cell *)(L->m[2][2]))).flags |= active;
  for (int k = - 2*(1 - Period.x); k <= 2*(1 - Period.x); k++)
    for (int l = -2*(1 - Period.y); l <= 2*(1 - Period.y); l++)
      (*((Cell *)(L->m[2 +k][2 +l]))).pid = (k < 0 ? -1 - left :
         k > 0 ? -1 - right :
         l > 0 ? -1 - top :
         l < 0 ? -1 - bottom :
         0);
  (*((Cell *)(L->m[2][2]))).pid = 0;
# 1675 "/Users/weugene/basilisk/src/grid/tree.h"
  q->active = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->prolongation = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->boundary = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->restriction = ((CacheLevel *) calloc(1,sizeof(CacheLevel)));
  q->dirty = 
# 1679 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
            1
# 1679 "/Users/weugene/basilisk/src/grid/tree.h"
                ;
  N = 1 << depth;





  Boundary * b = ((Boundary *) calloc(1,sizeof(Boundary)));
  b->level = box_boundary_level;
  b->restriction = masked_boundary_restriction;
  add_boundary (b);
  refine_level (depth);
  reset (all, 0.);
  { if (((Tree *)grid)->dirty) update_cache_f(); };
 ; }


void check_two_one (void)
{
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) { if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0)) {{
# 1698 "/Users/weugene/basilisk/src/grid/tree.h"

    if (level > 0)
      for (int k = -1; k <= 1; k++)
 for (int l = -1; l <= 1; l++) {

   int i = (point.i + 2)/2 + k;
   int j = (point.j + 2)/2 + l;
   double x = ((i - 2 + 0.5)*(1./(1 << point.level))*2. - 0.5);
   double y = ((j - 2 + 0.5)*(1./(1 << point.level))*2. - 0.5);
   if (x > -0.5 && x < 0.5 && y > -0.5 && y < 0.5 &&
       !((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k] [(point.j+2)/2+l])))).flags & active)) {
     FILE * fp = fopen("check_two_one_loc", "w");
     fprintf (fp,
       "# %d %d\n"
       "%g %g\n%g %g\n",
       k, l,
       (((point.i - 2) + 0.5)*(1./(1 << point.level)) - 0.5),
       (((point.j - 2) + 0.5)*(1./(1 << point.level)) - 0.5),
       x, y);
     fclose (fp);





     
# 1723 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
    (__builtin_expect(!(0), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree.h", 1723, 
# 1723 "/Users/weugene/basilisk/src/grid/tree.h"
    "false"
# 1723 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
    ) : (void)0)
# 1723 "/Users/weugene/basilisk/src/grid/tree.h"
                  ;
   }
 } } } continue; } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
}


struct _locate { double x, y, z; };

Point locate (struct _locate p)
{
  for (int l = (grid->depth); l >= 0; l--) {
    Point point = { .level = l };
    int n = 1 << point.level;
    point.i = (p.x - X0)/L0*n + 2;

    point.j = (p.y - Y0)/L0*n + 2;




    if (point.i >= 0 && point.i < n + 2*2

 && point.j >= 0 && point.j < n + 2*2




 ) {
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf))
 return point;
    }
    else
      break;
  }
  Point point = { .level = -1 };
  return point;
}




# 1763 "/Users/weugene/basilisk/src/grid/tree.h" 3 4
_Bool 
# 1763 "/Users/weugene/basilisk/src/grid/tree.h"
    tree_is_full()
{
  { if (((Tree *)grid)->dirty) update_cache_f(); };
  return (grid->tn == 1L << grid->maxdepth*2);
}
# 1 "grid/tree-common.h"
# 1 "/Users/weugene/basilisk/src/grid/tree-common.h"
# 1 "grid/multigrid-common.h"
# 1 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
# 1 "grid/cartesian-common.h"
# 1 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
# 1 "grid/events.h"
# 1 "/Users/weugene/basilisk/src/grid/events.h"







static void event_error (Event * ev, const char * s)
{
  fprintf (
# 10 "/Users/weugene/basilisk/src/grid/events.h" 3 4
          __stderrp
# 10 "/Users/weugene/basilisk/src/grid/events.h"
                   , "%s:%d: error: %s\n", ev->file, ev->line, s);
  exit (1);
}

static void init_event (Event * ev)
{
  if (ev->arrayi || ev->arrayt) {
    ev->i = ev->t = -1;
    if (ev->arrayi)
      ev->i = ev->arrayi[0];
    else
      ev->t = ev->arrayt[0];
    ev->a = 1;
    ev->expr[1] = 
# 23 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                 ((void *)0)
# 23 "/Users/weugene/basilisk/src/grid/events.h"
                     ;
  }
  else {
    if (ev->nexpr > 0) {
      Expr init = 
# 27 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                 ((void *)0)
# 27 "/Users/weugene/basilisk/src/grid/events.h"
                     , cond = 
# 27 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                              ((void *)0)
# 27 "/Users/weugene/basilisk/src/grid/events.h"
                                  , inc = 
# 27 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                                          ((void *)0)
# 27 "/Users/weugene/basilisk/src/grid/events.h"
                                              ;
      for (int j = 0; j < ev->nexpr; j++) {
 int i = -123456; double t = i;
 (* ev->expr[j]) (&i, &t, ev);
 if (i == -123456 && t == -123456) {

   if (cond)
     event_error (ev, "events can only use a single condition");
   cond = ev->expr[j];
 }
 else {

   int i1 = i; double t1 = t;
   (* ev->expr[j]) (&i1, &t1, ev);
   if (i1 == i && t1 == t) {


     if (init)
       event_error (ev, "events can only use a single initialisation");
     init = ev->expr[j];
   }
   else {

     if (inc)
       event_error (ev, "events can only use a single increment");
     inc = ev->expr[j];
   }
 }
      }
      ev->expr[0] = init;
      ev->expr[1] = cond;
      ev->expr[2] = inc;
      ev->nexpr = 0;
    }
    ev->i = ev->t = -1;
    if (ev->expr[0]) {
      (* ev->expr[0]) (&ev->i, &ev->t, ev);
      if (ev->i == 1234567890 || ev->t == 1234567890) {
 ev->i = 1234567890; ev->t = -1;
      }
    }
    else if (ev->expr[2]) {
      (* ev->expr[2]) (&ev->i, &ev->t, ev);
      if (ev->i != -1)
 ev->i = 0;
      if (ev->t != -1)
 ev->t = 0;
    }
  }
}

enum { event_done, event_alive, event_stop };

static int event_finished (Event * ev)
{
  ev->t = ev->i = -1;
  return event_done;
}

void event_register (Event event) {
  
# 87 "/Users/weugene/basilisk/src/grid/events.h" 3 4
 (__builtin_expect(!(
# 87 "/Users/weugene/basilisk/src/grid/events.h"
 Events
# 87 "/Users/weugene/basilisk/src/grid/events.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/events.h", 87, 
# 87 "/Users/weugene/basilisk/src/grid/events.h"
 "Events"
# 87 "/Users/weugene/basilisk/src/grid/events.h" 3 4
 ) : (void)0)
# 87 "/Users/weugene/basilisk/src/grid/events.h"
                ;
  
# 88 "/Users/weugene/basilisk/src/grid/events.h" 3 4
 (__builtin_expect(!(
# 88 "/Users/weugene/basilisk/src/grid/events.h"
 !event.last
# 88 "/Users/weugene/basilisk/src/grid/events.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/events.h", 88, 
# 88 "/Users/weugene/basilisk/src/grid/events.h"
 "!event.last"
# 88 "/Users/weugene/basilisk/src/grid/events.h" 3 4
 ) : (void)0)
# 88 "/Users/weugene/basilisk/src/grid/events.h"
                     ;
  int n = 0, parent = -1;
  for (Event * ev = Events; !ev->last; ev++) {
    if (!strcmp (event.name, ev->name)) {
      
# 92 "/Users/weugene/basilisk/src/grid/events.h" 3 4
     (__builtin_expect(!(
# 92 "/Users/weugene/basilisk/src/grid/events.h"
     parent < 0
# 92 "/Users/weugene/basilisk/src/grid/events.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/events.h", 92, 
# 92 "/Users/weugene/basilisk/src/grid/events.h"
     "parent < 0"
# 92 "/Users/weugene/basilisk/src/grid/events.h" 3 4
     ) : (void)0)
# 92 "/Users/weugene/basilisk/src/grid/events.h"
                        ;
      parent = n;
    }
    n++;
  }
  if (parent < 0) {
    Events = (Event *) realloc(Events,(n + 2)*sizeof(Event));
    Events[n] = event;
    Events[n].next = 
# 100 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                    ((void *)0)
# 100 "/Users/weugene/basilisk/src/grid/events.h"
                        ;
    Events[n + 1].last = 
# 101 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                        1
# 101 "/Users/weugene/basilisk/src/grid/events.h"
                            ;
    init_event (&Events[n]);
  }
  else {
    Event * ev = ((Event *) calloc(1,sizeof(Event)));
    *ev = Events[parent];
    Events[parent] = event;
    Events[parent].next = ev;
    init_event (&Events[parent]);
  }
}

static int event_cond (Event * ev, int i, double t)
{
  if (!ev->expr[1])
    return 
# 116 "/Users/weugene/basilisk/src/grid/events.h" 3 4
          1
# 116 "/Users/weugene/basilisk/src/grid/events.h"
              ;
  return (* ev->expr[1]) (&i, &t, ev);
}
# 131 "/Users/weugene/basilisk/src/grid/events.h"
static int event_do (Event * ev, 
# 131 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                                _Bool 
# 131 "/Users/weugene/basilisk/src/grid/events.h"
                                     action)
{
  if ((iter > ev->i && t > ev->t) || !event_cond (ev, iter, t))
    return event_finished (ev);
  if (iter == ev->i || fabs (t - ev->t) <= 1e-9) {
    if (action) {
      
# 137 "/Users/weugene/basilisk/src/grid/events.h" 3 4
     _Bool 
# 137 "/Users/weugene/basilisk/src/grid/events.h"
          finished = 
# 137 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                     0
# 137 "/Users/weugene/basilisk/src/grid/events.h"
                          ;
      for (Event * e = ev; e; e = e->next) {



 if ((* e->action) (iter, t, e))
   finished = 
# 143 "/Users/weugene/basilisk/src/grid/events.h" 3 4
             1
# 143 "/Users/weugene/basilisk/src/grid/events.h"
                 ;
      }
      if (finished) {
 event_finished (ev);
 return event_stop;
      }
    }
    if (ev->arrayi) {
      ev->i = ev->arrayi[ev->a++];
      if (ev->i < 0)
 return event_finished (ev);
    }
    if (ev->arrayt) {
      ev->t = ev->arrayt[ev->a++];
      if (ev->t < 0)
 return event_finished (ev);
    }
    else if (ev->expr[2]) {
      int i0 = ev->i;
      (* ev->expr[2]) (&ev->i, &ev->t, ev);
      if (i0 == -1 && ev->i != i0)
 ev->i += iter + 1;
      if (!event_cond (ev, iter + 1, ev->t))
 return event_finished (ev);
    }
    else if (ev->expr[0] && !ev->expr[1])
      return event_finished (ev);
  }
  return event_alive;
}

static void end_event_do (
# 174 "/Users/weugene/basilisk/src/grid/events.h" 3 4
                         _Bool 
# 174 "/Users/weugene/basilisk/src/grid/events.h"
                              action)
{




  for (Event * ev = Events; !ev->last; ev++)
    if (ev->i == 1234567890 && action)
      for (Event * e = ev; e; e = e->next) {



 e->action (iter, t, e);
      }
}

int events (
# 190 "/Users/weugene/basilisk/src/grid/events.h" 3 4
           _Bool 
# 190 "/Users/weugene/basilisk/src/grid/events.h"
                action)
{





  if (iter == 0)
    for (Event * ev = Events; !ev->last; ev++)
      init_event (ev);

  int cond = 0, cond1 = 0;
  inext = 1234567890; tnext = ((double)1e30);
  for (Event * ev = Events; !ev->last && !cond; ev++)
    if (ev->i != 1234567890 &&
 (ev->expr[1] || (ev->expr[0] && !ev->expr[1] && !ev->expr[2]) || ev->arrayi || ev->arrayt))
      cond = 1;
  for (Event * ev = Events; !ev->last; ev++) {
    int status = event_do (ev, action);
    if (status == event_stop) {
      end_event_do (action);
      return 0;
    }
    if (status == event_alive && ev->i != 1234567890 &&
 (ev->expr[1] || (ev->expr[0] && !ev->expr[1] && !ev->expr[2]) || ev->arrayi || ev->arrayt))
      cond1 = 1;
    if (ev->t > t && ev->t < tnext)
      tnext = ev->t;
    if (ev->i > iter && ev->i < inext)
      inext = ev->i;
  }
  if ((!cond || cond1) && (tnext != ((double)1e30) || inext != 1234567890)) {
    inext = iter + 1;
    return 1;
  }
  end_event_do (action);
  return 0;
}

void event (const char * name)
{
  for (Event * ev = Events; !ev->last; ev++)
    if (!strcmp (ev->name, name))
      for (Event * e = ev; e; e = e->next) {



 (* e->action) (0, 0, e);
      }
}

double dtnext (double dt)
{
  if (tnext != ((double)1e30) && tnext > t) {
    unsigned int n = (tnext - t)/dt;
    
# 245 "/Users/weugene/basilisk/src/grid/events.h" 3 4
   (__builtin_expect(!(
# 245 "/Users/weugene/basilisk/src/grid/events.h"
   n < 0x7fffffff
# 245 "/Users/weugene/basilisk/src/grid/events.h" 3 4
   ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/events.h", 245, 
# 245 "/Users/weugene/basilisk/src/grid/events.h"
   "n < INT_MAX"
# 245 "/Users/weugene/basilisk/src/grid/events.h" 3 4
   ) : (void)0)
# 245 "/Users/weugene/basilisk/src/grid/events.h"
                       ;
    if (n == 0)
      dt = tnext - t;
    else {
      double dt1 = (tnext - t)/n;
      if (dt1 > dt + 1e-9)
 dt = (tnext - t)/(n + 1);
      else if (dt1 < dt)
 dt = dt1;
      tnext = t + dt;
    }
  }
  else
    tnext = t + dt;
  return dt;
}
# 2 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

void (* debug) (Point);
# 32 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
# 1 "grid/fpe.h"
# 1 "/Users/weugene/basilisk/src/grid/fpe.h"



# 1 "/usr/include/unistd.h" 1 3 4
# 72 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/sys/unistd.h" 1 3 4
# 84 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_posix_vdisable.h" 1 3 4
# 85 "/usr/include/sys/unistd.h" 2 3 4
# 122 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_seek_set.h" 1 3 4
# 123 "/usr/include/sys/unistd.h" 2 3 4
# 202 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_gid_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_gid_t.h" 3 4

# 31 "/usr/include/sys/_types/_gid_t.h" 3 4
typedef __darwin_gid_t gid_t;
# 203 "/usr/include/sys/unistd.h" 2 3 4




int faccessat(int, const char *, int, int) ;
int fchownat(int, const char *, uid_t, gid_t, int) ;
int linkat(int, const char *, int, const char *, int) ;
ssize_t readlinkat(int, const char *, char *, size_t) ;
int symlinkat(const char *, int, const char *) ;
int unlinkat(int, const char *, int) ;


# 73 "/usr/include/unistd.h" 2 3 4
# 83 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_useconds_t.h" 3 4
typedef __darwin_useconds_t useconds_t;
# 84 "/usr/include/unistd.h" 2 3 4
# 428 "/usr/include/unistd.h" 3 4

void _exit(int) __attribute__((noreturn));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);

int close(int) __asm("_" "close" );

int dup(int);
int dup2(int, int);
int execl(const char * __path, const char * __arg0, ...) ;
int execle(const char * __path, const char * __arg0, ...) ;
int execlp(const char * __file, const char * __arg0, ...) ;
int execv(const char * __path, char * const * __argv) ;
int execve(const char * __file, char * const * __argv, char * const * __envp) ;
int execvp(const char * __file, char * const * __argv) ;
pid_t fork(void) ;
long fpathconf(int, int);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);



int getgroups(int, gid_t []);

char *getlogin(void);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
uid_t getuid(void);
int isatty(int);
int link(const char *, const char *);
off_t lseek(int, off_t, int);
long pathconf(const char *, int);

int pause(void) __asm("_" "pause" );

int pipe(int [2]);

ssize_t read(int, void *, size_t) __asm("_" "read" );

int rmdir(const char *);
int setgid(gid_t);
int setpgid(pid_t, pid_t);
pid_t setsid(void);
int setuid(uid_t);

unsigned int
  sleep(unsigned int) __asm("_" "sleep" );

long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
char *ttyname(int);


int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" );




int unlink(const char *);

ssize_t write(int __fd, const void * __buf, size_t __nbyte) __asm("_" "write" );

# 505 "/usr/include/unistd.h" 3 4

size_t confstr(int, char *, size_t) __asm("_" "confstr" );

int getopt(int, char * const [], const char *) __asm("_" "getopt" );

extern char *optarg;
extern int optind, opterr, optopt;

# 530 "/usr/include/unistd.h" 3 4

# 542 "/usr/include/unistd.h" 3 4
char *crypt(const char *, const char *);






void encrypt(char *, int) __asm("_" "encrypt" );



int fchdir(int);
long gethostid(void);
pid_t getpgid(pid_t);
pid_t getsid(pid_t);
# 570 "/usr/include/unistd.h" 3 4
int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" );

int lockf(int, int, off_t) __asm("_" "lockf" );

int nice(int) __asm("_" "nice" );

ssize_t pread(int __fd, void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pread" );

ssize_t pwrite(int __fd, const void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pwrite" );
# 591 "/usr/include/unistd.h" 3 4
pid_t setpgrp(void) __asm("_" "setpgrp" );




int setregid(gid_t, gid_t) __asm("_" "setregid" );

int setreuid(uid_t, uid_t) __asm("_" "setreuid" );

void swab(const void * restrict, void * restrict, ssize_t);
void sync(void);
int truncate(const char *, off_t);
useconds_t ualarm(useconds_t, useconds_t);
int usleep(useconds_t) __asm("_" "usleep" );
pid_t vfork(void) ;


int fsync(int) __asm("_" "fsync" );

int ftruncate(int, off_t);
int getlogin_r(char *, size_t);

# 623 "/usr/include/unistd.h" 3 4

int fchown(int, uid_t, gid_t);
int gethostname(char *, size_t);
ssize_t readlink(const char * restrict, char * restrict, size_t);
int setegid(gid_t);
int seteuid(uid_t);
int symlink(const char *, const char *);

# 5 "/Users/weugene/basilisk/src/grid/fpe.h" 2


# 6 "/Users/weugene/basilisk/src/grid/fpe.h"
static int gdb()
{
  if (last_point.level >= 0) {
    debug (last_point);
    fputc ('\n', 
# 10 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
                __stderrp
# 10 "/Users/weugene/basilisk/src/grid/fpe.h"
                         );
    fflush (
# 11 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
           __stderrp
# 11 "/Users/weugene/basilisk/src/grid/fpe.h"
                    );
  }
  char command[80];
  
# 14 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
 __builtin___sprintf_chk (
# 14 "/Users/weugene/basilisk/src/grid/fpe.h"
 command
# 14 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
 , 0, __builtin_object_size (
# 14 "/Users/weugene/basilisk/src/grid/fpe.h"
 command
# 14 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
 , 2 > 1 ? 1 : 0), 
# 14 "/Users/weugene/basilisk/src/grid/fpe.h"
 "exec xterm -e 'gdb -p %d' & xterm -e 'gnuplot plot -'", getpid()
# 14 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
 )
             
# 15 "/Users/weugene/basilisk/src/grid/fpe.h"
            ;
  return system (command);
}

static void caught_abort (int sig)
{
  fprintf (
# 21 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
          __stderrp
# 21 "/Users/weugene/basilisk/src/grid/fpe.h"
                   , "Caught signal %d (Aborted)\n", sig);
  gdb();
}

static void caught_fpe (int sig)
{
  fprintf (
# 27 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
          __stderrp
# 27 "/Users/weugene/basilisk/src/grid/fpe.h"
                   , "Caught signal %d (Floating Point Exception)\n", sig);
  gdb();
  exit (1);
}

static void caught_segfault (int sig)
{
  fprintf (
# 34 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
          __stderrp
# 34 "/Users/weugene/basilisk/src/grid/fpe.h"
                   , "Caught signal %d (Segmentation Fault)\n", sig);
  gdb();
  exit (2);
}

void catch_fpe (void)
{
  struct sigaction act;
  act.
# 42 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
     __sigaction_u.__sa_handler 
# 42 "/Users/weugene/basilisk/src/grid/fpe.h"
                = caught_fpe;
  
# 43 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
 (*(
# 43 "/Users/weugene/basilisk/src/grid/fpe.h"
 &act.sa_mask
# 43 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
 ) = 0, 0)
# 43 "/Users/weugene/basilisk/src/grid/fpe.h"
                           ;
  act.sa_flags = 0;
  last_point.level = -1;
  sigaction (8, &act, 
# 46 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
                     ((void *)0)
# 46 "/Users/weugene/basilisk/src/grid/fpe.h"
                         );
  act.
# 47 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
     __sigaction_u.__sa_handler 
# 47 "/Users/weugene/basilisk/src/grid/fpe.h"
                = caught_segfault;
  sigaction (11, &act, 
# 48 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
                      ((void *)0)
# 48 "/Users/weugene/basilisk/src/grid/fpe.h"
                          );
  act.
# 49 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
     __sigaction_u.__sa_handler 
# 49 "/Users/weugene/basilisk/src/grid/fpe.h"
                = caught_abort;
  act.sa_flags = 
# 50 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
                0x0004
# 50 "/Users/weugene/basilisk/src/grid/fpe.h"
                            ;
  sigaction (6, &act, 
# 51 "/Users/weugene/basilisk/src/grid/fpe.h" 3 4
                     ((void *)0)
# 51 "/Users/weugene/basilisk/src/grid/fpe.h"
                         );
}
# 35 "/Users/weugene/basilisk/src/grid/cartesian-common.h"



scalar new_scalar (const char * name)
{
  int nvar = datasize/sizeof(double);
  scalar s;
  for (s.i = 0; s.i < nvar; s.i++)
    if (!list_lookup (all, s)) {
      init_scalar (s, name);
      ;
      all = list_append (all, s);
      return s;
    }


  
# 51 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
 (__builtin_expect(!(
# 51 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 nvar < 65536
# 51 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/cartesian-common.h", 51, 
# 51 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 "nvar < _NVARMAX"
# 51 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
 ) : (void)0)
# 51 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                         ;
  datasize += sizeof(double); nvar++;
  _attribute = (_Attributes *) realloc(_attribute,(nvar)*sizeof(_Attributes));
  
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
 __builtin___memset_chk (
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 &_attribute[nvar-1]
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
 , 
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 0, sizeof (_Attributes)
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
 , __builtin_object_size (
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 &_attribute[nvar-1]
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
 , 0))
# 54 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                      ;
  s = (scalar){nvar - 1};
  realloc_scalar();
  init_scalar (s, name);
  ;
  all = list_append (all, s);
  return s;
}

scalar new_vertex_scalar (const char * name)
{
  return init_vertex_scalar (new_scalar (name), name);
}

static vector alloc_vector (const char * name)
{
  vector v;
  char cname[strlen(name) + 3];
  struct { char * x, * y, * z; } ext = {"%s.x", "%s.y", "%s.z"};
  {
# 73 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   ext.x, name
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                               ;
    v.x = new_scalar (cname);
  }
# 73 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   ext.y, name
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 74 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                               ;
    v.y = new_scalar (cname);
  }}
  return v;
}

vector new_vector (const char * name)
{
  vector v = alloc_vector (name);
  init_vector (v, 
# 83 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 83 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                     );
  return v;
}

vector new_face_vector (const char * name)
{
  vector v = alloc_vector (name);
  init_face_vector (v, 
# 90 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                      ((void *)0)
# 90 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                          );
  return v;
}

tensor new_tensor (const char * name)
{
  char cname[strlen(name) + 3];
  struct { char * x, * y, * z; } ext = {"%s.x", "%s.y", "%s.z"};
  tensor t;
  {
# 99 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   ext.x, name
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                               ;
    t.x = new_vector (cname);
  }
# 99 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   ext.y, name
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 100 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                               ;
    t.y = new_vector (cname);
  }}
  init_tensor (t, 
# 103 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 103 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                     );
  return t;
}

tensor new_symmetric_tensor (const char * name)
{
  char cname[strlen(name) + 5];
  struct { char * x, * y, * z; } ext = {"%s.x.x", "%s.y.y", "%s.z.z"};
  tensor t;
  {
# 112 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   ext.x, name
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                               ;
    t.x.x = new_scalar(cname);
  }
# 112 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   ext.y, name
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 113 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                               ;
    t.y.y = new_scalar(cname);
  }}

    
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   cname
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   "%s.x.y", name
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 117 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                  ;
    t.x.y = new_scalar(cname);
    t.y.x = t.x.y;
# 132 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
  init_tensor (t, 
# 132 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 132 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                     );
  return t;
}

static int nconst = 0;

void init_const_scalar (scalar s, const char * name, double val)
{
  if (s.i - 65536 >= nconst) {
    nconst = s.i - 65536 + 1;
    _constant = (double *) realloc(_constant,(nconst)*sizeof(double));
  }
  _constant[s.i - 65536] = val;
}

scalar new_const_scalar (const char * name, int i, double val)
{
  scalar s = (scalar){i + 65536};
  init_const_scalar (s, name, val);
  return s;
}

void init_const_vector (vector v, const char * name, double * val)
{
  {
# 156 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

    init_const_scalar (v.x, name, *val++);
# 156 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

    init_const_scalar (v.y, name, *val++);}
}

vector new_const_vector (const char * name, int i, double * val)
{
  vector v;
  {
# 163 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

    v.x.i = 65536 + i++;
# 163 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

    v.y.i = 65536 + i++;}
  init_const_vector (v, name, val);
  return v;
}

void scalar_clone (scalar a, scalar b)
{
  char * name = _attribute[a.i].name;
  double (** boundary) (Point, Point, scalar, void *) = _attribute[a.i].boundary;
  double (** boundary_homogeneous) (Point, Point, scalar, void *) =
    _attribute[a.i].boundary_homogeneous;
  _attribute[a.i] = _attribute[b.i];
  _attribute[a.i].name = name;
  _attribute[a.i].boundary = boundary;
  _attribute[a.i].boundary_homogeneous = boundary_homogeneous;
  for (int i = 0; i < nboundary; i++) {
    _attribute[a.i].boundary[i] = _attribute[b.i].boundary[i];
    _attribute[a.i].boundary_homogeneous[i] = _attribute[b.i].boundary_homogeneous[i];
  }
}

scalar * list_clone (scalar * l)
{
  scalar * list = 
# 187 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                 ((void *)0)
# 187 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                     ;
  int nvar = datasize/sizeof(double), map[nvar];
  for (int i = 0; i < nvar; i++)
    map[i] = -1;
  if (l) for (scalar s = *l, *_i25 = l; ((scalar *)&s)->i >= 0; s = *++_i25) {
    scalar c = new_scalar("c");
    scalar_clone (c, s);
    map[s.i] = c.i;
    list = list_append (list, c);
  }
  if (list) for (scalar s = *list, *_i26 = list; ((scalar *)&s)->i >= 0; s = *++_i26)
    {
# 198 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

      if (_attribute[s.i].v.x.i >= 0 && map[_attribute[s.i].v.x.i] >= 0)
 _attribute[s.i].v.x.i = map[_attribute[s.i].v.x.i];
# 198 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

      if (_attribute[s.i].v.y.i >= 0 && map[_attribute[s.i].v.y.i] >= 0)
 _attribute[s.i].v.y.i = map[_attribute[s.i].v.y.i];}
  return list;
}

void delete (scalar * list)
{
  if (all == 
# 206 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
            ((void *)0)
# 206 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                )
    return;

  if (list) for (scalar f = *list, *_i27 = list; ((scalar *)&f)->i >= 0; f = *++_i27) {
    if (_attribute[f.i].delete)
      _attribute[f.i].delete (f);
    free(_attribute[f.i].name); _attribute[f.i].name = 
# 212 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                   ((void *)0)
# 212 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                                       ;
    free(_attribute[f.i].boundary); _attribute[f.i].boundary = 
# 213 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                           ((void *)0)
# 213 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                                               ;
    free(_attribute[f.i].boundary_homogeneous); _attribute[f.i].boundary_homogeneous = 
# 214 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                                                   ((void *)0)
# 214 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                                                                       ;
  }

  if (list == all) {
    all[0].i = -1;
    return;
  }

  ;
  if (list) for (scalar f = *list, *_i28 = list; ((scalar *)&f)->i >= 0; f = *++_i28) {
    scalar * s = all;
    for (; s->i >= 0 && s->i != f.i; s++);
    if (s->i == f.i)
      for (; s->i >= 0; s++)
 s[0] = s[1];
  }
}

typedef void (* free_solver_func) (void);

static Array * free_solver_funcs = 
# 234 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                  ((void *)0)
# 234 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                      ;

void free_solver_func_add (free_solver_func func)
{
  if (!free_solver_funcs)
    free_solver_funcs = array_new();
  array_append (free_solver_funcs, &func, sizeof(free_solver_func));
}

void free_solver()
{
  if (free_solver_funcs) {
    free_solver_func * a = (free_solver_func *) free_solver_funcs->p;
    for (int i = 0; i < free_solver_funcs->len/sizeof(free_solver_func); i++)
      a[i] ();
    array_free (free_solver_funcs);
  }

  delete (all);
  free(all); all = 
# 253 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                               ((void *)0)
# 253 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                   ;
  for (Event * ev = Events; !ev->last; ev++) {
    Event * e = ev->next;
    while (e) {
      Event * next = e->next;
      free(e);
      e = next;
    }
  }

  free(Events); Events = 
# 263 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                     ((void *)0)
# 263 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                         ;
  free(_attribute); _attribute = 
# 264 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                             ((void *)0)
# 264 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                 ;
  free(_constant); _constant = 
# 265 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                           ((void *)0)
# 265 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                               ;
  free_grid();
  qpclose_all();
# 277 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
}



void (* boundary_level) (scalar *, int l);
void (* boundary_flux) (vector *);


void boundary (scalar * list)
{ ;
  if (list == 
# 287 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
             ((void *)0)
# 287 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                 )
    { ; ; return; }
  vector * listf = 
# 289 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                  ((void *)0)
# 289 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                      ;
  if (list) for (scalar s = *list, *_i29 = list; ((scalar *)&s)->i >= 0; s = *++_i29)
    if (!((s).i >= 65536) && _attribute[s.i].face)
      listf = vectors_add (listf, _attribute[s.i].v);
  if (listf) {
    boundary_flux (listf);
    free(listf);
  }
  boundary_level (list, -1);
 ; }

void cartesian_boundary_level (scalar * list, int l)
{
  { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, l); };
}

void cartesian_boundary_flux (vector * list)
{

}

static double symmetry (Point point, Point neighbor, scalar s, void * data)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 311 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

  return ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i];
}

static double antisymmetry (Point point, Point neighbor, scalar s, void * data)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 316 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

  return -((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i];
}

double (* default_scalar_bc[]) (Point, Point, scalar, void *) = {
  symmetry, symmetry, symmetry, symmetry, symmetry, symmetry
};

scalar cartesian_init_scalar (scalar s, const char * name)
{

  char * pname;
  if (name) {
    free(_attribute[s.i].name);
    pname = strdup(name);
  }
  else
    pname = _attribute[s.i].name;
  free(_attribute[s.i].boundary);
  free(_attribute[s.i].boundary_homogeneous);

  _attribute[s.i] = (const _Attributes){0};
  _attribute[s.i].name = pname;

  _attribute[s.i].boundary = (double (**)(Point, Point, scalar, void *))
    malloc(nboundary*sizeof (void (*)()));
  _attribute[s.i].boundary_homogeneous = (double (**)(Point, Point, scalar, void *))
    malloc(nboundary*sizeof (void (*)()));
  for (int b = 0; b < nboundary; b++)
    _attribute[s.i].boundary[b] = _attribute[s.i].boundary_homogeneous[b] =
      b < 2*2 ? default_scalar_bc[b] : symmetry;
  _attribute[s.i].gradient = 
# 347 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                            ((void *)0)
# 347 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                ;
  {
# 348 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[s.i].d.x = 0;
    _attribute[s.i].v.x.i = -1;
  }
# 348 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[s.i].d.y = 0;
    _attribute[s.i].v.y.i = -1;
  }}
  _attribute[s.i].face = 
# 352 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                        0
# 352 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                             ;
  return s;
}

scalar cartesian_init_vertex_scalar (scalar s, const char * name)
{
  {
# 358 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

    _attribute[s.i].d.x = -1;
# 358 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

    _attribute[s.i].d.y = -1;}
  for (int d = 0; d < nboundary; d++)
    _attribute[s.i].boundary[d] = _attribute[s.i].boundary_homogeneous[d] = 
# 361 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                                           ((void *)0)
# 361 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                               ;
  return s;
}

double (* default_vector_bc[]) (Point, Point, scalar, void *) = {
  antisymmetry, antisymmetry,
  antisymmetry, antisymmetry,
  antisymmetry, antisymmetry
};

vector cartesian_init_vector (vector v, const char * name)
{
  struct { char * x, * y, * z; } ext = {".x", ".y", ".z"};
  {
# 374 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     __builtin___sprintf_chk (
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 0, __builtin_object_size (
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 2 > 1 ? 1 : 0), 
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     "%s%s", name, ext.x
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     )
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                         ;
      init_scalar (v.x, cname);
    }
    else
      init_scalar (v.x, 
# 381 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 381 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                           );
    _attribute[v.x.i].v = v;
  }
# 374 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     __builtin___sprintf_chk (
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 0, __builtin_object_size (
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 2 > 1 ? 1 : 0), 
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     "%s%s", name, ext.y
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     )
# 377 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                         ;
      init_scalar (v.y, cname);
    }
    else
      init_scalar (v.y, 
# 381 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 381 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                           );
    _attribute[v.y.i].v = v;
  }}

  for (int d = 0; d < nboundary; d++)
    _attribute[v.x.i].boundary[d] = _attribute[v.x.i].boundary_homogeneous[d] =
      d < 2*2 ? default_vector_bc[d] : antisymmetry;
  return v;
}

vector cartesian_init_face_vector (vector v, const char * name)
{
  v = cartesian_init_vector (v, name);
  {
# 394 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[v.x.i].d.x = -1;
    _attribute[v.x.i].face = 
# 396 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                            1
# 396 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                ;
  }
# 394 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    _attribute[v.y.i].d.y = -1;
    _attribute[v.y.i].face = 
# 396 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                            1
# 396 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                ;
  }}
  for (int d = 0; d < nboundary; d++)
    _attribute[v.x.i].boundary[d] = _attribute[v.x.i].boundary_homogeneous[d] = 
# 399 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                                               ((void *)0)
# 399 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                                   ;
  return v;
}

tensor cartesian_init_tensor (tensor t, const char * name)
{
  struct { char * x, * y, * z; } ext = {".x", ".y", ".z"};
  {
# 406 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     __builtin___sprintf_chk (
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 0, __builtin_object_size (
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 2 > 1 ? 1 : 0), 
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     "%s%s", name, ext.x
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     )
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                         ;
      init_vector (t.x, cname);
    }
    else
      init_vector (t.x, 
# 413 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 413 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                           );
  }
# 406 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    if (name) {
      char cname[strlen(name) + 3];
      
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     __builtin___sprintf_chk (
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 0, __builtin_object_size (
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     cname
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     , 2 > 1 ? 1 : 0), 
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
     "%s%s", name, ext.y
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
     )
# 409 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                         ;
      init_vector (t.y, cname);
    }
    else
      init_vector (t.y, 
# 413 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                       ((void *)0)
# 413 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                           );
  }}






    for (int b = 0; b < nboundary; b++) {
      _attribute[t.x.x.i].boundary[b] = _attribute[t.y.x.i].boundary[b] =
 _attribute[t.x.x.i].boundary_homogeneous[b] = _attribute[t.y.y.i].boundary_homogeneous[b] =
 b < 2*2 ? default_scalar_bc[b] : symmetry;
      _attribute[t.x.y.i].boundary[b] = _attribute[t.y.y.i].boundary[b] =
 _attribute[t.x.y.i].boundary_homogeneous[b] = _attribute[t.y.x.i].boundary_homogeneous[b] =
 b < 2*2 ? default_vector_bc[b] : antisymmetry;
    }



  return t;
}

struct OutputCells {
  FILE * fp;
  coord c;
  double size;
};

void output_cells (struct OutputCells p)
{
  if (!p.fp) p.fp = 
# 443 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                   __stdoutp
# 443 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                            ;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 444 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 {
    
# 445 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   _Bool 
# 445 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
        inside = 
# 445 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                 1
# 445 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                     ;
    coord o = {x,y,z};
    {
# 447 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

      if (inside && p.size > 0. &&
   (o.x > p.c.x + p.size || o.x < p.c.x - p.size))
 inside = 
# 450 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
         0
# 450 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
              ;
# 447 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

      if (inside && p.size > 0. &&
   (o.y > p.c.y + p.size || o.y < p.c.y - p.size))
 inside = 
# 450 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
         0
# 450 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
              ;}
    if (inside) {
      Delta /= 2.;



      fprintf (p.fp, "%g %g\n%g %g\n%g %g\n%g %g\n%g %g\n\n",
        x - Delta, y - Delta,
        x - Delta, y + Delta,
        x + Delta, y + Delta,
        x + Delta, y - Delta,
        x - Delta, y - Delta);
# 476 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
    }
  } } } } }; }
  fflush (p.fp);
}
# 488 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
static char * replace_ (const char * vname)
{
  char * name = strdup(vname), * c = name;
  while (*c != '\0') {
    if (*c == '.')
      *c = '_';
    c++;
  }
  return name;
}

static void debug_plot (FILE * fp, const char * name, const char * cells,
   const char * stencil)
{
  char * vname = replace_ (name);
  fprintf (fp,
    "  load 'debug.plot'\n"
    "  v=%s\n"




    "  plot '%s' w l lc 0, "
    "'%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 1 title columnhead(3+3*v)",





    vname, cells, stencil);
  free(vname);
}

void cartesian_debug (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 522 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

  char name[80] = "cells";
  if (0 > 0)
    
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   name
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   name
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   "cells-%d", 0
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 525 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                    ;
  FILE * fp = fopen (name, "w");
  output_cells ((struct OutputCells){fp, (coord){x,y,z}, 4.*Delta});
  fclose (fp);

  char stencil[80] = "stencil";
  if (0 > 0)
    
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   __builtin___sprintf_chk (
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   stencil
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 0, __builtin_object_size (
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   stencil
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   , 2 > 1 ? 1 : 0), 
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   "stencil-%d", 0
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   )
# 532 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                         ;
  fp = fopen (stencil, "w");
  if (all) for (scalar v = *all, *_i30 = all; ((scalar *)&v)->i >= 0; v = *++_i30)



    fprintf (fp, "x y %s ", _attribute[v.i].name);



  fputc ('\n', fp);
# 555 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
    for (int k = -2; k <= 2; k++)
      for (int l = -2; l <= 2; l++) {
 if (all) for (scalar v = *all, *_i31 = all; ((scalar *)&v)->i >= 0; v = *++_i31) {
   fprintf (fp, "%g %g ",
     x + k*Delta + _attribute[v.i].d.x*Delta/2.,
     y + l*Delta + _attribute[v.i].d.y*Delta/2.);
   if ((point.i+k >= 0 && point.i+k < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+k] && point.j+l >= 0 && point.j+l < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+k][point.j+l]))
     fprintf (fp, "%g ", ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+k][point.j+l]) + sizeof(Cell)))[v.i]);
   else
     fputs ("n/a ", fp);
 }
 fputc ('\n', fp);
      }
# 585 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
  fclose (fp);

  fp = fopen ("debug.plot", "w");
  fprintf (fp,
    "set term x11\n"
    "set size ratio -1\n"
    "set key outside\n");
  if (all) for (scalar s = *all, *_i32 = all; ((scalar *)&s)->i >= 0; s = *++_i32) {
    char * name = replace_ (_attribute[s.i].name);
    fprintf (fp, "%s = %d\n", name, s.i);
    free(name);
  }
  fclose (fp);

  fprintf (
# 599 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
          __stderrp
# 599 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                   , "Last point stencils can be displayed using (in gnuplot)\n");
  debug_plot (
# 600 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
             __stderrp
# 600 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                      , _attribute[0].name, name, stencil);
  fflush (
# 601 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
         __stderrp
# 601 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                  );

  fp = fopen ("plot", "w");
  debug_plot (fp, _attribute[0].name, name, stencil);
  fclose (fp);
}

void cartesian_methods()
{
  init_scalar = cartesian_init_scalar;
  init_vertex_scalar = cartesian_init_vertex_scalar;
  init_vector = cartesian_init_vector;
  init_tensor = cartesian_init_tensor;
  init_face_vector = cartesian_init_face_vector;
  boundary_level = cartesian_boundary_level;
  boundary_flux = cartesian_boundary_flux;
  debug = cartesian_debug;
}

struct _interpolate {
  scalar v;
  double x, y, z;
};

static double interpolate_linear (Point point, struct _interpolate p)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 626 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

  scalar v = p.v;







  x = (p.x - x)/Delta - _attribute[v.i].d.x/2.;
  y = (p.y - y)/Delta - _attribute[v.i].d.y/2.;
  int i = ((x) > 0 ? 1 : -1), j = ((y) > 0 ? 1 : -1);
  x = fabs(x); y = fabs(y);

  return ((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.i]*(1. - x) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0]) + sizeof(Cell)))[v.i]*x)*(1. - y) +
   (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+j]) + sizeof(Cell)))[v.i]*(1. - x) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]) + sizeof(Cell)))[v.i]*x)*y);
# 654 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
}


double interpolate (struct _interpolate p)
{ ;
  Point point = locate ((struct _locate){p.x, p.y, p.z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 659 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

  if (point.level < 0)
    { double _ret = ((double)1e30); ; return _ret; }
  { double _ret = interpolate_linear (point, p); ; return _ret; }
 ; }


void interpolate_array (scalar * list, coord * a, int n, double * v, 
# 666 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                                    _Bool 
# 666 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                         linear)
{ ;
  int j = 0;
  for (int i = 0; i < n; i++) {
    Point point = locate ((struct _locate){a[i].x, a[i].y, a[i].z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 670 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

    if (point.level >= 0) {
      if (list) for (scalar s = *list, *_i33 = list; ((scalar *)&s)->i >= 0; s = *++_i33)
 v[j++] = !linear ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] :
   interpolate_linear (point,
         (struct _interpolate){s, a[i].x, a[i].y, a[i].z});
    }
    else
      if (list) for (scalar s = *list, *_i34 = list; ((scalar *)&s)->i >= 0; s = *++_i34)
 v[j++] = ((double)1e30);
  }
# 689 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
 ; }



typedef int bid;

bid new_bid()
{
  int b = nboundary++;
  if (all) for (scalar s = *all, *_i35 = all; ((scalar *)&s)->i >= 0; s = *++_i35) {
    _attribute[s.i].boundary = (double (**)(Point, Point, scalar, void *))
      realloc(_attribute[s.i].boundary,nboundary*sizeof (void (*)()));
    _attribute[s.i].boundary_homogeneous = (double (**)(Point, Point, scalar, void *))
      realloc(_attribute[s.i].boundary_homogeneous,nboundary*sizeof (void (*)()));
  }
  if (all) for (scalar s = *all, *_i36 = all; ((scalar *)&s)->i >= 0; s = *++_i36) {
    if (_attribute[s.i].v.x.i < 0)
      _attribute[s.i].boundary[b] = _attribute[s.i].boundary_homogeneous[b] = symmetry;
    else if (_attribute[s.i].v.x.i == s.i) {
      vector v = _attribute[s.i].v;
      {
# 709 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

 _attribute[v.y.i].boundary[b] = _attribute[v.y.i].boundary_homogeneous[b] = symmetry;
# 709 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

 _attribute[v.x.i].boundary[b] = _attribute[v.x.i].boundary_homogeneous[b] = symmetry;}
      _attribute[v.x.i].boundary[b] = _attribute[v.x.i].boundary_homogeneous[b] =
 _attribute[v.x.i].face ? 
# 712 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                         ((void *)0) 
# 712 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                              : antisymmetry;
    }
  }
  return b;
}



static double periodic_bc (Point point, Point neighbor, scalar s, void * data)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 721 "/Users/weugene/basilisk/src/grid/cartesian-common.h"

  return ((double)1e30);
}

static void periodic_boundary (int d)
{

  if (all) for (scalar s = *all, *_i37 = all; ((scalar *)&s)->i >= 0; s = *++_i37)
    _attribute[s.i].boundary[d] = _attribute[s.i].boundary_homogeneous[d] = periodic_bc;

  if (all) for (scalar s = *all, *_i38 = all; ((scalar *)&s)->i >= 0; s = *++_i38)
    if (_attribute[s.i].face) {
      vector v = _attribute[s.i].v;
      _attribute[v.x.i].boundary[d] = _attribute[v.x.i].boundary_homogeneous[d] = 
# 734 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                                                                                 ((void *)0)
# 734 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                                                                                     ;
    }

  default_scalar_bc[d] = periodic_bc;
  default_vector_bc[d] = periodic_bc;
}

void periodic (int dir)
{



    
# 746 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   (__builtin_expect(!(
# 746 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   dir <= bottom
# 746 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/cartesian-common.h", 746, 
# 746 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
   "dir <= bottom"
# 746 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
   ) : (void)0)
# 746 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                         ;




  int c = dir/2;
  periodic_boundary (2*c);
  periodic_boundary (2*c + 1);
  (&Period.x)[c] = 
# 754 "/Users/weugene/basilisk/src/grid/cartesian-common.h" 3 4
                  1
# 754 "/Users/weugene/basilisk/src/grid/cartesian-common.h"
                      ;
}
# 4 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
# 24 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
void (* restriction) (scalar *);

static inline void restriction_average (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 27 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  double sum = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i]; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = sum/(1 << 2);
}

static inline void restriction_volume_average (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 35 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

if (!((cm).i >= 65536)) {
# 35 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  double sum = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i]*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i]; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = sum/(1 << 2)/(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i] + 1e-30);
 }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 35 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  double sum = 0.;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    sum += _const_cm*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i]; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = sum/(1 << 2)/(_const_cm + 1e-30);
 }}

static inline void face_average (Point point, vector v)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 43 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  {
# 44 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 {




      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0]) + sizeof(Cell)))[v.x.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1]) + sizeof(Cell)))[v.x.i])/2.;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0]) + sizeof(Cell)))[v.x.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1]) + sizeof(Cell)))[v.x.i])/2.;






  }
# 44 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 {




      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0]) + sizeof(Cell)))[v.y.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0]) + sizeof(Cell)))[v.y.i])/2.;
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2]) + sizeof(Cell)))[v.y.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2]) + sizeof(Cell)))[v.y.i])/2.;






  }}
}

static inline void restriction_face (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 61 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  face_average (point, _attribute[s.i].v);
}

static inline void restriction_vertex (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 66 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  for (int i = 0; i <= 1; i++) {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0]) + sizeof(Cell)))[s.i] = ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +0]) + sizeof(Cell)))[s.i];

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1]) + sizeof(Cell)))[s.i] = ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +2]) + sizeof(Cell)))[s.i];





  }
}

static inline void no_restriction (Point point, scalar s) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 78 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
}

static inline void no_data (Point point, scalar s) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 81 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = ((double)1e30); } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
}

void wavelet (scalar s, scalar w)
{
  restriction (((scalar []){s,{-1}}));
  for (int l = (grid->depth) - 1; l >= 0; l--) {
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {{
# 90 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 {
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[w.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i]; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
      _attribute[s.i].prolongation (point, s);
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
        double sp = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i];
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[w.i];

        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[w.i] -= sp;
      } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
    } } } } } }; }}; }
    boundary_level (((scalar []){w,{-1}}), l + 1);
  }

   { { if (0 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[0]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = 0; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 104 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[w.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i]; } } } }; }}; }
  boundary_level (((scalar []){w,{-1}}), 0);
}

void inverse_wavelet (scalar s, scalar w)
{
   { { if (0 <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[0]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = 0; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 111 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[w.i]; } } } }; }}; }
  boundary_level (((scalar []){s,{-1}}), 0);
  for (int l = 0; l <= (grid->depth) - 1; l++) {
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {{
# 115 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 {
      _attribute[s.i].prolongation (point, s);
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
        ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[w.i]; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
    } } } } } }; }}; }
    boundary_level (((scalar []){s,{-1}}), l + 1);
  }
}

static inline double bilinear (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 125 "/Users/weugene/basilisk/src/grid/multigrid-common.h"




    return (9.*((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0]) + sizeof(Cell)))[s.i] +
     3.*(((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+0]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+child.y]) + sizeof(Cell)))[s.i]) +
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+child.y]) + sizeof(Cell)))[s.i])/16.;
# 140 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
}

static inline void refine_bilinear (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 143 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = bilinear (point, s); } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
}

static inline double quadratic (double a, double b, double c)
{
  return (30.*a + 5.*b - 3.*c)/32.;
}

static inline double biquadratic (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 154 "/Users/weugene/basilisk/src/grid/multigrid-common.h"




  return
    quadratic (quadratic (((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0]) + sizeof(Cell)))[s.i],
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+0]) + sizeof(Cell)))[s.i],
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+-child.x] [(point.j+2)/2+0]) + sizeof(Cell)))[s.i]),
        quadratic (((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+child.y]) + sizeof(Cell)))[s.i],
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+child.y]) + sizeof(Cell)))[s.i],
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+-child.x] [(point.j+2)/2+child.y]) + sizeof(Cell)))[s.i]),
        quadratic (((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+-child.y]) + sizeof(Cell)))[s.i],
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+child.x] [(point.j+2)/2+-child.y]) + sizeof(Cell)))[s.i],
     ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+-child.x] [(point.j+2)/2+-child.y]) + sizeof(Cell)))[s.i]));




}

static inline double biquadratic_vertex (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 175 "/Users/weugene/basilisk/src/grid/multigrid-common.h"




  return (36.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] + 18.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i]) - 6.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i]) +
   9.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1]) + sizeof(Cell)))[s.i] - 3.*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1]) + sizeof(Cell)))[s.i]) + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1]) + sizeof(Cell)))[s.i])/64.;




}

static inline void refine_biquadratic (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 188 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = biquadratic (point, s); } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
}

static inline void refine_linear (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 194 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

if (!((cm).i >= 65536)) {
# 194 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  coord g;
  if (_attribute[s.i].gradient)
    {
# 197 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.x = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i]);
# 197 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.y = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i]);}
  else
    {
# 200 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i])/2.;
# 200 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i])/2.;}

  double sc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], cmc = 4.*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i], sum = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i]*(1 << 2);
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = sc;
    {
# 206 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] += child.x*g.x*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-child.x][point.j+0]) + sizeof(Cell)))[cm.i]/cmc;
# 206 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] += child.y*g.y*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-child.y]) + sizeof(Cell)))[cm.i]/cmc;}
    sum -= ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i];
  } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
 (__builtin_expect(!(
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 fabs(sum) < 1e-10
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/multigrid-common.h", 210, 
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 "fabs(sum) < 1e-10"
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
 ) : (void)0)
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                           ;
 }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 194 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  coord g;
  if (_attribute[s.i].gradient)
    {
# 197 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.x = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i]);
# 197 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.y = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i]);}
  else
    {
# 200 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.x = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i])/2.;
# 200 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      g.y = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i])/2.;}

  double sc = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], cmc = 4.*_const_cm, sum = _const_cm*(1 << 2);
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = sc;
    {
# 206 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] += child.x*g.x*_const_cm/cmc;
# 206 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] += child.y*g.y*_const_cm/cmc;}
    sum -= _const_cm;
  } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
  
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
 (__builtin_expect(!(
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 fabs(sum) < 1e-10
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/multigrid-common.h", 210, 
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 "fabs(sum) < 1e-10"
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
 ) : (void)0)
# 210 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                           ;
 }}

static inline void refine_reset (Point point, scalar v)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 214 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.i] = 0.; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
}

static inline void refine_injection (Point point, scalar v)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 220 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  double val = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.i];
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.i] = val; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
}

static scalar multigrid_init_scalar (scalar s, const char * name)
{
  s = cartesian_init_scalar (s, name);
  _attribute[s.i].prolongation = refine_bilinear;
  _attribute[s.i].restriction = restriction_average;
  return s;
}

static scalar multigrid_init_vertex_scalar (scalar s, const char * name)
{
  s = cartesian_init_vertex_scalar (s, name);
  _attribute[s.i].restriction = restriction_vertex;
  return s;
}

static vector multigrid_init_face_vector (vector v, const char * name)
{
  v = cartesian_init_face_vector (v, name);
  {
# 244 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

    _attribute[v.y.i].restriction = no_restriction;
# 244 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

    _attribute[v.x.i].restriction = no_restriction;}
  _attribute[v.x.i].restriction = restriction_face;
  return v;
}

void multigrid_debug (Point point)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 251 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

  cartesian_debug (point);

  FILE * plot = fopen ("plot", "a");
  if (point.level > 0) {
    char name[80] = "coarse";
    if (0 > 0)
      
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     __builtin___sprintf_chk (
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
     name
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     , 0, __builtin_object_size (
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
     name
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     , 2 > 1 ? 1 : 0), 
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
     "coarse-%d", 0
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     )
# 258 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                                       ;
    FILE * fp = fopen (name, "w");
# 271 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
      double xc = x - child.x*Delta/2., yc = y - child.y*Delta/2.;
      for (int k = 0; k <= 1; k++)
 for (int l = 0; l <= 1; l++) {
   if (all) for (scalar v = *all, *_i39 = all; ((scalar *)&v)->i >= 0; v = *++_i39)
     fprintf (fp, "%g %g %g ",
       xc + k*child.x*Delta*2. + _attribute[v.i].d.x*Delta,
       yc + l*child.y*Delta*2. + _attribute[v.i].d.y*Delta,
       ((double *) ((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k*child.x] [(point.j+2)/2+l*child.y]) + sizeof(Cell)))[v.i]);
   fputc ('\n', fp);
 }
      fprintf (
# 281 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
              __stderrp
# 281 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                       , ", '%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 3 t ''", name);
      fprintf (plot, ", '%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 3 t ''", name);
# 302 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
    fclose (fp);
  }

  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).neighbors > 0)) {
    char name[80] = "fine";
    if (0 > 0)
      
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     __builtin___sprintf_chk (
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
     name
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     , 0, __builtin_object_size (
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
     name
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     , 2 > 1 ? 1 : 0), 
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
     "fine-%d", 0
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
     )
# 308 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                                     ;
    FILE * fp = fopen (name, "w");
# 324 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
      double xf = x - Delta/4., yf = y - Delta/4.;
      for (int k = -2; k <= 3; k++)
 for (int l = -2; l <= 3; l++) {
   if (all) for (scalar v = *all, *_i40 = all; ((scalar *)&v)->i >= 0; v = *++_i40) {
     fprintf (fp, "%g %g ",
       xf + k*Delta/2. + _attribute[v.i].d.x*Delta/4.,
       yf + l*Delta/2. + _attribute[v.i].d.y*Delta/4.);
     if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k][2*point.j-2 +l]))
       fprintf (fp, "%g ", ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +k] [2*point.j-2 +l]) + sizeof(Cell)))[v.i]);
     else
       fputs ("n/a ", fp);
   }
   fputc ('\n', fp);
 }
      fprintf (
# 338 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
              __stderrp
# 338 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                       , ", '%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 2 t ''", name);
      fprintf (plot, ", '%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 2 t ''", name);
# 362 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
    fclose (fp);
  }
  fflush (
# 364 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
         __stderrp
# 364 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                  );
  fclose (plot);
}

static void multigrid_restriction (scalar * list)
{
  scalar * listdef = 
# 370 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
                    ((void *)0)
# 370 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                        , * listc = 
# 370 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
                                    ((void *)0)
# 370 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                                        , * list2 = 
# 370 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
                                                    ((void *)0)
# 370 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                                                        ;
  if (list) for (scalar s = *list, *_i41 = list; ((scalar *)&s)->i >= 0; s = *++_i41)
    if (!((s).i >= 65536)) {
      if (_attribute[s.i].restriction == restriction_average) {
 listdef = list_add (listdef, s);
 list2 = list_add (list2, s);
      }
      else if (_attribute[s.i].restriction != no_restriction) {
 listc = list_add (listc, s);
 if (_attribute[s.i].face)
   {
# 380 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

     list2 = list_add (list2, _attribute[s.i].v.x);
# 380 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

     list2 = list_add (list2, _attribute[s.i].v.y);}
 else
   list2 = list_add (list2, s);
      }
    }

  if (listdef || listc) {
    for (int l = (grid->depth) - 1; l >= 0; l--) {
       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {{
# 389 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 {
 if (listdef) for (scalar s = *listdef, *_i42 = listdef; ((scalar *)&s)->i >= 0; s = *++_i42)
   restriction_average (point, s);
 if (listc) for (scalar s = *listc, *_i43 = listc; ((scalar *)&s)->i >= 0; s = *++_i43)
   _attribute[s.i].restriction (point, s);
      } } } } } }; }}; }
      { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list2, l); };
    }
    free(listdef);
    free(listc);
    free(list2);
  }
}

void multigrid_methods()
{
  cartesian_methods();
  debug = multigrid_debug;
  init_scalar = multigrid_init_scalar;
  init_vertex_scalar = multigrid_init_vertex_scalar;
  init_face_vector = multigrid_init_face_vector;
  restriction = multigrid_restriction;
}







void subtree_size (scalar size, 
# 419 "/Users/weugene/basilisk/src/grid/multigrid-common.h" 3 4
                               _Bool 
# 419 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
                                    leaves)
{




   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 425 "/Users/weugene/basilisk/src/grid/multigrid-common.h"

    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[size.i] = 1; } } } }; }





  { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, ((scalar []){size,{-1}}), (grid->depth)); };
  for (int l = (grid->depth) - 1; l >= 0; l--) {
     { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {{
# 434 "/Users/weugene/basilisk/src/grid/multigrid-common.h"
 {
      double sum = !leaves;
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
 sum += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[size.i]; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[size.i] = sum;
    } } } } } }; }}; }
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, ((scalar []){size,{-1}}), l); };
  }
}
# 5 "/Users/weugene/basilisk/src/grid/tree-common.h"
# 21 "/Users/weugene/basilisk/src/grid/tree-common.h"
int refine_cell (Point point, scalar * list, int flag, Cache * refined)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 22 "/Users/weugene/basilisk/src/grid/tree-common.h"

  int nr = 0;


  if (level > 0)
    for (int k = 0; k != 2*child.x; k += child.x)

      for (int l = 0; l != 2*child.y; l += child.y)




   if ((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k] [(point.j+2)/2+l])))).pid >= 0 && (((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k] [(point.j+2)/2+l]))))).flags & leaf)) {
     Point p = point;


     p.level = point.level - 1;
     p.i = (point.i + 2)/2 + k;
     do { if (p.i < 2) p.i += 1 << p.level; else if (p.i >= 2 + (1 << p.level)) p.i -= 1 << p.level; } while(0);

       p.j = (point.j + 2)/2 + l;
       do { if (p.j < 2) p.j += 1 << p.level; else if (p.j >= 2 + (1 << p.level)) p.j -= 1 << p.level; } while(0);





     nr += refine_cell (p, list, flag, refined);
     (*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+k] [(point.j+2)/2+l])))).flags |= flag;
   }



  increment_neighbors (point);

  int cflag = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active) ? (active|leaf) : leaf;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= cflag; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }


  if (list) for (scalar s = *list, *_i44 = list; ((scalar *)&s)->i >= 0; s = *++_i44)
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) || _attribute[s.i].face)
      _attribute[s.i].refine (point, s);


  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~leaf;
# 91 "/Users/weugene/basilisk/src/grid/tree-common.h"
  return nr;
}






# 98 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
_Bool 
# 98 "/Users/weugene/basilisk/src/grid/tree-common.h"
    coarsen_cell (Point point, scalar * list)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 99 "/Users/weugene/basilisk/src/grid/tree-common.h"




  int pid = (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid;
   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors || ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0 && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid != pid))
      return 
# 106 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
            0
# 106 "/Users/weugene/basilisk/src/grid/tree-common.h"
                 ; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }



  if (list) for (scalar s = *list, *_i45 = list; ((scalar *)&s)->i >= 0; s = *++_i45) {
    _attribute[s.i].restriction (point, s);
    if (_attribute[s.i].coarsen)
      _attribute[s.i].coarsen (point, s);
  }


  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= leaf;


  decrement_neighbors (point);
# 133 "/Users/weugene/basilisk/src/grid/tree-common.h"
  return 
# 133 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
        1
# 133 "/Users/weugene/basilisk/src/grid/tree-common.h"
            ;
}

void coarsen_cell_recursive (Point point, scalar * list)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 137 "/Users/weugene/basilisk/src/grid/tree-common.h"



   { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors)
       { { int _nn = 1 + 0 ? 1 + 0 : 2; int _i = point.i, _j = point.j; for (int _k = - _nn; _k <= _nn; _k++) { point.i = _i + _k; for (int _l = - _nn; _l <= _nn; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
 if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid >= 0))
   coarsen_cell_recursive (point, list); } } point.i = _i; point.j = _j;}; } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }

  
# 146 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 (__builtin_expect(!(
# 146 "/Users/weugene/basilisk/src/grid/tree-common.h"
 coarsen_cell (point, list)
# 146 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree-common.h", 146, 
# 146 "/Users/weugene/basilisk/src/grid/tree-common.h"
 "coarsen_cell (point, list)"
# 146 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 ) : (void)0)
# 146 "/Users/weugene/basilisk/src/grid/tree-common.h"
                                    ;
}

void mpi_boundary_refine (scalar *);
void mpi_boundary_coarsen (int, int);
void mpi_boundary_update (scalar *);

typedef struct {
  int nc, nf;
} astats;

struct Adapt {
  scalar * slist;
  double * max;
  int maxlevel;
  int minlevel;
  scalar * list;
};


astats adapt_wavelet (struct Adapt p)
{ ;
  if (p.list == 
# 168 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
               ((void *)0)
# 168 "/Users/weugene/basilisk/src/grid/tree-common.h"
                   )
    p.list = all;
  if (((cm).i >= 65536))
    restriction (p.slist);
  else {
    scalar * listr = list_concat (((scalar []){cm,{-1}}), p.slist);
    restriction (listr);
    free(listr);
  }

  astats st = {0, 0};
  scalar * listc = 
# 179 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 179 "/Users/weugene/basilisk/src/grid/tree-common.h"
                      ;
  if (p.list) for (scalar s = *p.list, *_i46 = p.list; ((scalar *)&s)->i >= 0; s = *++_i46)
    if (!((s).i >= 65536) && _attribute[s.i].restriction != no_restriction)
      listc = list_add (listc, s);


  if (p.minlevel < 1)
    p.minlevel = 1;
  ((Tree *)grid)->refined.n = 0;
  static const int refined = 1 << user, too_fine = 1 << (user + 1);
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 189 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active)) {
      static const int too_coarse = 1 << (user + 2);
      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & too_coarse) {
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_coarse;
   refine_cell (point, listc, refined, &((Tree *)grid)->refined);
   st.nf++;
 }
 continue;
      }
      else {
 if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & refined) {

   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_coarse;
   continue;
 }

 
# 207 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
_Bool 
# 207 "/Users/weugene/basilisk/src/grid/tree-common.h"
     local = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0);
 if (!local)
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
     if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0))
       local = 
# 211 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
              1
# 211 "/Users/weugene/basilisk/src/grid/tree-common.h"
                  , _k = _l = 2; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
 if (local) {
   int i = 0;
   static const int just_fine = 1 << (user + 3);
   if (p.slist) for (scalar s = *p.slist, *_i47 = p.slist; ((scalar *)&s)->i >= 0; s = *++_i47) {
     double max = p.max[i++], sc[1 << 2];
     int c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
       sc[c++] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i]; } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
     _attribute[s.i].prolongation (point, s);
     c = 0;
      { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
       double e = fabs(sc[c] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i]);
       if (e > max && level < p.maxlevel) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= too_coarse;
       }
       else if ((e <= max/1.5 || level > p.maxlevel) &&
         !((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & (too_coarse|just_fine))) {
  if (level >= p.minlevel)
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= too_fine;
       }
       else if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & too_coarse)) {
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_fine;
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= just_fine;
       }
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = sc[c++];
     } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
   }
    { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~just_fine;
     if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_coarse;
       if (level >= p.maxlevel)
  (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= too_fine;
     }
     else if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active))
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_coarse;
   } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }
 }
      }
    }
    else
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  mpi_boundary_refine (listc);



  for (int l = (grid->depth); l >= 0; l--) {
     { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 261 "/Users/weugene/basilisk/src/grid/tree-common.h"

      if (!((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid < 0)) {
 if (level == l) {
   if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {
     if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & refined)

       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~(refined|too_fine);
     else if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & too_fine) {
       if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) && coarsen_cell (point, listc))
  st.nc++;
       (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_fine;
     }
   }
   if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags & too_fine)
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags &= ~too_fine;
   else if (level > 0 && ((*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0])))).flags & too_fine))
     (*((Cell *)((((Tree *)grid)->L[point.level-1]->m[(point.i+2)/2+0] [(point.j+2)/2+0])))).flags &= ~too_fine;
   continue;
 }
 else if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf))
   continue;
      } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
    mpi_boundary_coarsen (l, too_fine);
  }
  free(listc);

  ;
  ;
  if (st.nc || st.nf)
    mpi_boundary_update (p.list);

  { astats _ret = st; ; return _ret; }
 ; }
# 314 "/Users/weugene/basilisk/src/grid/tree-common.h"
static void refine_level (int depth)
{
  int refined;
  do {
    refined = 0;
    ((Tree *)grid)->refined.n = 0;
     { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) { if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0)) {{
# 320 "/Users/weugene/basilisk/src/grid/tree-common.h"

      if (level < depth) {
 refine_cell (point, 
# 322 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                    ((void *)0)
# 322 "/Users/weugene/basilisk/src/grid/tree-common.h"
                        , 0, &((Tree *)grid)->refined);
 refined++;
 continue;
      } } } continue; } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
    ;
    if (refined) {
      mpi_boundary_refine (
# 328 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                          ((void *)0)
# 328 "/Users/weugene/basilisk/src/grid/tree-common.h"
                              );
      mpi_boundary_update (
# 329 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                          ((void *)0)
# 329 "/Users/weugene/basilisk/src/grid/tree-common.h"
                              );
    }
  } while (refined);
}
# 359 "/Users/weugene/basilisk/src/grid/tree-common.h"
static void halo_flux (vector * list)
{
  vector * listv = 
# 361 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 361 "/Users/weugene/basilisk/src/grid/tree-common.h"
                      ;
  if (list) for (vector v = *list, *_i48 = list; ((scalar *)&v)->i >= 0; v = *++_i48)
    if (!((v.x).i >= 65536))
      listv = vectors_add (listv, v);

  if (listv) {
    for (int l = (grid->depth) - 1; l >= 0; l--)
       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 368 "/Users/weugene/basilisk/src/grid/tree-common.h"

 {
# 369 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
# 378 "/Users/weugene/basilisk/src/grid/tree-common.h"
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i49 = listv; ((scalar *)&f)->i >= 0; f = *++_i49)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.x.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0]) + sizeof(Cell)))[f.x.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1]) + sizeof(Cell)))[f.x.i])/2.;
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i50 = listv; ((scalar *)&f)->i >= 0; f = *++_i50)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[f.x.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +0]) + sizeof(Cell)))[f.x.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +1]) + sizeof(Cell)))[f.x.i])/2.;
# 394 "/Users/weugene/basilisk/src/grid/tree-common.h"
      }
# 369 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
# 378 "/Users/weugene/basilisk/src/grid/tree-common.h"
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i49 = listv; ((scalar *)&f)->i >= 0; f = *++_i49)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.y.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0]) + sizeof(Cell)))[f.y.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0]) + sizeof(Cell)))[f.y.i])/2.;
   if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).pid >= 0))
     if (listv) for (vector f = *listv, *_i50 = listv; ((scalar *)&f)->i >= 0; f = *++_i50)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[f.y.i] = (((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +2]) + sizeof(Cell)))[f.y.i] + ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2]) + sizeof(Cell)))[f.y.i])/2.;
# 394 "/Users/weugene/basilisk/src/grid/tree-common.h"
      }} } } } }; }}; }
    free(listv);
  }
}



static scalar tree_init_scalar (scalar s, const char * name)
{
  s = multigrid_init_scalar (s, name);
  _attribute[s.i].refine = _attribute[s.i].prolongation;
  return s;
}

static void prolongation_vertex (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 409 "/Users/weugene/basilisk/src/grid/tree-common.h"


  ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1]) + sizeof(Cell)))[s.i] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+1]) + sizeof(Cell)))[s.i])/4.;





  for (int i = 0; i <= 1; i++) {
    for (int j = 0; j <= 1; j++)



 if ((level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i][2*point.j-2 +2*j]))
   ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +2*j]) + sizeof(Cell)))[s.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+j]) + sizeof(Cell)))[s.i];

    {
# 425 "/Users/weugene/basilisk/src/grid/tree-common.h"

      if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0])))).neighbors) {

 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2*i] [2*point.j-2 +1]) + sizeof(Cell)))[s.i] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+0]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+i][point.j+1]) + sizeof(Cell)))[s.i])/2.;
# 438 "/Users/weugene/basilisk/src/grid/tree-common.h"
      }
# 425 "/Users/weugene/basilisk/src/grid/tree-common.h"

      if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i])))).neighbors) {

 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +2*i]) + sizeof(Cell)))[s.i] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+i]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+i]) + sizeof(Cell)))[s.i])/2.;
# 438 "/Users/weugene/basilisk/src/grid/tree-common.h"
      }}
  }
}

static scalar tree_init_vertex_scalar (scalar s, const char * name)
{
  s = multigrid_init_vertex_scalar (s, name);
  _attribute[s.i].refine = _attribute[s.i].prolongation = prolongation_vertex;
  return s;
}
# 449 "/Users/weugene/basilisk/src/grid/tree-common.h"

static void refine_face_x (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 451 "/Users/weugene/basilisk/src/grid/tree-common.h"

  vector v = _attribute[s.i].v;
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid >= 0) &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[v.x.i])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +j]) + sizeof(Cell)))[v.x.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).pid >= 0) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0])))).neighbors &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+ +1]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1]) + sizeof(Cell)))[v.x.i])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +2] [2*point.j-2 +j]) + sizeof(Cell)))[v.x.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0)) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+ +1]) + sizeof(Cell)))[v.x.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+ +1]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+-1]) + sizeof(Cell)))[v.x.i])/16.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i])/16.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +j]) + sizeof(Cell)))[v.x.i] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i])/2. + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
}
# 449 "/Users/weugene/basilisk/src/grid/tree-common.h"

static void refine_face_y (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 451 "/Users/weugene/basilisk/src/grid/tree-common.h"

  vector v = _attribute[s.i].v;
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid >= 0) &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[v.y.i])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +j] [2*point.j-2 +0]) + sizeof(Cell)))[v.y.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if (!(!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).pid >= 0) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1])))).neighbors &&
      ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) || (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).pid == 0))) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+1]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1]) + sizeof(Cell)))[v.y.i])/8.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i])/8.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +j] [2*point.j-2 +2]) + sizeof(Cell)))[v.y.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i] + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0)) {
    double g1 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+0]) + sizeof(Cell)))[v.y.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+ +1][point.j+1]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+1]) + sizeof(Cell)))[v.y.i])/16.;
    double g2 = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i])/16.;
    for (int j = 0; j <= 1; j++)
      for (int k = 0; k <= 1; k++)
 ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +j] [2*point.j-2 +1]) + sizeof(Cell)))[v.y.i] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i])/2. + (2*j - 1)*g1 + (2*k - 1)*g2;
  }
}

void refine_face (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 479 "/Users/weugene/basilisk/src/grid/tree-common.h"

  vector v = _attribute[s.i].v;
  {
# 481 "/Users/weugene/basilisk/src/grid/tree-common.h"

    _attribute[v.x.i].prolongation (point, v.x);
# 481 "/Users/weugene/basilisk/src/grid/tree-common.h"

    _attribute[v.y.i].prolongation (point, v.y);}
}

void refine_face_solenoidal (Point point, scalar s)
{ int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 486 "/Users/weugene/basilisk/src/grid/tree-common.h"

  refine_face (point, s);

  if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0)) {

    vector v = _attribute[s.i].v;
    double d[1 << 2], p[1 << 2];
    int i = 0;
     { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; {
      d[i] = 0.;
      {
# 496 "/Users/weugene/basilisk/src/grid/tree-common.h"

 d[i] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[v.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i];
# 496 "/Users/weugene/basilisk/src/grid/tree-common.h"

 d[i] += ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[v.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i];}
      i++;
    } } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }

    p[0] = 0.;
    p[1] = (3.*d[3] + d[0])/4. + d[2]/2.;
    p[2] = (d[3] + 3.*d[0])/4. + d[2]/2.;
    p[3] = (d[3] + d[0])/2. + d[2];
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1]) + sizeof(Cell)))[v.x.i] += p[1] - p[0];
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +0]) + sizeof(Cell)))[v.x.i] += p[3] - p[2];
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +1]) + sizeof(Cell)))[v.y.i] += p[0] - p[2];
    ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +1] [2*point.j-2 +1]) + sizeof(Cell)))[v.y.i] += p[1] - p[3];
# 536 "/Users/weugene/basilisk/src/grid/tree-common.h"
  }

}

vector tree_init_face_vector (vector v, const char * name)
{
  v = cartesian_init_face_vector (v, name);
  {
# 543 "/Users/weugene/basilisk/src/grid/tree-common.h"

    _attribute[v.x.i].restriction = _attribute[v.x.i].refine = no_restriction;
# 543 "/Users/weugene/basilisk/src/grid/tree-common.h"

    _attribute[v.y.i].restriction = _attribute[v.y.i].refine = no_restriction;}
  _attribute[v.x.i].restriction = restriction_face;
  _attribute[v.x.i].refine = refine_face;
  {
# 547 "/Users/weugene/basilisk/src/grid/tree-common.h"

    _attribute[v.x.i].prolongation = refine_face_x;
# 547 "/Users/weugene/basilisk/src/grid/tree-common.h"

    _attribute[v.y.i].prolongation = refine_face_y;}
  return v;
}

static void tree_boundary_level (scalar * list, int l)
{
  int depth = l < 0 ? (grid->depth) : l;

  if (tree_is_full()) {
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, depth); };
    return;
  }

  scalar * listdef = 
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                    ((void *)0)
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h"
                        , * listc = 
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                                    ((void *)0)
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h"
                                        , * list2 = 
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                                                    ((void *)0)
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h"
                                                        , * vlist = 
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                                                                    ((void *)0)
# 561 "/Users/weugene/basilisk/src/grid/tree-common.h"
                                                                        ;
  if (list) for (scalar s = *list, *_i51 = list; ((scalar *)&s)->i >= 0; s = *++_i51)
    if (!((s).i >= 65536)) {
      if (_attribute[s.i].restriction == restriction_average) {
 listdef = list_add (listdef, s);
 list2 = list_add (list2, s);
      }
      else if (_attribute[s.i].restriction != no_restriction) {
 listc = list_add (listc, s);
 if (_attribute[s.i].face)
   {
# 571 "/Users/weugene/basilisk/src/grid/tree-common.h"

     list2 = list_add (list2, _attribute[s.i].v.x);
# 571 "/Users/weugene/basilisk/src/grid/tree-common.h"

     list2 = list_add (list2, _attribute[s.i].v.y);}
 else {
   list2 = list_add (list2, s);
   if (_attribute[s.i].restriction == restriction_vertex)
     vlist = list_add (vlist, s);
 }
      }
    }

  if (vlist)






     { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->vertices.n; _k++) { point.i = ((Tree *)grid)->vertices.p[_k].i; point.j = ((Tree *)grid)->vertices.p[_k].j; point.level = ((Tree *)grid)->vertices.p[_k].level; _flags = ((Tree *)grid)->vertices.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; { x -= Delta/2.; y -= Delta/2.;{
# 588 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
      if ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid >= 0) ||
   (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+-1])))).pid >= 0)) {

 if (vlist) for (scalar s = *vlist, *_i52 = vlist; ((scalar *)&s)->i >= 0; s = *++_i52)
   ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = (((*((Cell *)((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0]))))).flags & vertex) ? ((double *) ((((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] [2*point.j-2 +0]) + sizeof(Cell)))[s.i] : ((double)1e30);
      }
      else
 {
# 596 "/Users/weugene/basilisk/src/grid/tree-common.h"

   if (child.y == 1 &&
       ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i53 = vlist; ((scalar *)&s)->i >= 0; s = *++_i53)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i])/2. : ((double)1e30);
   }
# 596 "/Users/weugene/basilisk/src/grid/tree-common.h"

   if (child.x == 1 &&
       ((!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid >= 0) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1])))).pid >= 0))) {

     if (vlist) for (scalar s = *vlist, *_i53 = vlist; ((scalar *)&s)->i >= 0; s = *++_i53)
       ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]))))).flags & vertex) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]))))).flags & vertex) ?
  (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i] + ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i])/2. : ((double)1e30);
   }}
    } } } } } }; }
# 637 "/Users/weugene/basilisk/src/grid/tree-common.h"
  free(vlist);

  if (listdef || listc) {
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, list2, depth); };
    for (int l = depth - 1; l >= 0; l--) {
       { { if (l <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _active = ((Tree *)grid)->active[l]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = l; int _k; for (_k = 0; _k < _active.n; _k++) { point.i = _active.p[_k].i; point.j = _active.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;; if (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {{
# 642 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
 if (listdef) for (scalar s = *listdef, *_i54 = listdef; ((scalar *)&s)->i >= 0; s = *++_i54)
   restriction_average (point, s);
 if (listc) for (scalar s = *listc, *_i55 = listc; ((scalar *)&s)->i >= 0; s = *++_i55)
   _attribute[s.i].restriction (point, s);
      } } } } } }; }}; }
      { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->restriction) _b->restriction (_b, list2, l); };
    }
    free(listdef);
    free(listc);
    free(list2);
  }

  scalar * listr = 
# 655 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 655 "/Users/weugene/basilisk/src/grid/tree-common.h"
                      ;
  vector * listf = 
# 656 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
                  ((void *)0)
# 656 "/Users/weugene/basilisk/src/grid/tree-common.h"
                      ;
  if (list) for (scalar s = *list, *_i56 = list; ((scalar *)&s)->i >= 0; s = *++_i56)
    if (!((s).i >= 65536) && _attribute[s.i].refine != no_restriction) {
      if (_attribute[s.i].face)
 listf = vectors_add (listf, _attribute[s.i].v);
      else
 listr = list_add (listr, s);
    }

  if (listr || listf) {
    { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, 0); };
    for (int i = 0; i < depth; i++) {
       { { if (i <= (grid->depth)) { { if (((Tree *)grid)->dirty) update_cache_f(); }; CacheLevel _cache = ((Tree *)grid)->prolongation[i]; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; point.level = i; int _k; for (_k = 0; _k < _cache.n; _k++) { point.i = _cache.p[_k].i; point.j = _cache.p[_k].j; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 668 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
 if (listr) for (scalar s = *listr, *_i57 = listr; ((scalar *)&s)->i >= 0; s = *++_i57)
          _attribute[s.i].prolongation (point, s);
 if (listf) for (vector v = *listf, *_i58 = listf; ((scalar *)&v)->i >= 0; v = *++_i58)
   {
# 672 "/Users/weugene/basilisk/src/grid/tree-common.h"

     _attribute[v.x.i].prolongation (point, v.x);
# 672 "/Users/weugene/basilisk/src/grid/tree-common.h"

     _attribute[v.y.i].prolongation (point, v.y);}
      } } } } }; }}; }
      { Boundary ** _i = boundaries, * _b; while (_i && (_b = *_i++)) if (_b->level) _b->level (_b, list, i + 1); };
    }
    free(listr);
    free(listf);
  }
}

double treex (Point point) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 682 "/Users/weugene/basilisk/src/grid/tree-common.h"

  if (level == 0)
    return 0;

  double i = 2*child.x - child.y;
  if (i <= 1 && i >= -1) i = -i;




  return treex(parent) + i/(1 << 2*(level - 1));
}

double treey (Point point) { int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 695 "/Users/weugene/basilisk/src/grid/tree-common.h"

  if (level == 0)
    return 0;
  return treey(parent) + 4./(1 << 2*(level - 1));
}

void output_tree (FILE * fp)
{
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 703 "/Users/weugene/basilisk/src/grid/tree-common.h"

    if ((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors)
       { { int _i = 2*point.i - 2, _j = 2*point.j - 2; point.level++; for (int _k = 0; _k < 2; _k++) { point.i = _i + _k; for (int _l = 0; _l < 2; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
 if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0))
   fprintf (fp, "%g %g\n%g %g\n\n",
     treex(parent), treey(parent), treex(point), treey(point)); } } point.i = (_i + 2)/2; point.j = (_j + 2)/2; point.level--;}; }; } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
}

void tree_check()
{


  long nleaves = 0, nactive = 0;
   { { Point root = { .level = 0 }; for (root.i = 2*Period.x; root.i <= 2*(2 - Period.x); root.i++) for (root.j = 2*Period.y; root.j <= 2*(2 - Period.y); root.j++) { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 716 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {
      
# 718 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     (__builtin_expect(!(
# 718 "/Users/weugene/basilisk/src/grid/tree-common.h"
     (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid >= 0
# 718 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree-common.h", 718, 
# 718 "/Users/weugene/basilisk/src/grid/tree-common.h"
     "cell.pid >= 0"
# 718 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     ) : (void)0)
# 718 "/Users/weugene/basilisk/src/grid/tree-common.h"
                           ;
      nleaves++;
    }
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0))
      
# 722 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     (__builtin_expect(!(
# 722 "/Users/weugene/basilisk/src/grid/tree-common.h"
     (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active) || (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf) && !(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid >= 0)
# 722 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree-common.h", 722, 
# 722 "/Users/weugene/basilisk/src/grid/tree-common.h"
     "is_active(cell) || (!is_leaf(cell) && !cell.neighbors && cell.pid >= 0)"
# 722 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     ) : (void)0)
# 722 "/Users/weugene/basilisk/src/grid/tree-common.h"
                                                                                     ;
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active))
      nactive++;

    int neighbors = 0;
     { { int _nn = 1 + 0 ? 1 + 0 : 2; int _i = point.i, _j = point.j; for (int _k = - _nn; _k <= _nn; _k++) { point.i = _i + _k; for (int _l = - _nn; _l <= _nn; _l++) { point.j = _j + _l; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
      if ((point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) && (!(((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf) && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors && (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid >= 0))
 neighbors++; } } point.i = _i; point.j = _j;}; }
    
# 730 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
   (__builtin_expect(!(
# 730 "/Users/weugene/basilisk/src/grid/tree-common.h"
   (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors == neighbors
# 730 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
   ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree-common.h", 730, 
# 730 "/Users/weugene/basilisk/src/grid/tree-common.h"
   "cell.neighbors == neighbors"
# 730 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
   ) : (void)0)
# 730 "/Users/weugene/basilisk/src/grid/tree-common.h"
                                       ;


    if (!(*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).neighbors)
      
# 734 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     (__builtin_expect(!(
# 734 "/Users/weugene/basilisk/src/grid/tree-common.h"
     !(level < (grid->depth) && point.i > 0 && point.i <= (1 << level) + 2 && point.j > 0 && point.j <= (1 << level) + 2 && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0] && ((Tree *)grid)->L[point.level+1]->m[2*point.i-2 +0][2*point.j-2 +0])
# 734 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree-common.h", 734, 
# 734 "/Users/weugene/basilisk/src/grid/tree-common.h"
     "!allocated_child(0,0,0)"
# 734 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
     ) : (void)0)
# 734 "/Users/weugene/basilisk/src/grid/tree-common.h"
                                     ;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }


  long reachable = 0;
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 739 "/Users/weugene/basilisk/src/grid/tree-common.h"
 {
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & active))
      reachable++;
    else
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  
# 745 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 (__builtin_expect(!(
# 745 "/Users/weugene/basilisk/src/grid/tree-common.h"
 nactive == reachable
# 745 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree-common.h", 745, 
# 745 "/Users/weugene/basilisk/src/grid/tree-common.h"
 "nactive == reachable"
# 745 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 ) : (void)0)
# 745 "/Users/weugene/basilisk/src/grid/tree-common.h"
                              ;


  reachable = 0;
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 749 "/Users/weugene/basilisk/src/grid/tree-common.h"

    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf)) {
      reachable++;
      continue;
    } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  
# 754 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 (__builtin_expect(!(
# 754 "/Users/weugene/basilisk/src/grid/tree-common.h"
 nleaves == reachable
# 754 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/grid/tree-common.h", 754, 
# 754 "/Users/weugene/basilisk/src/grid/tree-common.h"
 "nleaves == reachable"
# 754 "/Users/weugene/basilisk/src/grid/tree-common.h" 3 4
 ) : (void)0)
# 754 "/Users/weugene/basilisk/src/grid/tree-common.h"
                              ;
}

static void tree_restriction (scalar * list) {
  if (tree_is_full())
    multigrid_restriction (list);

}

void tree_methods()
{
  multigrid_methods();
  init_scalar = tree_init_scalar;
  init_vertex_scalar = tree_init_vertex_scalar;
  init_face_vector = tree_init_face_vector;
  boundary_level = tree_boundary_level;
  boundary_flux = halo_flux;
  restriction = tree_restriction;
}
# 1770 "/Users/weugene/basilisk/src/grid/tree.h"


void tree_periodic (int dir)
{
  int depth = grid ? (grid->depth) : -1;
  if (grid)
    free_grid();
  periodic (dir);
  if (depth >= 0)
    init_grid (1 << depth);
}
# 3641 "/Users/weugene/basilisk/src/grid/tree.h"
void mpi_boundary_refine (scalar * list){}
void mpi_boundary_coarsen (int a, int b){}
void mpi_boundary_update (scalar * list) {
  boundary (list);
}
# 4 "/Users/weugene/basilisk/src/grid/quadtree.h"

void quadtree_methods() {
  tree_methods();
}
# 14 "foreach_dimension_in_foreach_dimension-cpp.c"
# 1 "foreach_dimension_in_foreach_dimension.c"
# 1 "run.h"
# 1 "/Users/weugene/basilisk/src/run.h"
# 9 "/Users/weugene/basilisk/src/run.h"
double dt = 1.;
# 1 "utils.h"
# 1 "/Users/weugene/basilisk/src/utils.h"







double DT = 1e10, CFL = 0.5;




struct {

  long nc;

  long tnc;

  double t;

  double speed;

  timer gt;
} perf;





void update_perf() {
  perf.nc += grid->n;
  perf.tnc += grid->tn;
  perf.t = timer_elapsed (perf.gt);
  perf.speed = perf.tnc/perf.t;
}






typedef struct {
  double cpu;
  double real;
  double speed;
  double min;
  double avg;
  double max;
  size_t tnc;
  long mem;
} timing;






timing timer_timing (timer t, int i, size_t tnc, double * mpi)
{
  timing s;



  clock_t end = clock();
  s.cpu = ((double) (end - t.c))/
# 65 "/Users/weugene/basilisk/src/utils.h" 3 4
                                1000000
# 65 "/Users/weugene/basilisk/src/utils.h"
                                              ;
  s.real = timer_elapsed (t);
  if (tnc == 0) {
    double n = 0;
     {


 {
double _n = n;
# 69 "/Users/weugene/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 69 "/Users/weugene/basilisk/src/utils.h"
 _n++; } } } }; n += _n;
;



}
# 69 "/Users/weugene/basilisk/src/utils.h"
 }
    s.tnc = n;
    tnc = n*i;
  }
  else
    s.tnc = tnc;





  s.mem = 0;
# 95 "/Users/weugene/basilisk/src/utils.h"
  s.min = s.max = s.avg = 0.;

  s.speed = s.real > 0. ? tnc/s.real : -1.;
  return s;
}




void timer_print (timer t, int i, size_t tnc)
{
  timing s = timer_timing (t, i, tnc, 
# 106 "/Users/weugene/basilisk/src/utils.h" 3 4
                                     ((void *)0)
# 106 "/Users/weugene/basilisk/src/utils.h"
                                         );
  fprintf (
# 107 "/Users/weugene/basilisk/src/utils.h" 3 4
          __stdoutp
# 107 "/Users/weugene/basilisk/src/utils.h"
              ,
    "\n# " "Quadtree"
    ", %d steps, %g CPU, %.4g real, %.3g points.step/s, %d var\n",
    i, s.cpu, s.real, s.speed, (int) (datasize/sizeof(double)));
# 120 "/Users/weugene/basilisk/src/utils.h"
}







typedef struct {
  double avg, rms, max, volume;
} norm;

norm normf (scalar f)
{
  double avg = 0., rms = 0., max = 0., volume = 0.;
   {


 {
double _max = max; double _avg = avg; double _rms = rms; double _volume = volume;
# 135 "/Users/weugene/basilisk/src/utils.h"

if (!((cm).i >= 65536)) {
# 135 "/Users/weugene/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 136 "/Users/weugene/basilisk/src/utils.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] != ((double)1e30) && (((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i]) > 0.) {
      double v = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i]);
      if (v > _max) _max = v;
      _volume += (((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i]);
      _avg += (((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i])*v;
      _rms += (((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i])*((v)*(v));
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 135 "/Users/weugene/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 136 "/Users/weugene/basilisk/src/utils.h"

    if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] != ((double)1e30) && (((Delta)*(Delta))*_const_cm) > 0.) {
      double v = fabs(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i]);
      if (v > _max) _max = v;
      _volume += (((Delta)*(Delta))*_const_cm);
      _avg += (((Delta)*(Delta))*_const_cm)*v;
      _rms += (((Delta)*(Delta))*_const_cm)*((v)*(v));
    } } } } }; } if (_max > max) max = _max;
;
 avg += _avg;
;
 rms += _rms;
;
 volume += _volume;
;



}
# 143 "/Users/weugene/basilisk/src/utils.h"
 }
  norm n;
  n.avg = volume ? avg/volume : 0.;
  n.rms = volume ? sqrt(rms/volume) : 0.;
  n.max = max;
  n.volume = volume;
  return n;
}





typedef struct {
  double min, max, sum, stddev, volume;
} stats;

stats statsf (scalar f)
{
  double min = 1e100, max = -1e100, sum = 0., sum2 = 0., volume = 0.;
   {


 {
double _sum = sum; double _sum2 = sum2; double _volume = volume; double _max = max; double _min = min;
# 163 "/Users/weugene/basilisk/src/utils.h"

if (!((cm).i >= 65536)) {
# 163 "/Users/weugene/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 164 "/Users/weugene/basilisk/src/utils.h"

    if ((((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i]) > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] != ((double)1e30)) {
      _volume += (((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i]);
      _sum += (((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i])*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i];
      _sum2 += (((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i])*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i]));
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] > _max) _max = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i];
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] < _min) _min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i];
    } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 163 "/Users/weugene/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 164 "/Users/weugene/basilisk/src/utils.h"

    if ((((Delta)*(Delta))*_const_cm) > 0. && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] != ((double)1e30)) {
      _volume += (((Delta)*(Delta))*_const_cm);
      _sum += (((Delta)*(Delta))*_const_cm)*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i];
      _sum2 += (((Delta)*(Delta))*_const_cm)*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i])*(((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i]));
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] > _max) _max = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i];
      if (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i] < _min) _min = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[f.i];
    } } } } }; } sum += _sum;
;
 sum2 += _sum2;
;
 volume += _volume;
;
 if (_max > max) max = _max;
;
 if (_min < min) min = _min;
;



}
# 171 "/Users/weugene/basilisk/src/utils.h"
 }
  stats s;
  s.min = min, s.max = max, s.sum = sum, s.volume = volume;
  if (volume > 0.)
    sum2 -= sum*sum/volume;
  s.stddev = sum2 > 0. ? sqrt(sum2/volume) : 0.;
  return s;
}
# 187 "/Users/weugene/basilisk/src/utils.h"
static double generic_limiter (double r, double beta)
{
  double v1 = ((r) < (beta) ? (r) : (beta)), v2 = ((beta*r) < (1.) ? (beta*r) : (1.));
  v1 = ((0.) > (v1) ? (0.) : (v1));
  return ((v1) > (v2) ? (v1) : (v2));
}

double minmod (double s0, double s1, double s2) {
  return generic_limiter ((s2 - s1)/(s1 - s0), 1.)*(s1 - s0);
}

double superbee (double s0, double s1, double s2) {
  return generic_limiter ((s2 - s1)/(s1 - s0), 2.)*(s1 - s0);
}

double sweby (double s0, double s1, double s2) {
  return generic_limiter ((s2 - s1)/(s1 - s0), 1.5)*(s1 - s0);
}
# 213 "/Users/weugene/basilisk/src/utils.h"
double theta = 1.3;

double minmod2 (double s0, double s1, double s2)
{
  if (s0 < s1 && s1 < s2) {
    double d1 = theta*(s1 - s0), d2 = (s2 - s0)/2., d3 = theta*(s2 - s1);
    if (d2 < d1) d1 = d2;
    return ((d1) < (d3) ? (d1) : (d3));
  }
  if (s0 > s1 && s1 > s2) {
    double d1 = theta*(s1 - s0), d2 = (s2 - s0)/2., d3 = theta*(s2 - s1);
    if (d2 > d1) d1 = d2;
    return ((d1) > (d3) ? (d1) : (d3));
  }
  return 0.;
}
# 237 "/Users/weugene/basilisk/src/utils.h"
void gradients (scalar * f, vector * g)
{
  
# 239 "/Users/weugene/basilisk/src/utils.h" 3 4
 (__builtin_expect(!(
# 239 "/Users/weugene/basilisk/src/utils.h"
 list_len(f) == vectors_len(g)
# 239 "/Users/weugene/basilisk/src/utils.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/utils.h", 239, 
# 239 "/Users/weugene/basilisk/src/utils.h"
 "list_len(f) == vectors_len(g)"
# 239 "/Users/weugene/basilisk/src/utils.h" 3 4
 ) : (void)0)
# 239 "/Users/weugene/basilisk/src/utils.h"
                                       ;
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 240 "/Users/weugene/basilisk/src/utils.h"
 {
    scalar s; vector v;
    scalar * _i0 = f; vector * _i1 = g; if (f) for (s = *f, v = *g; ((scalar *)&s)->i >= 0; s = *++_i0, v = *++_i1) {
      if (_attribute[s.i].gradient)
 {
# 244 "/Users/weugene/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i])/Delta;
 }
# 244 "/Users/weugene/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = _attribute[s.i].gradient (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i])/Delta;
 }}
      else
 {
# 253 "/Users/weugene/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.x.i] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[s.i])/(2.*Delta);
 }
# 253 "/Users/weugene/basilisk/src/utils.h"
 {





     ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[v.y.i] = (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[s.i])/(2.*Delta);
 }}
    }
  } } } } }; }
  boundary ((scalar *) g);
}
# 275 "/Users/weugene/basilisk/src/utils.h"
void vorticity (const vector u, scalar omega)
{
  struct { double x, y; } a = {1., -1.};
   { { if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 278 "/Users/weugene/basilisk/src/utils.h"
 {
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[omega.i] = 0.;
    {
# 280 "/Users/weugene/basilisk/src/utils.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[omega.i] += a.x*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+1][point.j+0]) + sizeof(Cell)))[u.y.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+-1][point.j+0]) + sizeof(Cell)))[u.y.i])/(2.*Delta));
# 280 "/Users/weugene/basilisk/src/utils.h"

      ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[omega.i] += a.y*((((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+1]) + sizeof(Cell)))[u.x.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+-1]) + sizeof(Cell)))[u.x.i])/(2.*Delta));}
  } } } } }; }
  boundary (((scalar []){omega,{-1}}));
}





double change (scalar s, scalar sn)
{
  double max = 0.;
   {


 {
double _max = max;
# 293 "/Users/weugene/basilisk/src/utils.h"

if (!((cm).i >= 65536)) {
# 293 "/Users/weugene/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 293 "/Users/weugene/basilisk/src/utils.h"
 {
    if ((((Delta)*(Delta))*((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[cm.i]) > 0.) {
      double ds = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[sn.i]);
      if (ds > _max)
 _max = ds;
    }
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[sn.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i];
  } } } } }; }
if (((cm).i >= 65536)) {
const double _const_cm = _constant[cm.i -65536];
(void)(_const_cm);
# 293 "/Users/weugene/basilisk/src/utils.h"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 293 "/Users/weugene/basilisk/src/utils.h"
 {
    if ((((Delta)*(Delta))*_const_cm) > 0.) {
      double ds = fabs (((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[sn.i]);
      if (ds > _max)
 _max = ds;
    }
    ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[sn.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i];
  } } } } }; } if (_max > max) max = _max;
;



}
# 300 "/Users/weugene/basilisk/src/utils.h"
 }
  return max;
}





scalar lookup_field (const char * name)
{
  if (name)
    if (all) for (scalar s = *all, *_i68 = all; ((scalar *)&s)->i >= 0; s = *++_i68)
      if (!strcmp (_attribute[s.i].name, name))
 return s;
  return (scalar){-1};
}

vector lookup_vector (const char * name)
{
  if (name) {
    char component[strlen(name) + 3];
    
# 321 "/Users/weugene/basilisk/src/utils.h" 3 4
   __builtin___strcpy_chk (
# 321 "/Users/weugene/basilisk/src/utils.h"
   component
# 321 "/Users/weugene/basilisk/src/utils.h" 3 4
   , 
# 321 "/Users/weugene/basilisk/src/utils.h"
   name
# 321 "/Users/weugene/basilisk/src/utils.h" 3 4
   , __builtin_object_size (
# 321 "/Users/weugene/basilisk/src/utils.h"
   component
# 321 "/Users/weugene/basilisk/src/utils.h" 3 4
   , 2 > 1 ? 1 : 0))
# 321 "/Users/weugene/basilisk/src/utils.h"
                           ;
    
# 322 "/Users/weugene/basilisk/src/utils.h" 3 4
   __builtin___strcat_chk (
# 322 "/Users/weugene/basilisk/src/utils.h"
   component
# 322 "/Users/weugene/basilisk/src/utils.h" 3 4
   , 
# 322 "/Users/weugene/basilisk/src/utils.h"
   ".x"
# 322 "/Users/weugene/basilisk/src/utils.h" 3 4
   , __builtin_object_size (
# 322 "/Users/weugene/basilisk/src/utils.h"
   component
# 322 "/Users/weugene/basilisk/src/utils.h" 3 4
   , 2 > 1 ? 1 : 0))
# 322 "/Users/weugene/basilisk/src/utils.h"
                           ;
    if (all) for (scalar s = *all, *_i69 = all; ((scalar *)&s)->i >= 0; s = *++_i69)
      if (!strcmp (_attribute[s.i].name, component))
 return _attribute[s.i].v;
  }
  return (vector){{-1}};
}
# 1 "output.h"
# 1 "/Users/weugene/basilisk/src/output.h"
# 37 "/Users/weugene/basilisk/src/output.h"
struct OutputField {
  scalar * list;
  FILE * fp;
  int n;
  
# 41 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 41 "/Users/weugene/basilisk/src/output.h"
      linear;
  double box[2][2];
};


void output_field (struct OutputField p)
{ ;
  if (!p.list) p.list = all;
  if (p.n == 0) p.n = N;
  if (!p.fp) p.fp = 
# 50 "/Users/weugene/basilisk/src/output.h" 3 4
                   __stdoutp
# 50 "/Users/weugene/basilisk/src/output.h"
                            ;
  p.n++;
  if (p.box[0][0] == 0. && p.box[0][1] == 0. &&
      p.box[1][0] == 0. && p.box[1][1] == 0.) {
    p.box[0][0] = X0; p.box[0][1] = Y0;
    p.box[1][0] = X0 + L0; p.box[1][1] = Y0 + L0;
  }

  int len = list_len(p.list);
  double Delta = 0.999999*(p.box[1][0] - p.box[0][0])/(p.n - 1);
  int ny = (p.box[1][1] - p.box[0][1])/Delta + 1;
  double ** field = (double **) matrix_new (p.n, ny, len*sizeof(double));
  for (int i = 0; i < p.n; i++) {
    double x = Delta*i + p.box[0][0];
    for (int j = 0; j < ny; j++) {
      double y = Delta*j + p.box[0][1];
      if (p.linear) {
 int k = 0;
 if (p.list) for (scalar s = *p.list, *_i70 = p.list; ((scalar *)&s)->i >= 0; s = *++_i70)
   field[i][len*j + k++] = interpolate ((struct _interpolate){s, x, y});
      }
      else {
 Point point = locate ((struct _locate){x, y}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 72 "/Users/weugene/basilisk/src/output.h"

 int k = 0;
 if (p.list) for (scalar s = *p.list, *_i71 = p.list; ((scalar *)&s)->i >= 0; s = *++_i71)
   field[i][len*j + k++] = point.level >= 0 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] : ((double)1e30);
      }
    }
  }

  if (0 == 0) {




    fprintf (p.fp, "# 1:x 2:y");
    int i = 3;
    if (p.list) for (scalar s = *p.list, *_i72 = p.list; ((scalar *)&s)->i >= 0; s = *++_i72)
      fprintf (p.fp, " %d:%s", i++, _attribute[s.i].name);
    fputc('\n', p.fp);
    for (int i = 0; i < p.n; i++) {
      double x = Delta*i + p.box[0][0];
      for (int j = 0; j < ny; j++) {
 double y = Delta*j + p.box[0][1];

 fprintf (p.fp, "%g %g", x, y);
 int k = 0;
 if (p.list) for (scalar s = *p.list, *_i73 = p.list; ((scalar *)&s)->i >= 0; s = *++_i73)
   fprintf (p.fp, " %g", field[i][len*j + k++]);
 fputc ('\n', p.fp);
      }
      fputc ('\n', p.fp);
    }
    fflush (p.fp);
  }






  matrix_free (field);
 ; }
# 140 "/Users/weugene/basilisk/src/output.h"
struct OutputMatrix {
  scalar f;
  FILE * fp;
  int n;
  
# 144 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 144 "/Users/weugene/basilisk/src/output.h"
      linear;
};


void output_matrix (struct OutputMatrix p)
{ ;
  if (p.n == 0) p.n = N;
  if (!p.fp) p.fp = 
# 151 "/Users/weugene/basilisk/src/output.h" 3 4
                   __stdoutp
# 151 "/Users/weugene/basilisk/src/output.h"
                            ;
  float fn = p.n;
  float Delta = (float) L0/fn;
  fwrite (&fn, sizeof(float), 1, p.fp);
  for (int j = 0; j < p.n; j++) {
    float yp = (float) (Delta*j + X0 + Delta/2.);
    fwrite (&yp, sizeof(float), 1, p.fp);
  }
  for (int i = 0; i < p.n; i++) {
    float xp = (float) (Delta*i + X0 + Delta/2.);
    fwrite (&xp, sizeof(float), 1, p.fp);
    for (int j = 0; j < p.n; j++) {
      float yp = (float)(Delta*j + Y0 + Delta/2.), v;
      if (p.linear)
 v = interpolate ((struct _interpolate){p.f, xp, yp});
      else {
 Point point = locate ((struct _locate){xp, yp}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 167 "/Users/weugene/basilisk/src/output.h"

 
# 168 "/Users/weugene/basilisk/src/output.h" 3 4
(__builtin_expect(!(
# 168 "/Users/weugene/basilisk/src/output.h"
point.level >= 0
# 168 "/Users/weugene/basilisk/src/output.h" 3 4
), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/output.h", 168, 
# 168 "/Users/weugene/basilisk/src/output.h"
"point.level >= 0"
# 168 "/Users/weugene/basilisk/src/output.h" 3 4
) : (void)0)
# 168 "/Users/weugene/basilisk/src/output.h"
                         ;
 v = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[p.f.i];
      }
      fwrite (&v, sizeof(float), 1, p.fp);
    }
  }
  fflush (p.fp);
 ; }
# 184 "/Users/weugene/basilisk/src/output.h"
typedef void (* colormap) (double cmap[127][3]);

void jet (double cmap[127][3])
{
  for (int i = 0; i < 127; i++) {
    cmap[i][0] =
      i <= 46 ? 0. :
      i >= 111 ? -0.03125*(i - 111) + 1. :
      i >= 78 ? 1. :
      0.03125*(i - 46);
    cmap[i][1] =
      i <= 14 || i >= 111 ? 0. :
      i >= 79 ? -0.03125*(i - 111) :
      i <= 46 ? 0.03125*(i - 14) :
      1.;
    cmap[i][2] =
      i >= 79 ? 0. :
      i >= 47 ? -0.03125*(i - 79) :
      i <= 14 ? 0.03125*(i - 14) + 1.:
      1.;
  }
}

void cool_warm (double cmap[127][3])
{






  static double basemap[33][3] = {
    {0.2298057, 0.298717966, 0.753683153},
    {0.26623388, 0.353094838, 0.801466763},
    {0.30386891, 0.406535296, 0.84495867},
    {0.342804478, 0.458757618, 0.883725899},
    {0.38301334, 0.50941904, 0.917387822},
    {0.424369608, 0.558148092, 0.945619588},
    {0.46666708, 0.604562568, 0.968154911},
    {0.509635204, 0.648280772, 0.98478814},
    {0.552953156, 0.688929332, 0.995375608},
    {0.596262162, 0.726149107, 0.999836203},
    {0.639176211, 0.759599947, 0.998151185},
    {0.681291281, 0.788964712, 0.990363227},
    {0.722193294, 0.813952739, 0.976574709},
    {0.761464949, 0.834302879, 0.956945269},
    {0.798691636, 0.849786142, 0.931688648},
    {0.833466556, 0.860207984, 0.901068838},
    {0.865395197, 0.86541021, 0.865395561},
    {0.897787179, 0.848937047, 0.820880546},
    {0.924127593, 0.827384882, 0.774508472},
    {0.944468518, 0.800927443, 0.726736146},
    {0.958852946, 0.769767752, 0.678007945},
    {0.96732803, 0.734132809, 0.628751763},
    {0.969954137, 0.694266682, 0.579375448},
    {0.966811177, 0.650421156, 0.530263762},
    {0.958003065, 0.602842431, 0.481775914},
    {0.943660866, 0.551750968, 0.434243684},
    {0.923944917, 0.49730856, 0.387970225},
    {0.89904617, 0.439559467, 0.343229596},
    {0.869186849, 0.378313092, 0.300267182},
    {0.834620542, 0.312874446, 0.259301199},
    {0.795631745, 0.24128379, 0.220525627},
    {0.752534934, 0.157246067, 0.184115123},
    {0.705673158, 0.01555616, 0.150232812}
  };

  for (int i = 0; i < 127; i++) {
    double x = i*(32 - 1e-10)/(127 - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void gray (double cmap[127][3])
{
  for (int i = 0; i < 127; i++)
    for (int k = 0; k < 3; k++)
      cmap[i][k] = i/(127 - 1.);
}

void randomap (double cmap[127][3])
{
  srand(0);
  for (int i = 0; i < 127; i++)
    for (int k = 0; k < 3; k++)
      cmap[i][k] = ((1. - 2.*rand()/(double)
# 271 "/Users/weugene/basilisk/src/output.h" 3 4
                   0x7fffffff
# 271 "/Users/weugene/basilisk/src/output.h"
                   ) + 1.)/2.;
}





typedef struct {
  unsigned char r, g, b;
} color;

color colormap_color (double cmap[127][3],
        double val, double min, double max)
{
  color c;
  if (val == ((double)1e30)) {
    c.r = c.g = c.b = 0;
    return c;
  }
  int i;
  double coef;
  if (max != min)
    val = (val - min)/(max - min);
  else
    val = 0.;
  if (val <= 0.) i = 0, coef = 0.;
  else if (val >= 1.) i = 127 - 2, coef = 1.;
  else {
    i = val*(127 - 1);
    coef = val*(127 - 1) - i;
  }
  
# 302 "/Users/weugene/basilisk/src/output.h" 3 4
 (__builtin_expect(!(
# 302 "/Users/weugene/basilisk/src/output.h"
 i < 127 - 1
# 302 "/Users/weugene/basilisk/src/output.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/output.h", 302, 
# 302 "/Users/weugene/basilisk/src/output.h"
 "i < 127 - 1"
# 302 "/Users/weugene/basilisk/src/output.h" 3 4
 ) : (void)0)
# 302 "/Users/weugene/basilisk/src/output.h"
                     ;
  unsigned char * c1 = (unsigned char *) &c;
  for (int j = 0; j < 3; j++)
    c1[j] = 255*(cmap[i][j]*(1. - coef) + cmap[i + 1][j]*coef);
  return c;
}
# 321 "/Users/weugene/basilisk/src/output.h"
static const char * extension (const char * file, const char * ext) {
  int len = strlen(file);
  return len > 4 && !strcmp (file + len - 4, ext) ? file + len - 4 : 
# 323 "/Users/weugene/basilisk/src/output.h" 3 4
                                                                    ((void *)0)
# 323 "/Users/weugene/basilisk/src/output.h"
                                                                        ;
}

static const char * is_animation (const char * file) {
  const char * ext;
  if ((ext = extension (file, ".mp4")) ||
      (ext = extension (file, ".ogv")) ||
      (ext = extension (file, ".gif")))
    return ext;
  return 
# 332 "/Users/weugene/basilisk/src/output.h" 3 4
        ((void *)0)
# 332 "/Users/weugene/basilisk/src/output.h"
            ;
}

static struct {
  FILE ** fp;
  char ** names;
  int n;
} open_image_data = {
# 339 "/Users/weugene/basilisk/src/output.h" 3 4
                    ((void *)0)
# 339 "/Users/weugene/basilisk/src/output.h"
                        , 
# 339 "/Users/weugene/basilisk/src/output.h" 3 4
                          ((void *)0)
# 339 "/Users/weugene/basilisk/src/output.h"
                              , 0};

static void open_image_cleanup()
{
  for (int i = 0; i < open_image_data.n; i++) {
    qpclose (open_image_data.fp[i]);
    free(open_image_data.names[i]);
  }
  free(open_image_data.fp);
  free(open_image_data.names);
  open_image_data.fp = 
# 349 "/Users/weugene/basilisk/src/output.h" 3 4
                      ((void *)0)
# 349 "/Users/weugene/basilisk/src/output.h"
                          ;
  open_image_data.names = 
# 350 "/Users/weugene/basilisk/src/output.h" 3 4
                         ((void *)0)
# 350 "/Users/weugene/basilisk/src/output.h"
                             ;
  open_image_data.n = 0;
}

static FILE * open_image_lookup (const char * file)
{
  for (int i = 0; i < open_image_data.n; i++)
    if (!strcmp (file, open_image_data.names[i]))
      return open_image_data.fp[i];
  return 
# 359 "/Users/weugene/basilisk/src/output.h" 3 4
        ((void *)0)
# 359 "/Users/weugene/basilisk/src/output.h"
            ;
}

static 
# 362 "/Users/weugene/basilisk/src/output.h" 3 4
      _Bool 
# 362 "/Users/weugene/basilisk/src/output.h"
           which (const char * command)
{
  char * s = getenv ("PATH");
  if (!s)
    return 
# 366 "/Users/weugene/basilisk/src/output.h" 3 4
          0
# 366 "/Users/weugene/basilisk/src/output.h"
               ;
  char path[strlen(s) + 1];
  
# 368 "/Users/weugene/basilisk/src/output.h" 3 4
 __builtin___strcpy_chk (
# 368 "/Users/weugene/basilisk/src/output.h"
 path
# 368 "/Users/weugene/basilisk/src/output.h" 3 4
 , 
# 368 "/Users/weugene/basilisk/src/output.h"
 s
# 368 "/Users/weugene/basilisk/src/output.h" 3 4
 , __builtin_object_size (
# 368 "/Users/weugene/basilisk/src/output.h"
 path
# 368 "/Users/weugene/basilisk/src/output.h" 3 4
 , 2 > 1 ? 1 : 0))
# 368 "/Users/weugene/basilisk/src/output.h"
                 ;
  s = strtok (path, ":");
  while (s) {
    char f[strlen(s) + strlen(command) + 2];
    
# 372 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcpy_chk (
# 372 "/Users/weugene/basilisk/src/output.h"
   f
# 372 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 372 "/Users/weugene/basilisk/src/output.h"
   s
# 372 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 372 "/Users/weugene/basilisk/src/output.h"
   f
# 372 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 372 "/Users/weugene/basilisk/src/output.h"
                ;
    
# 373 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcat_chk (
# 373 "/Users/weugene/basilisk/src/output.h"
   f
# 373 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 373 "/Users/weugene/basilisk/src/output.h"
   "/"
# 373 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 373 "/Users/weugene/basilisk/src/output.h"
   f
# 373 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 373 "/Users/weugene/basilisk/src/output.h"
                  ;
    
# 374 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcat_chk (
# 374 "/Users/weugene/basilisk/src/output.h"
   f
# 374 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 374 "/Users/weugene/basilisk/src/output.h"
   command
# 374 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 374 "/Users/weugene/basilisk/src/output.h"
   f
# 374 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 374 "/Users/weugene/basilisk/src/output.h"
                      ;
    FILE * fp = fopen (f, "r");
    if (fp) {
      fclose (fp);
      return 
# 378 "/Users/weugene/basilisk/src/output.h" 3 4
            1
# 378 "/Users/weugene/basilisk/src/output.h"
                ;
    }
    s = strtok (
# 380 "/Users/weugene/basilisk/src/output.h" 3 4
               ((void *)0)
# 380 "/Users/weugene/basilisk/src/output.h"
                   , ":");
  }
  return 
# 382 "/Users/weugene/basilisk/src/output.h" 3 4
        0
# 382 "/Users/weugene/basilisk/src/output.h"
             ;
}

static FILE * ppm_fallback (const char * file, const char * mode)
{
  char filename[strlen(file) + 5];
  
# 388 "/Users/weugene/basilisk/src/output.h" 3 4
 __builtin___strcpy_chk (
# 388 "/Users/weugene/basilisk/src/output.h"
 filename
# 388 "/Users/weugene/basilisk/src/output.h" 3 4
 , 
# 388 "/Users/weugene/basilisk/src/output.h"
 file
# 388 "/Users/weugene/basilisk/src/output.h" 3 4
 , __builtin_object_size (
# 388 "/Users/weugene/basilisk/src/output.h"
 filename
# 388 "/Users/weugene/basilisk/src/output.h" 3 4
 , 2 > 1 ? 1 : 0))
# 388 "/Users/weugene/basilisk/src/output.h"
                        ;
  
# 389 "/Users/weugene/basilisk/src/output.h" 3 4
 __builtin___strcat_chk (
# 389 "/Users/weugene/basilisk/src/output.h"
 filename
# 389 "/Users/weugene/basilisk/src/output.h" 3 4
 , 
# 389 "/Users/weugene/basilisk/src/output.h"
 ".ppm"
# 389 "/Users/weugene/basilisk/src/output.h" 3 4
 , __builtin_object_size (
# 389 "/Users/weugene/basilisk/src/output.h"
 filename
# 389 "/Users/weugene/basilisk/src/output.h" 3 4
 , 2 > 1 ? 1 : 0))
# 389 "/Users/weugene/basilisk/src/output.h"
                          ;
  FILE * fp = fopen (filename, mode);
  if (!fp) {
    perror (file);



    exit (1);
  }
  return fp;
}

FILE * open_image (const char * file, const char * options)
{
  
# 403 "/Users/weugene/basilisk/src/output.h" 3 4
 (__builtin_expect(!(
# 403 "/Users/weugene/basilisk/src/output.h"
 0 == 0
# 403 "/Users/weugene/basilisk/src/output.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/output.h", 403, 
# 403 "/Users/weugene/basilisk/src/output.h"
 "pid() == 0"
# 403 "/Users/weugene/basilisk/src/output.h" 3 4
 ) : (void)0)
# 403 "/Users/weugene/basilisk/src/output.h"
                    ;
  const char * ext;
  if ((ext = is_animation (file))) {
    FILE * fp = open_image_lookup (file);
    if (fp)
      return fp;

    int len = strlen ("ppm2???    ") + strlen (file) +
      (options ? strlen (options) : 0);
    char command[len];
    
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcpy_chk (
# 413 "/Users/weugene/basilisk/src/output.h"
   command
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 413 "/Users/weugene/basilisk/src/output.h"
   "ppm2"
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 413 "/Users/weugene/basilisk/src/output.h"
   command
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 413 "/Users/weugene/basilisk/src/output.h"
                           ; 
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
                             __builtin___strcat_chk (
# 413 "/Users/weugene/basilisk/src/output.h"
                             command
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
                             , 
# 413 "/Users/weugene/basilisk/src/output.h"
                             ext + 1
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
                             , __builtin_object_size (
# 413 "/Users/weugene/basilisk/src/output.h"
                             command
# 413 "/Users/weugene/basilisk/src/output.h" 3 4
                             , 2 > 1 ? 1 : 0))
# 413 "/Users/weugene/basilisk/src/output.h"
                                                      ;

    static int has_ffmpeg = -1;
    if (has_ffmpeg < 0) {
      if (which (command) && (which ("ffmpeg") || which ("avconv")))
 has_ffmpeg = 
# 418 "/Users/weugene/basilisk/src/output.h" 3 4
             1
# 418 "/Users/weugene/basilisk/src/output.h"
                 ;
      else {
 fprintf (
# 420 "/Users/weugene/basilisk/src/output.h" 3 4
         __stderrp
# 420 "/Users/weugene/basilisk/src/output.h"
             ,
   "open_image(): cannot find '%s' or 'ffmpeg'/'avconv'\n"
   "  falling back to raw PPM outputs\n", command);
 has_ffmpeg = 
# 423 "/Users/weugene/basilisk/src/output.h" 3 4
             0
# 423 "/Users/weugene/basilisk/src/output.h"
                  ;
      }
    }
    if (!has_ffmpeg)
      return ppm_fallback (file, "a");

    static 
# 429 "/Users/weugene/basilisk/src/output.h" 3 4
          _Bool 
# 429 "/Users/weugene/basilisk/src/output.h"
               added = 
# 429 "/Users/weugene/basilisk/src/output.h" 3 4
                       0
# 429 "/Users/weugene/basilisk/src/output.h"
                            ;
    if (!added) {
      free_solver_func_add (open_image_cleanup);
      added = 
# 432 "/Users/weugene/basilisk/src/output.h" 3 4
             1
# 432 "/Users/weugene/basilisk/src/output.h"
                 ;
    }
    open_image_data.n++;
    open_image_data.names = (char * *) realloc(open_image_data.names,(open_image_data.n)*sizeof(char *));
    open_image_data.names[open_image_data.n - 1] = strdup(file);

    if (options) {
      
# 439 "/Users/weugene/basilisk/src/output.h" 3 4
     __builtin___strcat_chk (
# 439 "/Users/weugene/basilisk/src/output.h"
     command
# 439 "/Users/weugene/basilisk/src/output.h" 3 4
     , 
# 439 "/Users/weugene/basilisk/src/output.h"
     " "
# 439 "/Users/weugene/basilisk/src/output.h" 3 4
     , __builtin_object_size (
# 439 "/Users/weugene/basilisk/src/output.h"
     command
# 439 "/Users/weugene/basilisk/src/output.h" 3 4
     , 2 > 1 ? 1 : 0))
# 439 "/Users/weugene/basilisk/src/output.h"
                          ;
      
# 440 "/Users/weugene/basilisk/src/output.h" 3 4
     __builtin___strcat_chk (
# 440 "/Users/weugene/basilisk/src/output.h"
     command
# 440 "/Users/weugene/basilisk/src/output.h" 3 4
     , 
# 440 "/Users/weugene/basilisk/src/output.h"
     options
# 440 "/Users/weugene/basilisk/src/output.h" 3 4
     , __builtin_object_size (
# 440 "/Users/weugene/basilisk/src/output.h"
     command
# 440 "/Users/weugene/basilisk/src/output.h" 3 4
     , 2 > 1 ? 1 : 0))
# 440 "/Users/weugene/basilisk/src/output.h"
                              ;
    }
    
# 442 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcat_chk (
# 442 "/Users/weugene/basilisk/src/output.h"
   command
# 442 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 442 "/Users/weugene/basilisk/src/output.h"
   !strcmp (ext, ".mp4") ? " " : " > "
# 442 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 442 "/Users/weugene/basilisk/src/output.h"
   command
# 442 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 442 "/Users/weugene/basilisk/src/output.h"
                                                        ;
    
# 443 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcat_chk (
# 443 "/Users/weugene/basilisk/src/output.h"
   command
# 443 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 443 "/Users/weugene/basilisk/src/output.h"
   file
# 443 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 443 "/Users/weugene/basilisk/src/output.h"
   command
# 443 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 443 "/Users/weugene/basilisk/src/output.h"
                         ;
    open_image_data.fp = (FILE * *) realloc(open_image_data.fp,(open_image_data.n)*sizeof(FILE *));
    return open_image_data.fp[open_image_data.n - 1] = qpopen (command, "w");
  }
  else {
    static int has_convert = -1;
    if (has_convert < 0) {
      if (which ("convert"))
 has_convert = 
# 451 "/Users/weugene/basilisk/src/output.h" 3 4
              1
# 451 "/Users/weugene/basilisk/src/output.h"
                  ;
      else {
 fprintf (
# 453 "/Users/weugene/basilisk/src/output.h" 3 4
         __stderrp
# 453 "/Users/weugene/basilisk/src/output.h"
             ,
   "open_image(): cannot find 'convert'\n"
   "  falling back to raw PPM outputs\n");
 has_convert = 
# 456 "/Users/weugene/basilisk/src/output.h" 3 4
              0
# 456 "/Users/weugene/basilisk/src/output.h"
                   ;
      }
    }
    if (!has_convert)
      return ppm_fallback (file, "w");

    int len = strlen ("convert ppm:-   ") + strlen (file) +
      (options ? strlen (options) : 0);
    char command[len];
    
# 465 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcpy_chk (
# 465 "/Users/weugene/basilisk/src/output.h"
   command
# 465 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 465 "/Users/weugene/basilisk/src/output.h"
   "convert ppm:- "
# 465 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 465 "/Users/weugene/basilisk/src/output.h"
   command
# 465 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 465 "/Users/weugene/basilisk/src/output.h"
                                     ;
    if (options) {
      
# 467 "/Users/weugene/basilisk/src/output.h" 3 4
     __builtin___strcat_chk (
# 467 "/Users/weugene/basilisk/src/output.h"
     command
# 467 "/Users/weugene/basilisk/src/output.h" 3 4
     , 
# 467 "/Users/weugene/basilisk/src/output.h"
     options
# 467 "/Users/weugene/basilisk/src/output.h" 3 4
     , __builtin_object_size (
# 467 "/Users/weugene/basilisk/src/output.h"
     command
# 467 "/Users/weugene/basilisk/src/output.h" 3 4
     , 2 > 1 ? 1 : 0))
# 467 "/Users/weugene/basilisk/src/output.h"
                              ;
      
# 468 "/Users/weugene/basilisk/src/output.h" 3 4
     __builtin___strcat_chk (
# 468 "/Users/weugene/basilisk/src/output.h"
     command
# 468 "/Users/weugene/basilisk/src/output.h" 3 4
     , 
# 468 "/Users/weugene/basilisk/src/output.h"
     " "
# 468 "/Users/weugene/basilisk/src/output.h" 3 4
     , __builtin_object_size (
# 468 "/Users/weugene/basilisk/src/output.h"
     command
# 468 "/Users/weugene/basilisk/src/output.h" 3 4
     , 2 > 1 ? 1 : 0))
# 468 "/Users/weugene/basilisk/src/output.h"
                          ;
    }
    
# 470 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcat_chk (
# 470 "/Users/weugene/basilisk/src/output.h"
   command
# 470 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 470 "/Users/weugene/basilisk/src/output.h"
   file
# 470 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 470 "/Users/weugene/basilisk/src/output.h"
   command
# 470 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 470 "/Users/weugene/basilisk/src/output.h"
                         ;
    return qpopen (command, "w");
  }
}

void close_image (const char * file, FILE * fp)
{
  
# 477 "/Users/weugene/basilisk/src/output.h" 3 4
 (__builtin_expect(!(
# 477 "/Users/weugene/basilisk/src/output.h"
 0 == 0
# 477 "/Users/weugene/basilisk/src/output.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/output.h", 477, 
# 477 "/Users/weugene/basilisk/src/output.h"
 "pid() == 0"
# 477 "/Users/weugene/basilisk/src/output.h" 3 4
 ) : (void)0)
# 477 "/Users/weugene/basilisk/src/output.h"
                    ;
  if (is_animation (file)) {
    if (!open_image_lookup (file))
      fclose (fp);
  }
  else if (which ("convert"))
    qpclose (fp);
  else
    fclose (fp);
}
# 552 "/Users/weugene/basilisk/src/output.h"
struct OutputPPM {
  scalar f;
  FILE * fp;
  int n;
  char * file;
  double min, max, spread, z;
  
# 558 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 558 "/Users/weugene/basilisk/src/output.h"
      linear;
  double box[2][2];
  scalar mask;
  colormap map;
  char * opt;
};


void output_ppm (struct OutputPPM p)
{ ;

  if (p.n == 0) p.n = N;
  if (p.min == 0 && p.max == 0) {
    stats s = statsf (p.f);
    if (p.spread < 0.)
      p.min = s.min, p.max = s.max;
    else {
      double avg = s.sum/s.volume, spread = (p.spread ? p.spread : 5.)*s.stddev;
      p.min = avg - spread; p.max = avg + spread;
    }
  }
  if (p.box[0][0] == 0. && p.box[0][1] == 0. &&
      p.box[1][0] == 0. && p.box[1][1] == 0.) {
    p.box[0][0] = X0; p.box[0][1] = Y0;
    p.box[1][0] = X0 + L0; p.box[1][1] = Y0 + L0;
  }
  if (!p.map)
    p.map = jet;

  double fn = p.n;
  double Delta = (p.box[1][0] - p.box[0][0])/fn;
  int ny = (p.box[1][1] - p.box[0][1])/Delta;
  if (ny % 2) ny++;

  color ** ppm = (color **) matrix_new (ny, p.n, sizeof(color));
  double cmap[127][3];
  p.map (cmap);
  {
   
      for (int j = 0; j < ny; j++) {
 double yp = Delta*j + p.box[0][1] + Delta/2.;
 for (int i = 0; i < p.n; i++) {
   double xp = Delta*i + p.box[0][0] + Delta/2., v;
   if (p.mask.i) {
     if (p.linear) {
       double m = interpolate ((struct _interpolate){p.mask, xp, yp, p.z});
       if (m < 0.)
  v = ((double)1e30);
       else
  v = interpolate ((struct _interpolate){p.f, xp, yp, p.z});
     }
     else {
       Point point = locate ((struct _locate){xp, yp, p.z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 610 "/Users/weugene/basilisk/src/output.h"

       if (point.level < 0 || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[p.mask.i] < 0.)
  v = ((double)1e30);
       else
  v = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[p.f.i];
     }
   }
   else if (p.linear)
     v = interpolate ((struct _interpolate){p.f, xp, yp, p.z});
   else {
     Point point = locate ((struct _locate){xp, yp, p.z}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 620 "/Users/weugene/basilisk/src/output.h"

     v = point.level >= 0 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[p.f.i] : ((double)1e30);
   }
   ppm[ny - 1 - j][i] = colormap_color (cmap, v, p.min, p.max);
 }
      }
  }

  if (0 == 0) {




    if (!p.fp) p.fp = 
# 633 "/Users/weugene/basilisk/src/output.h" 3 4
                     __stdoutp
# 633 "/Users/weugene/basilisk/src/output.h"
                              ;
    if (p.file)
      p.fp = open_image (p.file, p.opt);

    fprintf (p.fp, "P6\n%u %u 255\n", p.n, ny);
    fwrite (((void **) ppm)[0], sizeof(color), ny*p.n, p.fp);

    if (p.file)
      close_image (p.file, p.fp);
    else
      fflush (p.fp);
  }






  matrix_free (ppm);
 ; }
# 684 "/Users/weugene/basilisk/src/output.h"
struct OutputGRD {
  scalar f;
  FILE * fp;
  double Delta;
  
# 688 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 688 "/Users/weugene/basilisk/src/output.h"
      linear;
  double box[2][2];
  scalar mask;
};


void output_grd (struct OutputGRD p)
{ ;

  if (!p.fp) p.fp = 
# 697 "/Users/weugene/basilisk/src/output.h" 3 4
                   __stdoutp
# 697 "/Users/weugene/basilisk/src/output.h"
                            ;
  if (p.box[0][0] == 0. && p.box[0][1] == 0. &&
      p.box[1][0] == 0. && p.box[1][1] == 0.) {
    p.box[0][0] = X0; p.box[0][1] = Y0;
    p.box[1][0] = X0 + L0; p.box[1][1] = Y0 + L0;
    if (p.Delta == 0) p.Delta = L0/N;
  }

  double Delta = p.Delta;
  int nx = (p.box[1][0] - p.box[0][0])/Delta;
  int ny = (p.box[1][1] - p.box[0][1])/Delta;


  fprintf (p.fp, "ncols          %d\n", nx);
  fprintf (p.fp, "nrows          %d\n", ny);
  fprintf (p.fp, "xllcorner      %g\n", p.box[0][0]);
  fprintf (p.fp, "yllcorner      %g\n", p.box[0][1]);
  fprintf (p.fp, "cellsize       %g\n", Delta);
  fprintf (p.fp, "nodata_value   -9999\n");


  for (int j = ny-1; j >= 0; j--) {
    double yp = Delta*j + p.box[0][1] + Delta/2.;
    for (int i = 0; i < nx; i++) {
      double xp = Delta*i + p.box[0][0] + Delta/2., v;
      if (p.mask.i) {
 if (p.linear) {
   double m = interpolate ((struct _interpolate){p.mask, xp, yp});
   if (m < 0.)
     v = ((double)1e30);
   else
     v = interpolate ((struct _interpolate){p.f, xp, yp});
 }
 else {
   Point point = locate ((struct _locate){xp, yp}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 731 "/Users/weugene/basilisk/src/output.h"

   if (point.level < 0 || ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[p.mask.i] < 0.)
     v = ((double)1e30);
   else
     v = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[p.f.i];
 }
      }
      else if (p.linear)
 v = interpolate ((struct _interpolate){p.f, xp, yp});
      else {
 Point point = locate ((struct _locate){xp, yp}); int ig = 0; (void)(ig); int jg = 0; (void)(jg); double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;
# 741 "/Users/weugene/basilisk/src/output.h"

 v = point.level >= 0 ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[p.f.i] : ((double)1e30);
      }
      if (v == ((double)1e30))
 fprintf (p.fp, "-9999 ");
      else
 fprintf (p.fp, "%f ", v);
    }
    fprintf (p.fp, "\n");
  }

  fflush (p.fp);
 ; }
# 780 "/Users/weugene/basilisk/src/output.h"
struct OutputGfs {
  FILE * fp;
  scalar * list;
  double t;
  char * file;
  
# 785 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 785 "/Users/weugene/basilisk/src/output.h"
      translate;
};

static char * replace (const char * input, int target, int with,
         
# 789 "/Users/weugene/basilisk/src/output.h" 3 4
        _Bool 
# 789 "/Users/weugene/basilisk/src/output.h"
             translate)
{
  if (translate) {
    if (!strcmp (input, "u.x"))
      return strdup("U");
    if (!strcmp (input, "u.y"))
      return strdup("V");
    if (!strcmp (input, "u.z"))
      return strdup("W");
  }
  char * name = strdup(input), * i = name;
  while (*i != '\0') {
    if (*i == target)
      *i = with;
    i++;
  }
  return name;
}


void output_gfs (struct OutputGfs p)
{ ;
  char * fname = p.file;
# 827 "/Users/weugene/basilisk/src/output.h"
  
# 827 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 827 "/Users/weugene/basilisk/src/output.h"
      opened = 
# 827 "/Users/weugene/basilisk/src/output.h" 3 4
               0
# 827 "/Users/weugene/basilisk/src/output.h"
                    ;
  if (p.fp == 
# 828 "/Users/weugene/basilisk/src/output.h" 3 4
             ((void *)0)
# 828 "/Users/weugene/basilisk/src/output.h"
                 ) {
    if (fname == 
# 829 "/Users/weugene/basilisk/src/output.h" 3 4
                ((void *)0)
# 829 "/Users/weugene/basilisk/src/output.h"
                    )
      p.fp = 
# 830 "/Users/weugene/basilisk/src/output.h" 3 4
            __stdoutp
# 830 "/Users/weugene/basilisk/src/output.h"
                     ;
    else if (!(p.fp = fopen (fname, "w"))) {
      perror (fname);
      exit (1);
    }
    else
      opened = 
# 836 "/Users/weugene/basilisk/src/output.h" 3 4
              1
# 836 "/Users/weugene/basilisk/src/output.h"
                  ;
  }

  scalar * list = p.list ? p.list : list_copy (all);

  restriction (list);
  fprintf (p.fp,
    "1 0 GfsSimulation GfsBox GfsGEdge { binary = 1"
    " x = %g y = %g ",
    0.5 + X0/L0, 0.5 + Y0/L0);




  if (list != 
# 850 "/Users/weugene/basilisk/src/output.h" 3 4
             ((void *)0) 
# 850 "/Users/weugene/basilisk/src/output.h"
                  && list[0].i != -1) {
    scalar s = list[0];
    char * name = replace (_attribute[s.i].name, '.', '_', p.translate);
    fprintf (p.fp, "variables = %s", name);
    free(name);
    for (int i = 1; i < list_len(list); i++) {
      scalar s = list[i];
      if (_attribute[s.i].name) {
 char * name = replace (_attribute[s.i].name, '.', '_', p.translate);
 fprintf (p.fp, ",%s", name);
 free(name);
      }
    }
    fprintf (p.fp, " ");
  }
  fprintf (p.fp, "} {\n");
  fprintf (p.fp, "  Time { t = %g }\n", t);
  if (L0 != 1.)
    fprintf (p.fp, "  PhysicalParams { L = %g }\n", L0);
  fprintf (p.fp, "  VariableTracerVOF f\n");
  fprintf (p.fp, "}\nGfsBox { x = 0 y = 0 z = 0 } {\n");
# 888 "/Users/weugene/basilisk/src/output.h"
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 888 "/Users/weugene/basilisk/src/output.h"
 {



    {






      unsigned flags =
 level == 0 ? 0 :



      child.x == -1 && child.y == -1 ? 0 :
 child.x == -1 && child.y == 1 ? 1 :
 child.x == 1 && child.y == -1 ? 2 :
 3;
# 918 "/Users/weugene/basilisk/src/output.h"
      if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf))
 flags |= (1 << 4);
      fwrite (&flags, sizeof (unsigned), 1, p.fp);
      double a = -1;
      fwrite (&a, sizeof (double), 1, p.fp);
      if (list) for (scalar s = *list, *_i75 = list; ((scalar *)&s)->i >= 0; s = *++_i75)
 if (_attribute[s.i].name) {
   if (_attribute[s.i].v.x.i >= 0) {




     if (_attribute[s.i].v.x.i == s.i) {
       s = _attribute[s.i].v.y;
       a = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] != ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] : (double) ((double)1.79769313486231570814527423731704357e+308L);
     }
     else if (_attribute[s.i].v.y.i == s.i) {
       s = _attribute[s.i].v.x;
       a = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] != ((double)1e30) ? - ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] : (double) ((double)1.79769313486231570814527423731704357e+308L);
     }





   }
   else
     a = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).pid == 0) && ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] != ((double)1e30) ? ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] : (double) ((double)1.79769313486231570814527423731704357e+308L);
   fwrite (&a, sizeof (double), 1, p.fp);
 }
    }
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf))
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
# 961 "/Users/weugene/basilisk/src/output.h"
    fputs ("}\n", p.fp);
  fflush (p.fp);

  if (!p.list)
    free(list);
  if (opened)
    fclose (p.fp);
# 986 "/Users/weugene/basilisk/src/output.h"
 ; }
# 1010 "/Users/weugene/basilisk/src/output.h"
struct Dump {
  char * file;
  scalar * list;
  FILE * fp;
  
# 1014 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 1014 "/Users/weugene/basilisk/src/output.h"
      unbuffered;
};

struct DumpHeader {
  double t;
  long len;
  int i, depth, npe, version;
  coord n;
};

static const int dump_version =

  170901;

static scalar * dump_list (scalar * lista)
{
  scalar * list = ((cm).i >= 65536) ? 
# 1030 "/Users/weugene/basilisk/src/output.h" 3 4
                                   ((void *)0) 
# 1030 "/Users/weugene/basilisk/src/output.h"
                                        : list_concat (((scalar []){cm,{-1}}), 
# 1030 "/Users/weugene/basilisk/src/output.h" 3 4
                                                                               ((void *)0)
# 1030 "/Users/weugene/basilisk/src/output.h"
                                                                                   );
  if (lista) for (scalar s = *lista, *_i76 = lista; ((scalar *)&s)->i >= 0; s = *++_i76)
    if (!_attribute[s.i].face && !_attribute[s.i].nodump && s.i != cm.i)
      list = list_add (list, s);
  return list;
}

static void dump_header (FILE * fp, struct DumpHeader * header, scalar * list)
{
  if (fwrite (header, sizeof(struct DumpHeader), 1, fp) < 1) {
    perror ("dump(): error while writing header");
    exit (1);
  }
  if (list) for (scalar s = *list, *_i77 = list; ((scalar *)&s)->i >= 0; s = *++_i77) {
    unsigned len = strlen(_attribute[s.i].name);
    if (fwrite (&len, sizeof(unsigned), 1, fp) < 1) {
      perror ("dump(): error while writing len");
      exit (1);
    }
    if (fwrite (_attribute[s.i].name, sizeof(char), len, fp) < len) {
      perror ("dump(): error while writing s.name");
      exit (1);
    }
  }
  double o[4] = {X0,Y0,Z0,L0};
  if (fwrite (o, sizeof(double), 4, fp) < 4) {
    perror ("dump(): error while writing coordinates");
    exit (1);
  }
}



void dump (struct Dump p)
{ ;
  FILE * fp = p.fp;
  char def[] = "dump", * file = p.file ? p.file : p.fp ? 
# 1066 "/Users/weugene/basilisk/src/output.h" 3 4
                                                        ((void *)0) 
# 1066 "/Users/weugene/basilisk/src/output.h"
                                                             : def;

  char * name = 
# 1068 "/Users/weugene/basilisk/src/output.h" 3 4
               ((void *)0)
# 1068 "/Users/weugene/basilisk/src/output.h"
                   ;
  if (file) {
    name = (char *) malloc(strlen(file) + 2);
    
# 1071 "/Users/weugene/basilisk/src/output.h" 3 4
   __builtin___strcpy_chk (
# 1071 "/Users/weugene/basilisk/src/output.h"
   name
# 1071 "/Users/weugene/basilisk/src/output.h" 3 4
   , 
# 1071 "/Users/weugene/basilisk/src/output.h"
   file
# 1071 "/Users/weugene/basilisk/src/output.h" 3 4
   , __builtin_object_size (
# 1071 "/Users/weugene/basilisk/src/output.h"
   name
# 1071 "/Users/weugene/basilisk/src/output.h" 3 4
   , 2 > 1 ? 1 : 0))
# 1071 "/Users/weugene/basilisk/src/output.h"
                      ;
    if (!p.unbuffered)
      
# 1073 "/Users/weugene/basilisk/src/output.h" 3 4
     __builtin___strcat_chk (
# 1073 "/Users/weugene/basilisk/src/output.h"
     name
# 1073 "/Users/weugene/basilisk/src/output.h" 3 4
     , 
# 1073 "/Users/weugene/basilisk/src/output.h"
     "~"
# 1073 "/Users/weugene/basilisk/src/output.h" 3 4
     , __builtin_object_size (
# 1073 "/Users/weugene/basilisk/src/output.h"
     name
# 1073 "/Users/weugene/basilisk/src/output.h" 3 4
     , 2 > 1 ? 1 : 0))
# 1073 "/Users/weugene/basilisk/src/output.h"
                       ;
    if ((fp = fopen (name, "w")) == 
# 1074 "/Users/weugene/basilisk/src/output.h" 3 4
                                   ((void *)0)
# 1074 "/Users/weugene/basilisk/src/output.h"
                                       ) {
      perror (name);
      exit (1);
    }
  }
  
# 1079 "/Users/weugene/basilisk/src/output.h" 3 4
 (__builtin_expect(!(
# 1079 "/Users/weugene/basilisk/src/output.h"
 fp
# 1079 "/Users/weugene/basilisk/src/output.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/output.h", 1079, 
# 1079 "/Users/weugene/basilisk/src/output.h"
 "fp"
# 1079 "/Users/weugene/basilisk/src/output.h" 3 4
 ) : (void)0)
# 1079 "/Users/weugene/basilisk/src/output.h"
            ;

  scalar * dlist = dump_list (p.list ? p.list : all);
  scalar size= new_scalar("size");
  scalar * list = list_concat (((scalar []){size,{-1}}), dlist); free(dlist);
  struct DumpHeader header = { t, list_len(list), iter, (grid->depth), 1,
          dump_version };
  dump_header (fp, &header, list);

  subtree_size (size, 
# 1088 "/Users/weugene/basilisk/src/output.h" 3 4
                     0
# 1088 "/Users/weugene/basilisk/src/output.h"
                          );

   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 1090 "/Users/weugene/basilisk/src/output.h"
 {
    unsigned flags = (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf) ? leaf : 0;
    if (fwrite (&flags, sizeof(unsigned), 1, fp) < 1) {
      perror ("dump(): error while writing flags");
      exit (1);
    }
    if (list) for (scalar s = *list, *_i78 = list; ((scalar *)&s)->i >= 0; s = *++_i78)
      if (fwrite (&((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i], sizeof(double), 1, fp) < 1) {
 perror ("dump(): error while writing scalars");
 exit (1);
      }
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf))
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }

  free(list);
  if (file) {
    fclose (fp);
    if (!p.unbuffered)
      rename (name, file);
    free(name);
  }
 delete (((scalar []){size,{-1}})); ; }
# 1193 "/Users/weugene/basilisk/src/output.h"

# 1193 "/Users/weugene/basilisk/src/output.h" 3 4
_Bool 
# 1193 "/Users/weugene/basilisk/src/output.h"
    restore (struct Dump p)
{ ;
  FILE * fp = p.fp;
  char * file = p.file;
  if (file && (fp = fopen (file, "r")) == 
# 1197 "/Users/weugene/basilisk/src/output.h" 3 4
                                         ((void *)0)
# 1197 "/Users/weugene/basilisk/src/output.h"
                                             )
    { 
# 1198 "/Users/weugene/basilisk/src/output.h" 3 4
     _Bool 
# 1198 "/Users/weugene/basilisk/src/output.h"
          _ret = 
# 1198 "/Users/weugene/basilisk/src/output.h" 3 4
                  0
# 1198 "/Users/weugene/basilisk/src/output.h"
                       ; ; return _ret; }
  
# 1199 "/Users/weugene/basilisk/src/output.h" 3 4
 (__builtin_expect(!(
# 1199 "/Users/weugene/basilisk/src/output.h"
 fp
# 1199 "/Users/weugene/basilisk/src/output.h" 3 4
 ), 0) ? __assert_rtn(__func__, "/Users/weugene/basilisk/src/output.h", 1199, 
# 1199 "/Users/weugene/basilisk/src/output.h"
 "fp"
# 1199 "/Users/weugene/basilisk/src/output.h" 3 4
 ) : (void)0)
# 1199 "/Users/weugene/basilisk/src/output.h"
            ;

  struct DumpHeader header;
  if (fread (&header, sizeof(header), 1, fp) < 1) {
    fprintf (
# 1203 "/Users/weugene/basilisk/src/output.h" 3 4
            __stderrp
# 1203 "/Users/weugene/basilisk/src/output.h"
                , "restore(): error: expecting header\n");
    exit (1);
  }


  init_grid (1);
   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 1206 "/Users/weugene/basilisk/src/output.h"
 {
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).pid = 0;
    (*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])))).flags |= active;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  ((Tree *)grid)->dirty = 
# 1210 "/Users/weugene/basilisk/src/output.h" 3 4
                         1
# 1210 "/Users/weugene/basilisk/src/output.h"
                             ;
# 1231 "/Users/weugene/basilisk/src/output.h"
  
# 1231 "/Users/weugene/basilisk/src/output.h" 3 4
 _Bool 
# 1231 "/Users/weugene/basilisk/src/output.h"
      restore_all = (p.list == all);
  scalar * list = dump_list (p.list ? p.list : all);
  if (header.version == 161020) {
    if (header.len - 1 != list_len (list)) {
      fprintf (
# 1235 "/Users/weugene/basilisk/src/output.h" 3 4
              __stderrp
# 1235 "/Users/weugene/basilisk/src/output.h"
                  ,
        "restore(): error: the list lengths don't match: "
        "%ld (file) != %d (code)\n",
        header.len - 1, list_len (list));
      exit (1);
    }
  }
  else {
    if (header.version != dump_version) {
      fprintf (
# 1244 "/Users/weugene/basilisk/src/output.h" 3 4
              __stderrp
# 1244 "/Users/weugene/basilisk/src/output.h"
                  ,
        "restore(): error: file version mismatch: "
        "%d (file) != %d (code)\n",
        header.version, dump_version);
      exit (1);
    }

    scalar * input = 
# 1251 "/Users/weugene/basilisk/src/output.h" 3 4
                    ((void *)0)
# 1251 "/Users/weugene/basilisk/src/output.h"
                        ;
    for (int i = 0; i < header.len; i++) {
      unsigned len;
      if (fread (&len, sizeof(unsigned), 1, fp) < 1) {
 fprintf (
# 1255 "/Users/weugene/basilisk/src/output.h" 3 4
         __stderrp
# 1255 "/Users/weugene/basilisk/src/output.h"
             , "restore(): error: expecting len\n");
 exit (1);
      }
      char name[len + 1];
      if (fread (name, sizeof(char), len, fp) < 1) {
 fprintf (
# 1260 "/Users/weugene/basilisk/src/output.h" 3 4
         __stderrp
# 1260 "/Users/weugene/basilisk/src/output.h"
             , "restore(): error: expecting s.name\n");
 exit (1);
      }
      name[len] = '\0';

      if (i > 0) {
 
# 1266 "/Users/weugene/basilisk/src/output.h" 3 4
_Bool 
# 1266 "/Users/weugene/basilisk/src/output.h"
     found = 
# 1266 "/Users/weugene/basilisk/src/output.h" 3 4
             0
# 1266 "/Users/weugene/basilisk/src/output.h"
                  ;
 if (list) for (scalar s = *list, *_i81 = list; ((scalar *)&s)->i >= 0; s = *++_i81)
   if (!strcmp (_attribute[s.i].name, name)) {
     input = list_append (input, s);
     found = 
# 1270 "/Users/weugene/basilisk/src/output.h" 3 4
            1
# 1270 "/Users/weugene/basilisk/src/output.h"
                ; break;
   }
 if (!found) {
   if (restore_all) {
     scalar s = new_scalar("s");
     free(_attribute[s.i].name);
     _attribute[s.i].name = strdup(name);
     input = list_append (input, s);
   }
   else
     input = list_append (input, (scalar){0x7fffffff});
 }
      }
    }
    free(list);
    list = input;

    double o[4];
    if (fread (o, sizeof(double), 4, fp) < 4) {
      fprintf (
# 1289 "/Users/weugene/basilisk/src/output.h" 3 4
              __stderrp
# 1289 "/Users/weugene/basilisk/src/output.h"
                  , "restore(): error: expecting coordinates\n");
      exit (1);
    }
    origin ((struct _origin){o[0], o[1], o[2]});
    size (o[3]);
  }
# 1306 "/Users/weugene/basilisk/src/output.h"
  scalar * listm = ((cm).i >= 65536) ? 
# 1306 "/Users/weugene/basilisk/src/output.h" 3 4
                                    ((void *)0) 
# 1306 "/Users/weugene/basilisk/src/output.h"
                                         : (scalar *)((vector []){{fm.x,fm.y},{{-1},{-1}}});



   { { Point root = {2,2,0}; { int ig = 0, jg = 0; (void)(ig); (void)(jg); Point point; struct { int l, i, j, stage; } stack[20]; int _s = -1; { _s++; stack[_s].l = 0; stack[_s].i = root.i; stack[_s].j = root.j; stack[_s].stage = 0; }; while (_s >= 0) { int stage; { point.level = stack[_s].l; point.i = stack[_s].i; point.j = stack[_s].j; stage = stack[_s].stage; _s--; }; if (!(point.i+0 >= 0 && point.i+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0] && point.j+0 >= 0 && point.j+0 < (1 << point.level) + 2*2 && ((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0])) continue; switch (stage) { case 0: { double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 1310 "/Users/weugene/basilisk/src/output.h"
 {
    unsigned flags;
    if (fread (&flags, sizeof(unsigned), 1, fp) != 1) {
      fprintf (
# 1313 "/Users/weugene/basilisk/src/output.h" 3 4
              __stderrp
# 1313 "/Users/weugene/basilisk/src/output.h"
                  , "restore(): error: expecting 'flags'\n");
      exit (1);
    }

    fseek (fp, sizeof(double), 
# 1317 "/Users/weugene/basilisk/src/output.h" 3 4
                              1
# 1317 "/Users/weugene/basilisk/src/output.h"
                                      );
    if (list) for (scalar s = *list, *_i82 = list; ((scalar *)&s)->i >= 0; s = *++_i82) {
      double val;
      if (fread (&val, sizeof(double), 1, fp) != 1) {
 fprintf (
# 1321 "/Users/weugene/basilisk/src/output.h" 3 4
         __stderrp
# 1321 "/Users/weugene/basilisk/src/output.h"
             , "restore(): error: expecting a scalar\n");
 exit (1);
      }
      if (s.i != 0x7fffffff)
 ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[s.i] = val;
    }
    if (!(flags & leaf) && (((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf))
      refine_cell (point, listm, 0, 
# 1328 "/Users/weugene/basilisk/src/output.h" 3 4
                                   ((void *)0)
# 1328 "/Users/weugene/basilisk/src/output.h"
                                       );
    if ((((*((Cell *)((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]))))).flags & leaf))
      continue;
  } } if (point.level < grid->depth) { { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 1; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; } break; } case 1: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 2; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = (2*point.i - 2); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; case 2: { _s++; stack[_s].l = point.level; stack[_s].i = point.i; stack[_s].j = point.j; stack[_s].stage = 3; }; { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = (2*point.j - 2); stack[_s].stage = 0; }; break; case 3: { _s++; stack[_s].l = point.level + 1; stack[_s].i = ((2*point.i - 2) + 1); stack[_s].j = ((2*point.j - 2) + 1); stack[_s].stage = 0; }; break; } } } }; }
  boundary (list);

  boundary (listm);

  scalar * other = 
# 1336 "/Users/weugene/basilisk/src/output.h" 3 4
                  ((void *)0)
# 1336 "/Users/weugene/basilisk/src/output.h"
                      ;
  if (all) for (scalar s = *all, *_i83 = all; ((scalar *)&s)->i >= 0; s = *++_i83)
    if (!list_lookup (list, s) && !list_lookup (listm, s))
      other = list_append (other, s);
  reset (other, 0.);
  free(other);

  free(list);
  if (file)
    fclose (fp);


  while (iter < header.i && events (
# 1348 "/Users/weugene/basilisk/src/output.h" 3 4
                                   0
# 1348 "/Users/weugene/basilisk/src/output.h"
                                        ))
    iter = inext;
  events (
# 1350 "/Users/weugene/basilisk/src/output.h" 3 4
         0
# 1350 "/Users/weugene/basilisk/src/output.h"
              );
  while (t < header.t && events (
# 1351 "/Users/weugene/basilisk/src/output.h" 3 4
                                0
# 1351 "/Users/weugene/basilisk/src/output.h"
                                     ))
    t = tnext;
  t = header.t;
  events (
# 1354 "/Users/weugene/basilisk/src/output.h" 3 4
         0
# 1354 "/Users/weugene/basilisk/src/output.h"
              );

  { 
# 1356 "/Users/weugene/basilisk/src/output.h" 3 4
   _Bool 
# 1356 "/Users/weugene/basilisk/src/output.h"
        _ret = 
# 1356 "/Users/weugene/basilisk/src/output.h" 3 4
                1
# 1356 "/Users/weugene/basilisk/src/output.h"
                    ; ; return _ret; }
 ; }
# 331 "/Users/weugene/basilisk/src/utils.h"
# 12 "/Users/weugene/basilisk/src/run.h"


void run (void)
{ ;
  iter = 0, t = 0., dt = 1.;
  init_grid (N);

  perf.nc = perf.tnc = 0;
  perf.gt = timer_start();
  while (events (
# 21 "/Users/weugene/basilisk/src/run.h" 3 4
                1
# 21 "/Users/weugene/basilisk/src/run.h"
                    )) {





    update_perf();
    iter = inext, t = tnext;
  }




  timer_print (perf.gt, iter, perf.tnc);

  free_grid();
 ; }
# 2 "foreach_dimension_in_foreach_dimension.c"
vector b= {{0},{1}};
vector zerocf= {{65536 + 6},{65536 + 7}};
int main(int argc, char * argv[])
{ _init_solver();
    init_grid(16);
     vector bU = zerocf;
    {
# 8 "foreach_dimension_in_foreach_dimension.c"
{
         {
if (!((bU.x).i >= 65536)) {
# 9 "foreach_dimension_in_foreach_dimension.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 9 "foreach_dimension_in_foreach_dimension.c"
 {
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.x.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[bU.x.i];
        } } } } }; }
if (((bU.x).i >= 65536)) {
const struct { double x, y; } _const_bU = {_constant[bU.x.i -65536], _constant[bU.y.i - 65536]};
(void)(_const_bU);
# 9 "foreach_dimension_in_foreach_dimension.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 9 "foreach_dimension_in_foreach_dimension.c"
 {
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.x.i] = _const_bU.x;
        } } } } }; } }
    }
# 8 "foreach_dimension_in_foreach_dimension.c"
{
         {
if (!((bU.y).i >= 65536)) {
# 9 "foreach_dimension_in_foreach_dimension.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 9 "foreach_dimension_in_foreach_dimension.c"
 {
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.y.i] = ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[bU.y.i];
        } } } } }; }
if (((bU.y).i >= 65536)) {
const struct { double x, y; } _const_bU = {_constant[bU.y.i -65536], _constant[bU.x.i - 65536]};
(void)(_const_bU);
# 9 "foreach_dimension_in_foreach_dimension.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 9 "foreach_dimension_in_foreach_dimension.c"
 {
            ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.y.i] = _const_bU.y;
        } } } } }; } }
    }}
     {
if (!((bU.x).i >= 65536)) {
# 13 "foreach_dimension_in_foreach_dimension.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 13 "foreach_dimension_in_foreach_dimension.c"
 fprintf(
# 13 "foreach_dimension_in_foreach_dimension.c" 3 4
        __stderrp
# 13 "foreach_dimension_in_foreach_dimension.c"
            ,"b=%g %g bU=%g %g\n", ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.x.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.y.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[bU.x.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[bU.y.i]); } } } }; }
if (((bU.x).i >= 65536)) {
const struct { double x, y; } _const_bU = {_constant[bU.x.i -65536], _constant[bU.y.i - 65536]};
(void)(_const_bU);
# 13 "foreach_dimension_in_foreach_dimension.c"
{ if (((Tree *)grid)->dirty) update_cache_f(); }; { { int ig = 0, jg = 0, kg = 0; (void)(ig); (void)(jg); (void)(kg); Point point = {2,2,0}; int _k; unsigned short _flags; (void)(_flags); for (_k = 0; _k < ((Tree *)grid)->leaves.n; _k++) { point.i = ((Tree *)grid)->leaves.p[_k].i; point.j = ((Tree *)grid)->leaves.p[_k].j; point.level = ((Tree *)grid)->leaves.p[_k].level; _flags = ((Tree *)grid)->leaves.p[_k].flags; double Delta = L0*(1./(1 << point.level)); double Delta_x = Delta; double Delta_y = Delta; double x = (ig/2. + (point.i - 2) + 0.5)*Delta + X0; (void)(x); double y = (jg/2. + (point.j - 2) + 0.5)*Delta + Y0; (void)(y); double z = 0.; (void)(z); (void)(Delta); (void)(Delta_x); (void)(Delta_y); ; int level = point.level; (void)(level); struct { int x, y; } child = { 2*((point.i+2)%2)-1, 2*((point.j+2)%2)-1 }; (void)(child); Point parent = point; (void)(parent); parent.level--; parent.i = (point.i + 2)/2; parent.j = (point.j + 2)/2;;{
# 13 "foreach_dimension_in_foreach_dimension.c"
 fprintf(
# 13 "foreach_dimension_in_foreach_dimension.c" 3 4
        __stderrp
# 13 "foreach_dimension_in_foreach_dimension.c"
            ,"b=%g %g bU=%g %g\n", ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.x.i], ((double *) ((((Tree *)grid)->L[point.level]->m[point.i+0][point.j+0]) + sizeof(Cell)))[b.y.i], _const_bU.x, _const_bU.y); } } } }; } }

return 0;
 free_solver(); }
size_t datasize = 2*sizeof (double);
void _init_solver (void) {
  void init_solver();
  init_solver();
  Events = (Event *) malloc(sizeof (Event));
  Events[0].last = 1;
  _attribute = (_Attributes *) calloc(datasize/sizeof(double),sizeof (_Attributes));
  all = (scalar *) malloc(sizeof (scalar)*3);
  for (int i = 0; i < 2; i++)
    all[i].i = i;
  all[2].i = -1;
  set_fpe();
  quadtree_methods();
  init_const_vector ((vector){{65536 +6},{65536 +7}}, "zerocf", (double []) {1.,0.,0.});
  init_vector ((vector){{0},{1}}, "b");
  init_const_scalar ((scalar){65536 +5}, "zeroc", 0.);
  init_const_scalar ((scalar){65536 +4}, "unity", 1.);
  init_const_vector ((vector){{65536 +2},{65536 +3}}, "unityf", (double []) {1.,1.,1.});
  init_const_vector ((vector){{65536 +0},{65536 +1}}, "zerof", (double []) {0.,0.,0.});
}
